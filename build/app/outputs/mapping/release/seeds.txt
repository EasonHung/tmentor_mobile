org.webrtc.GlTextureFrameBuffer
org.webrtc.ThreadUtils$BlockingOperation
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback
org.webrtc.PeerConnection$TlsCertPolicy
org.webrtc.ContextUtils
com.yalantis.ucrop.view.widget.HorizontalProgressWheelView
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction
org.webrtc.EglRenderer$EglSurfaceCreation
com.cloudwebrtc.webrtc.audio.AudioDeviceKind
org.webrtc.DtmfSender
com.cloudwebrtc.webrtc.utils.AnyThreadSink
org.webrtc.EncodedImage
com.google.android.datatransport.cct.CctBackendFactory
org.webrtc.PeerConnectionFactory$Options
org.webrtc.Logging$1
com.google.android.gms.auth.api.signin.GoogleSignInAccount
org.webrtc.DataChannel$Init
org.webrtc.Metrics
org.webrtc.VideoCodecStatus
org.webrtc.Histogram
org.webrtc.AndroidVideoDecoder$FrameInfo
com.google.android.gms.common.util.DynamiteApi
org.webrtc.EglBase10Impl$1FakeSurfaceHolder
com.yalantis.ucrop.view.GestureCropImageView
org.webrtc.PeerConnection$PeerConnectionState
org.webrtc.GlShader
org.webrtc.audio.JavaAudioDeviceModule$Builder
org.webrtc.CameraVideoCapturer$CameraStatistics
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode
org.webrtc.GlRectDrawer
org.webrtc.RtpParameters$DegradationPreference
org.webrtc.PlatformSoftwareVideoDecoderFactory$1
androidx.window.R$attr
org.webrtc.GlGenericDrawer$ShaderType
org.webrtc.SoftwareVideoDecoderFactory
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder
androidx.core.widget.NestedScrollView
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver
com.google.android.gms.common.api.internal.BasePendingResult
androidx.appcompat.view.menu.ExpandedMenuView
org.webrtc.RtpCapabilities$HeaderExtensionCapability
com.cloudwebrtc.webrtc.record.AudioChannel
com.google.firebase.installations.FirebaseInstallationsRegistrar
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver
com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException
android.support.v4.media.AudioAttributesImplBaseParcelizer
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver
org.webrtc.EglBase14
androidx.window.layout.DisplayFeature
org.webrtc.Camera1Session$SessionState
org.webrtc.VideoCodecInfo
org.webrtc.CameraCapturer$1
com.dexterous.flutterlocalnotifications.models.MessageDetails
com.cloudwebrtc.webrtc.utils.ConstraintsMap
org.webrtc.VideoDecoderFallback
com.google.android.gms.measurement.AppMeasurementReceiver
androidx.appcompat.view.menu.ActionMenuItemView
com.cloudwebrtc.webrtc.utils.PermissionUtils
android.support.v4.media.session.MediaSessionCompat$QueueItem
org.webrtc.HardwareVideoEncoder$BusyCount
androidx.window.layout.WindowInfoTrackerImpl$Companion
com.cloudwebrtc.webrtc.R$style
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService
com.cloudwebrtc.webrtc.BuildConfig
androidx.versionedparcelable.CustomVersionedParcelable
org.webrtc.EglBase$Context
org.webrtc.Metrics$HistogramInfo
org.webrtc.audio.JavaAudioDeviceModule$1
io.objectbox.relation.ToOne
org.webrtc.ScreenCapturerAndroid$1
org.webrtc.HardwareVideoEncoder$YuvFormat$1
kotlinx.coroutines.android.AndroidExceptionPreHandler
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5
io.objectbox.exception.DbMaxDataSizeExceededException
org.webrtc.VideoEncoder$CodecSpecificInfo
org.webrtc.audio.WebRtcAudioRecord
org.webrtc.SurfaceEglRenderer
org.webrtc.PeerConnection$KeyType
org.webrtc.WrappedNativeI420Buffer
org.webrtc.audio.AudioDeviceModule
org.webrtc.PeerConnection$1
org.webrtc.RefCounted
org.webrtc.PeerConnection$IceServer
androidx.window.embedding.SplitInfo
com.google.android.gms.auth.api.signin.SignInAccount
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency
androidx.activity.ComponentActivity$3
com.cloudwebrtc.webrtc.R$id
com.dexterous.flutterlocalnotifications.models.NotificationAction
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver
android.support.v4.media.AudioAttributesImplApi21Parcelizer
org.webrtc.FecControllerFactoryFactoryInterface
org.webrtc.StatsReport
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback
org.webrtc.Camera2Session$SessionState
org.webrtc.VideoFrameBufferType
androidx.window.layout.ActivityCompatHelperApi30
org.webrtc.RtpParameters
org.webrtc.CameraCapturer$6
org.webrtc.FileVideoCapturer$VideoReader
com.cloudwebrtc.webrtc.R$dimen
org.webrtc.Camera2Session$CameraStateCallback
org.webrtc.MediaCodecWrapperFactoryImpl
org.webrtc.SurfaceTextureHelper$3
io.flutter.plugins.GeneratedPluginRegistrant
androidx.window.layout.ExtensionInterfaceCompat
org.webrtc.EglRenderer$FrameListenerAndParams
io.objectbox.tree.LeafNode
org.webrtc.ThreadUtils$1CaughtException
org.webrtc.AudioDecoderFactoryFactory
androidx.window.layout.DisplayCompatHelperApi28
org.webrtc.RtpTransceiver
org.webrtc.JNILogging
org.webrtc.NativePeerConnectionFactory
org.webrtc.audio.VolumeLogger
org.webrtc.CalledByNativeUnchecked
androidx.window.core.Version$bigInteger$2
androidx.appcompat.widget.ButtonBarLayout
org.webrtc.CryptoOptions
org.webrtc.CameraEnumerationAndroid$ClosestComparator
androidx.window.embedding.ExtensionEmbeddingBackend
com.google.firebase.iid.FirebaseInstanceId
org.webrtc.NativeLibraryLoader
io.objectbox.converter.PropertyConverter
io.objectbox.exception.DbMaxReadersExceededException
org.webrtc.HardwareVideoDecoderFactory
com.cloudwebrtc.webrtc.GetUserMediaImpl
org.webrtc.AddIceObserver
org.webrtc.HardwareVideoEncoder$YuvFormat$2
org.webrtc.LibvpxVp8Encoder
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter
org.webrtc.VideoEncoderWrapper
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface
android.support.v4.media.AudioAttributesCompatParcelizer
androidx.window.layout.HardwareFoldingFeature$Type
androidx.window.embedding.EmbeddingRule
androidx.window.layout.WindowLayoutInfo
org.webrtc.NetworkControllerFactoryFactory
org.webrtc.VideoSource$1
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment
io.objectbox.Transaction
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory
com.google.android.gms.common.internal.ReflectedParcelable
org.webrtc.VideoEncoder$CodecSpecificInfoVP9
org.webrtc.EncodedImage$1
org.webrtc.RtpParameters$Encoding
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface
io.objectbox.converter.StringFlexMapConverter
org.webrtc.DataChannel$State
androidx.appcompat.widget.ActionBarContainer
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate
android.support.v4.media.MediaBrowserCompat$ItemReceiver
android.support.v4.media.session.MediaSessionCompat$Token
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples
com.google.firebase.messaging.FirebaseMessaging
org.webrtc.HardwareVideoEncoder$1
com.google.android.gms.wallet.MaskedWallet
androidx.window.layout.FoldingFeature
org.webrtc.FileVideoCapturer$1
io.flutter.plugins.firebase.core.FlutterFirebasePlugin
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
org.webrtc.audio.WebRtcAudioTrack
org.webrtc.ThreadUtils
com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled
org.webrtc.voiceengine.WebRtcAudioEffects
org.webrtc.VideoFrame$I420Buffer
org.webrtc.voiceengine.WebRtcAudioRecord
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory
org.webrtc.NativeLibrary$DefaultLoader
org.webrtc.PeerConnection$IceConnectionState
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate
org.webrtc.DefaultVideoDecoderFactory
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
androidx.annotation.Keep
androidx.appcompat.view.menu.ListMenuItemView
org.webrtc.NetworkChangeDetectorFactory
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo
com.google.android.gms.auth.api.signin.internal.SignInHubActivity
com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver
io.objectbox.exception.DbDetachedException
com.google.firebase.provider.FirebaseInitProvider
android.support.v4.media.session.ParcelableVolumeInfo
org.webrtc.StatsReport$Value
okhttp3.internal.publicsuffix.PublicSuffixDatabase
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer
org.webrtc.PeerConnection$BundlePolicy
com.google.android.gms.common.api.Scope
org.webrtc.VideoFrameDrawer
org.webrtc.PeerConnectionFactory$Builder
androidx.window.layout.WindowInfoTracker
com.dexterous.flutterlocalnotifications.models.BitmapSource
org.webrtc.NativeAndroidVideoTrackSource
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar
org.webrtc.MediaCodecUtils$1
org.webrtc.SimulcastVideoEncoderFactory
org.webrtc.VideoCodecMimeType
com.cloudwebrtc.webrtc.R$attr
org.webrtc.TextureBufferImpl$1
androidx.media.AudioAttributesImplApi21
androidx.window.embedding.SplitRuleParser
org.webrtc.AndroidVideoDecoder$1
com.google.android.gms.maps.model.LatLng
org.webrtc.EglRenderer
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode
com.dexterous.flutterlocalnotifications.RepeatInterval
com.cloudwebrtc.webrtc.R$drawable
io.objectbox.exception.NumericOverflowException
org.webrtc.MediaSource
org.webrtc.VideoFileRenderer
org.webrtc.FramerateBitrateAdjuster
com.google.firebase.iid.Registrar
org.webrtc.audio.WebRtcAudioRecord$1
com.google.android.gms.common.api.internal.zzd
androidx.window.embedding.ActivityRule
com.cloudwebrtc.webrtc.GetUserMediaImpl$5
org.webrtc.PeerConnectionFactory$1
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver
com.google.android.gms.auth.TokenData
org.webrtc.CameraCapturer$SwitchState
org.webrtc.voiceengine.WebRtcAudioUtils
android.support.v4.media.MediaDescriptionCompat
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode
io.objectbox.converter.LongLongMapConverter
androidx.window.embedding.MatcherUtils
org.webrtc.VideoProcessor
org.webrtc.Camera1Capturer
androidx.window.core.Bounds
io.objectbox.relation.ToMany
com.dexterous.flutterlocalnotifications.models.PersonDetails
androidx.core.app.RemoteActionCompatParcelizer
androidx.window.layout.FoldingFeature$OcclusionType$Companion
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor
org.webrtc.H264Utils
androidx.fragment.app.FragmentManager$6
io.objectbox.exception.DbException
org.webrtc.TextureBufferImpl
org.webrtc.RendererCommon$ScalingType
com.cloudwebrtc.webrtc.DataChannelObserver
org.webrtc.IceCandidate
org.webrtc.IceCandidateErrorEvent
io.objectbox.converter.IntegerLongMapConverter
com.google.android.gms.common.SupportErrorDialogFragment
org.webrtc.VideoDecoderWrapper
org.webrtc.WebRtcClassLoader
org.webrtc.VideoEncoderFactory$VideoEncoderSelector
com.google.firebase.datatransport.TransportRegistrar
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask
androidx.window.layout.SidecarAdapter$Companion
org.webrtc.PeerConnection$RTCConfiguration
org.webrtc.RtcCertificatePem
org.webrtc.EglBase14$Context
org.webrtc.YuvConverter$1
org.webrtc.TurnCustomizer
org.webrtc.PeerConnection$CandidateNetworkPolicy
org.webrtc.Camera2Session
org.webrtc.FileVideoCapturer$VideoReaderY4M
de.julianassmann.flutter_background.IsolateHolderService
io.objectbox.exception.DbSchemaException
org.webrtc.NetworkChangeDetector$IPAddress
androidx.window.layout.WindowMetricsCalculatorCompat
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback
org.webrtc.PeerConnection$ContinualGatheringPolicy
androidx.window.embedding.SplitRule
org.webrtc.ThreadUtils$2
org.webrtc.Predicate
org.webrtc.HardwareVideoEncoder
androidx.window.core.Version$Companion
com.dexterous.flutterlocalnotifications.NotificationStyle
com.cloudwebrtc.webrtc.utils.Callback
org.webrtc.VideoEncoder$Capabilities
org.webrtc.VideoFrame$Buffer
com.google.firebase.messaging.FirebaseMessagingService
org.webrtc.PeerConnection$IceTransportsType
org.webrtc.FrameDecryptor
org.webrtc.CameraSession$CreateSessionCallback
org.webrtc.MediaSource$State
org.webrtc.VideoEncoder$CodecSpecificInfoVP8
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2
org.webrtc.RtpParameters$Codec
com.yalantis.ucrop.view.OverlayView
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback
com.google.android.gms.auth.UserRecoverableAuthException
androidx.window.layout.SidecarCompat
com.cloudwebrtc.webrtc.GetUserMediaImpl$3$1
com.yalantis.ucrop.UCropActivity
org.webrtc.PeerConnection$RtcpMuxPolicy
org.webrtc.GlUtil$GlOutOfMemoryException
org.webrtc.HardwareVideoDecoderFactory$1
com.cloudwebrtc.webrtc.GetUserMediaImpl$4
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment
org.webrtc.SurfaceTextureHelper$FrameRefMonitor
com.google.android.gms.wallet.FullWallet
com.cloudwebrtc.webrtc.R$styleable
androidx.window.layout.SidecarAdapter
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl
com.eak.mentor.app.MainActivity
androidx.window.layout.HardwareFoldingFeature$Companion
androidx.window.layout.DisplayCompatHelperApi17
org.webrtc.GlUtil
org.webrtc.HardwareVideoEncoderFactory$1
org.webrtc.PeerConnection$PortPrunePolicy
org.webrtc.audio.JavaAudioDeviceModule
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver
io.objectbox.exception.ConstraintViolationException
io.flutter.plugin.platform.SingleViewPresentation
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper
org.webrtc.RtpTransceiver$RtpTransceiverInit
org.webrtc.CameraEnumerationAndroid$CaptureFormat
com.cloudwebrtc.webrtc.MethodCallHandlerImpl
kotlinx.coroutines.android.AndroidDispatcherFactory
kotlinx.coroutines.internal.MainDispatcherFactory
androidx.appcompat.widget.ActionMenuView
org.webrtc.voiceengine.WebRtcAudioTrack
com.cloudwebrtc.webrtc.audio.AudioSwitchManager
androidx.window.R$id
org.webrtc.SurfaceViewRenderer
io.objectbox.converter.FlexObjectConverter
androidx.appcompat.widget.ViewStubCompat
org.webrtc.CameraCapturer$9
org.webrtc.EglRenderer$ErrorCallback
org.webrtc.VideoEncoderFactory
com.google.android.gms.auth.api.signin.RevocationBoundService
io.flutter.plugins.imagepicker.ImagePickerFileProvider
org.webrtc.Camera1Session
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty
org.webrtc.voiceengine.WebRtcAudioRecord$1
androidx.window.layout.HardwareFoldingFeature
androidx.fragment.app.DialogFragment
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread
org.webrtc.JavaI420Buffer
org.webrtc.VideoEncoder$CodecSpecificInfoH264
com.google.android.gms.common.api.internal.LifecycleCallback
androidx.window.R$styleable
org.webrtc.VideoFrame$TextureBuffer
androidx.lifecycle.DefaultLifecycleObserver
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer
org.webrtc.GlRectDrawer$ShaderCallbacks
androidx.window.embedding.SplitController$Companion
org.webrtc.YuvConverter
com.google.android.gms.common.GooglePlayServicesManifestException
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
org.webrtc.CameraSession$FailureType
androidx.window.layout.EmptyDecorator
org.webrtc.MediaStreamTrack
org.webrtc.VideoEncoder$ScalingSettings
org.webrtc.NetworkChangeDetector$NetworkInformation
androidx.window.layout.SidecarCompat$Companion
androidx.window.embedding.ActivityStack
io.flutter.view.FlutterCallbackInformation
androidx.media.AudioAttributesCompat
io.objectbox.BoxStore
org.webrtc.VideoFrameDrawer$1
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver
org.webrtc.PeerConnectionFactory$ThreadInfo
com.google.firebase.messaging.FirebaseMessagingRegistrar
io.objectbox.exception.DbExceptionListener
org.webrtc.RendererCommon$1
org.webrtc.SurfaceTextureHelper$2
org.webrtc.VideoEncoder$Callback
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread
org.webrtc.RtpReceiver
com.google.android.gms.measurement.AppMeasurementJobService
org.webrtc.NetworkPreference
com.cloudwebrtc.webrtc.record.MediaRecorderImpl
com.cloudwebrtc.webrtc.GetUserMediaImpl$3
org.webrtc.SoftwareVideoEncoderFactory
androidx.appcompat.widget.ActivityChooserView$InnerLayout
org.webrtc.NetworkChangeDetector$Observer
org.webrtc.CameraSession
com.google.firebase.analytics.FirebaseAnalytics
androidx.window.embedding.EmbeddingTranslatingCallback
org.webrtc.AudioEncoderFactoryFactory
org.webrtc.BitrateAdjuster
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
org.webrtc.CameraEnumerationAndroid$2
org.webrtc.CameraVideoCapturer$MediaRecorderHandler
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback
org.webrtc.CameraVideoCapturer$CameraSwitchHandler
io.objectbox.exception.PagesCorruptException
org.webrtc.Camera2Session$1
org.webrtc.VideoEncoder
androidx.window.embedding.SplitPlaceholderRule
org.webrtc.MediaCodecVideoDecoderFactory
android.support.v4.media.AudioAttributesImplApi26Parcelizer
androidx.window.layout.FoldingFeature$Orientation$Companion
org.webrtc.MediaStreamTrack$State
org.webrtc.MediaStreamTrack$MediaType
androidx.lifecycle.ReflectiveGenericLifecycleObserver
org.webrtc.VideoFrame
org.webrtc.GlGenericDrawer$ShaderCallbacks
com.dexterous.flutterlocalnotifications.utils.BooleanUtils
org.webrtc.GlRectDrawer$1
org.webrtc.DataChannel
org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry
org.webrtc.NetworkMonitor$1
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
androidx.window.layout.SidecarWindowBackend$Companion
androidx.window.embedding.SplitRule$LayoutDir
org.webrtc.RtpCapabilities
androidx.core.app.CoreComponentFactory
org.webrtc.CameraCapturer$8
org.webrtc.PeerConnection$SignalingState
org.webrtc.Camera2Capturer
org.webrtc.CameraCapturer$7
org.webrtc.VideoCapturer
androidx.window.layout.SidecarWindowBackend
org.webrtc.PeerConnection$IceServer$Builder
org.webrtc.JniHelper
org.webrtc.CallSessionFileRotatingLogSink
org.webrtc.EglBase10
org.webrtc.RtpCapabilities$CodecCapability
org.webrtc.Predicate$1
org.webrtc.ThreadUtils$4
org.webrtc.SSLCertificateVerifier
org.webrtc.DynamicBitrateAdjuster
io.objectbox.exception.UniqueViolationException
org.webrtc.CameraCapturer$4
org.webrtc.TextureBufferImpl$2
androidx.appcompat.widget.SearchView
org.webrtc.EncodedImage$FrameType
io.flutter.embedding.android.FlutterSplashView$SavedState
androidx.appcompat.widget.ActionBarContextView
org.webrtc.AndroidVideoDecoder
org.webrtc.CandidatePairChangeEvent
com.yalantis.ucrop.view.UCropView
org.webrtc.Predicate$2
org.webrtc.PlatformSoftwareVideoDecoderFactory
org.webrtc.NativeCapturerObserver
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1
com.cloudwebrtc.webrtc.utils.ObjectType
org.webrtc.Empty
org.webrtc.VideoDecoder$DecodeInfo
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata
io.flutter.embedding.engine.FlutterJNI
org.webrtc.RTCStatsReport
androidx.appcompat.widget.SearchView$SearchAutoComplete
com.google.firebase.concurrent.ExecutorsRegistrar
org.webrtc.VideoProcessor$FrameAdaptationParameters
org.webrtc.ThreadUtils$3
org.webrtc.Size
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange
android.support.v4.media.MediaBrowserCompat$MediaItem
androidx.window.layout.ActivityCompatHelperApi24
org.webrtc.VideoTrack
android.support.v4.media.session.PlaybackStateCompat$CustomAction
androidx.window.R
org.webrtc.CameraVideoCapturer
com.google.android.gms.wallet.wobs.CommonWalletObject
org.webrtc.Predicate$3
org.webrtc.PeerConnectionDependencies
androidx.window.embedding.EmptyEmbeddingComponent
org.webrtc.RtpTransceiver$RtpTransceiverDirection
androidx.window.layout.FoldingFeature$Orientation
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode
org.webrtc.LibvpxVp8Decoder
org.webrtc.VideoEncoder$CodecSpecificInfoAV1
org.webrtc.LibaomAv1Encoder
org.webrtc.ThreadUtils$1
org.webrtc.MediaStream
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation
androidx.versionedparcelable.ParcelImpl
io.objectbox.exception.DbShutdownException
androidx.transition.FragmentTransitionSupport
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1
androidx.media.AudioAttributesImplBaseParcelizer
androidx.lifecycle.CompositeGeneratedAdaptersObserver
com.cloudwebrtc.webrtc.PeerConnectionObserver
androidx.media.AudioAttributesImplApi21Parcelizer
org.webrtc.SurfaceTextureHelper
io.objectbox.exception.NonUniqueResultException
org.webrtc.VideoFileRenderer$1
androidx.window.embedding.SplitPairFilter
androidx.core.app.RemoteActionCompat
org.webrtc.SessionDescription$Type
androidx.lifecycle.FullLifecycleObserverAdapter
com.google.android.gms.auth.api.signin.internal.SignInConfiguration
org.webrtc.CameraCapturer$3
org.webrtc.MediaCodecUtils
org.webrtc.Priority
com.cloudwebrtc.webrtc.DataChannelObserver$1
org.webrtc.CameraEnumerator
org.webrtc.JniCommon
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils$1
org.webrtc.EglRenderer$1
org.webrtc.GlGenericDrawer
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback
org.webrtc.NetworkMonitor$2
org.webrtc.CryptoOptions$SFrame
org.webrtc.CryptoOptions$Srtp
io.objectbox.exception.DbFullException
org.webrtc.EncodedImage$Builder
androidx.window.layout.WindowMetricsCalculator
com.dexterous.flutterlocalnotifications.models.NotificationDetails
org.webrtc.VideoSource
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
io.flutter.embedding.engine.FlutterOverlaySurface
com.yalantis.ucrop.view.widget.AspectRatioTextView
com.google.firebase.iid.FirebaseInstanceIdReceiver
androidx.media.AudioAttributesImplApi26
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation
androidx.activity.result.ActivityResultRegistry$1
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
org.webrtc.DataChannel$Buffer
androidx.lifecycle.SavedStateHandleController
org.webrtc.AudioSource
androidx.activity.ImmLeaksCleaner
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1
org.webrtc.PeerConnection$SdpSemantics
org.webrtc.EglBase10Impl
org.webrtc.PeerConnection$AdapterType
androidx.window.layout.SidecarCompat$TranslatingCallback
org.webrtc.MediaConstraints$KeyValuePair
androidx.activity.ComponentActivity$4
org.webrtc.PeerConnectionFactory$InitializationOptions
androidx.media.AudioAttributesImpl
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
androidx.window.layout.WindowInfoTrackerDecorator
org.webrtc.Logging$TraceLevel
org.webrtc.BaseBitrateAdjuster
androidx.fragment.app.Fragment$5
org.webrtc.VideoFrameDrawer$YuvUploader
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper
com.cloudwebrtc.webrtc.R$color
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin
androidx.appcompat.widget.ActionBarOverlayLayout
org.webrtc.VideoEncoderFallback
androidx.window.embedding.ExtensionEmbeddingBackend$Companion
androidx.window.embedding.ActivityFilter
org.webrtc.audio.WebRtcAudioTrackUtils
org.webrtc.EglBase14Impl
org.webrtc.Camera2Enumerator
org.webrtc.VideoFrame$TextureBuffer$Type
androidx.media.AudioAttributesImplBase
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider
io.flutter.view.AccessibilityViewEmbedder
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor
org.webrtc.NetEqFactoryFactory
org.webrtc.VideoEncoder$Settings
org.webrtc.YuvHelper
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6
org.webrtc.NetworkMonitorAutoDetect
com.dexterous.flutterlocalnotifications.models.SoundSource
com.dexterous.flutterlocalnotifications.utils.StringUtils
org.webrtc.CameraVideoCapturer$CameraEventsHandler
org.webrtc.EglBase14Impl$Context
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService
org.webrtc.R
org.webrtc.FileVideoCapturer
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback
com.google.android.gms.common.annotation.KeepName
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread
android.support.v4.media.session.PlaybackStateCompat
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger
org.webrtc.CameraCapturer$5
org.webrtc.HardwareVideoEncoderFactory
androidx.window.layout.SidecarCompat$FirstAttachAdapter
com.cloudwebrtc.webrtc.utils.EglUtils
androidx.window.java.R
io.objectbox.converter.StringLongMapConverter
kotlin.coroutines.jvm.internal.BaseContinuationImpl
org.webrtc.NetworkStatePredictorFactoryFactory
androidx.window.core.ExperimentalWindowApi
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1
com.cloudwebrtc.webrtc.GetUserMediaImpl$1
androidx.core.graphics.drawable.IconCompat
org.webrtc.DataChannel$Observer
org.webrtc.TextureBufferImpl$RefCountMonitor
org.webrtc.RtpReceiver$Observer
org.webrtc.EglBase10Impl$Context
androidx.window.layout.WindowBackend
kotlin.internal.jdk8.JDK8PlatformImplementations
org.webrtc.VideoEncoder$BitrateAllocation
com.cloudwebrtc.webrtc.R$integer
android.support.v4.app.RemoteActionCompatParcelizer
org.webrtc.PeerConnection$IceGatheringState
com.dexterous.flutterlocalnotifications.models.IconSource
org.webrtc.RtpParameters$HeaderExtension
androidx.window.layout.FoldingFeature$OcclusionType
androidx.appcompat.widget.DialogTitle
io.objectbox.exception.DbExceptionListenerJni
androidx.appcompat.widget.FitWindowsLinearLayout
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails
org.webrtc.voiceengine.WebRtcAudioManager
org.webrtc.voiceengine.BuildInfo
androidx.window.layout.HardwareFoldingFeature$Type$Companion
org.webrtc.NV21Buffer
com.google.android.gms.measurement.AppMeasurement
kotlinx.coroutines.internal.StackTraceRecoveryKt
android.support.v4.graphics.drawable.IconCompatParcelizer
org.webrtc.ScreenCapturerAndroid$2
org.webrtc.VideoDecoderFactory
org.webrtc.ThreadUtils$ThreadChecker
com.google.android.gms.measurement.AppMeasurementService
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
org.webrtc.RtpSender
com.cloudwebrtc.webrtc.CameraEventsHandler
androidx.window.core.Version
org.webrtc.PeerConnectionDependencies$1
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper
androidx.window.layout.WindowMetricsCalculatorDecorator
org.webrtc.ThreadUtils$1Result
org.webrtc.SimulcastVideoEncoder
com.cloudwebrtc.webrtc.record.VideoFileRenderer
org.webrtc.Logging
com.google.android.gms.auth.api.signin.GoogleSignInOptions
org.webrtc.audio.WebRtcAudioManager
androidx.window.layout.SidecarCompat$DistinctElementCallback
androidx.window.embedding.EmbeddingBackend
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar
org.webrtc.ScreenCapturerAndroid
org.webrtc.CapturerObserver
org.webrtc.audio.WebRtcAudioEffects
org.webrtc.PeerConnection$TcpCandidatePolicy
androidx.lifecycle.SingleGeneratedAdapterObserver
androidx.window.layout.WindowInfoTracker$Companion
android.support.v4.media.RatingCompat
org.webrtc.BuiltinAudioDecoderFactoryFactory
org.webrtc.EglBase$ConfigBuilder
org.webrtc.MediaCodecWrapperFactory
org.webrtc.AudioTrack
org.webrtc.VideoSink
kotlinx.coroutines.CoroutineExceptionHandler
com.cloudwebrtc.webrtc.GetUserMediaImpl$2
org.webrtc.NetworkMonitor$InstanceHolder
org.webrtc.MediaConstraints
androidx.savedstate.SavedStateRegistry$1
androidx.window.embedding.EmbeddingCompat$Companion
io.objectbox.converter.NullToEmptyStringConverter
io.objectbox.annotation.Entity
com.dexterous.flutterlocalnotifications.models.DateTimeComponents
org.webrtc.StatsObserver
androidx.window.layout.FoldingFeature$State$Companion
com.google.android.gms.common.api.Status
org.webrtc.RendererCommon$RendererEvents
com.cloudwebrtc.webrtc.SurfaceTextureRenderer
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils
org.webrtc.Camera2Session$CameraCaptureCallback
com.cloudwebrtc.webrtc.utils.PermissionUtils$1
org.webrtc.VideoDecoder$Settings
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer
com.cloudwebrtc.webrtc.record.FrameCapturer
org.webrtc.SessionDescription
org.webrtc.NetworkChangeDetector
com.google.firebase.components.ComponentRegistrar
org.webrtc.NativeLibrary
org.webrtc.WrappedNativeVideoEncoder
io.objectbox.converter.StringMapConverter
androidx.window.embedding.SplitPairRule
org.webrtc.NetworkMonitor
org.webrtc.audio.LowLatencyAudioBufferManager
io.objectbox.exception.FileCorruptException
com.google.firebase.FirebaseCommonRegistrar
org.webrtc.RendererCommon
org.webrtc.SurfaceTextureHelper$1
org.webrtc.EglBase
org.webrtc.CameraVideoCapturer$CameraStatistics$1
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation
androidx.activity.ComponentActivity$5
org.webrtc.CryptoOptions$1
org.webrtc.YuvConverter$ShaderCallbacks
org.webrtc.EglRenderer$FrameListener
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper
org.webrtc.FrameEncryptor
org.webrtc.NetworkMonitorAutoDetect$NetworkState
org.webrtc.RtpParameters$Rtcp
com.cloudwebrtc.webrtc.R
androidx.window.layout.FoldingFeature$State
org.webrtc.RefCountDelegate
com.cloudwebrtc.webrtc.R$string
androidx.appcompat.widget.AlertDialogLayout
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate
androidx.window.layout.WindowMetricsCalculator$Companion
org.webrtc.NetworkMonitor$NetworkObserver
org.webrtc.CameraEnumerationAndroid
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
org.webrtc.RendererCommon$GlDrawer
org.webrtc.NV12Buffer
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl
androidx.window.embedding.EmbeddingCompat
org.webrtc.PeerConnection$Observer
org.webrtc.WrappedNativeVideoDecoder
org.webrtc.BuiltinAudioEncoderFactoryFactory
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback
org.webrtc.Logging$Severity
org.webrtc.VideoSource$AspectRatio
org.webrtc.audio.VolumeLogger$LogVolumeTask
org.webrtc.EglRenderer$HandlerWithExceptionCallback
androidx.window.embedding.EmbeddingAdapter
androidx.lifecycle.SavedStateHandleController$1
androidx.window.embedding.SplitController
androidx.media.AudioAttributesImplApi26Parcelizer
org.webrtc.RTCStats
androidx.core.graphics.drawable.IconCompatParcelizer
org.webrtc.NetworkChangeDetector$ConnectionType
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation
org.webrtc.CryptoOptions$Builder
androidx.lifecycle.Lifecycling$1
org.webrtc.Loggable
org.webrtc.VideoEncoder$EncodeInfo
org.webrtc.RendererCommon$VideoLayoutMeasure
com.cloudwebrtc.webrtc.utils.ConstraintsArray
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl
org.webrtc.TimestampAligner
androidx.appcompat.widget.ContentFrameLayout
org.webrtc.LibaomAv1Decoder
androidx.lifecycle.LiveData$LifecycleBoundObserver
org.webrtc.HardwareVideoEncoder$YuvFormat
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper
androidx.media.AudioAttributesCompatParcelizer
org.webrtc.CameraEnumerationAndroid$1
org.webrtc.CameraCapturer$2
org.webrtc.VideoEncoder$EncoderInfo
android.support.v4.media.MediaMetadataCompat
org.webrtc.PeerConnectionFactory
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1
com.google.android.gms.identity.intents.model.UserAddress
com.google.firebase.components.ComponentDiscoveryService
org.webrtc.SdpObserver
org.webrtc.MediaCodecWrapper
org.webrtc.Camera1Session$1
org.webrtc.CalledByNative
org.webrtc.LibvpxVp9Encoder
org.webrtc.Camera1Enumerator
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException
io.objectbox.converter.IntegerFlexMapConverter
androidx.window.layout.WindowInfoTrackerImpl
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver
androidx.appcompat.app.AlertController$RecycleListView
com.cloudwebrtc.webrtc.utils.AnyThreadResult
androidx.window.layout.ExtensionWindowLayoutInfoBackend
androidx.window.embedding.SplitRule$Api30Impl
org.webrtc.VideoEncoder$ResolutionBitrateLimits
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory
androidx.window.embedding.EmbeddingInterfaceCompat
io.objectbox.converter.LongFlexMapConverter
org.webrtc.LibvpxVp9Decoder
androidx.window.layout.WindowMetrics
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService
kotlin.internal.jdk7.JDK7PlatformImplementations
org.webrtc.RTCStatsCollectorCallback
org.webrtc.EglBase10$Context
com.cloudwebrtc.webrtc.StateProvider
org.webrtc.CameraSession$Events
org.webrtc.PeerConnectionDependencies$Builder
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback
com.google.android.gms.common.api.GoogleApiActivity
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor
com.cloudwebrtc.webrtc.PeerConnectionObserver$1
org.webrtc.CameraCapturer
org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
androidx.appcompat.widget.Toolbar
org.webrtc.VideoEncoder$RateControlParameters
com.cloudwebrtc.webrtc.R$layout
org.webrtc.PeerConnection
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples
org.webrtc.VideoDecoder
org.webrtc.audio.WebRtcAudioUtils
org.webrtc.Camera2Session$CaptureSessionCallback
org.webrtc.DefaultVideoEncoderFactory
org.webrtc.AudioProcessingFactory
org.webrtc.EglRenderer$2
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4
com.dexterous.flutterlocalnotifications.models.Time
org.webrtc.Camera1Session$2
io.objectbox.Cursor
org.webrtc.VideoDecoder$Callback
androidx.savedstate.Recreator
androidx.appcompat.widget.FitWindowsFrameLayout
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ARE_NOTIFICATIONS_ENABLED_METHOD
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_fontStyle
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean isFacing
org.webrtc.RtpCapabilities$CodecCapability: int preferredPayloadType
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.Handler renderThreadHandler
com.cloudwebrtc.webrtc.utils.AnyThreadSink: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.AndroidVideoDecoder: java.lang.String MEDIA_FORMAT_KEY_STRIDE
org.webrtc.VideoFrame: long timestampNs
org.webrtc.CryptoOptions$SFrame: org.webrtc.CryptoOptions this$0
org.webrtc.audio.WebRtcAudioEffects: boolean DEBUG
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_DIFF_THRESHOLD
org.webrtc.SurfaceViewRenderer: java.lang.String TAG
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.EglBase eglBase
org.webrtc.Camera2Enumerator: double NANO_SECONDS_PER_SECOND
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType NOHOST
com.cloudwebrtc.webrtc.R$layout: int notification_template_icon_group
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int imageFormat
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BOT
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus TARGET_BITRATE_OVERSHOOT
org.webrtc.VideoSource$1: org.webrtc.VideoSource this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DEFAULT_ICON
org.webrtc.EglBase14Impl: android.opengl.EGLConfig eglConfig
org.webrtc.Priority: int HIGH
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean playSound
com.google.android.gms.internal.measurement.zzfz: com.google.android.gms.internal.measurement.zzfz zza
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_CELLULAR
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: org.webrtc.audio.WebRtcAudioTrack this$0
com.cloudwebrtc.webrtc.utils.PermissionUtils: int requestCode
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_SECURE
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ALLOW_GENERATED_REPLIES
org.webrtc.HardwareVideoEncoder: int sliceHeight
com.google.android.gms.internal.measurement.zzgm: com.google.android.gms.internal.measurement.zzgm zza
org.webrtc.GlTextureFrameBuffer: int width
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_PRANSWER
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type OFFER
com.cloudwebrtc.webrtc.R$styleable: int Capability_queryPatterns
com.cloudwebrtc.webrtc.R$styleable: int ActivityFilter_activityName
org.webrtc.Logging: java.util.logging.Logger fallbackLogger
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] $VALUES
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: android.media.AudioManager audioManager
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] $VALUES
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoderFactory primary
org.webrtc.EglRenderer: java.lang.Object layoutLock
com.google.android.gms.internal.measurement.zzfr: com.google.android.gms.internal.measurement.zzfr zza
org.webrtc.voiceengine.WebRtcAudioRecord: boolean microphoneMute
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$PeerConnection$IceGatheringState
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoEncoderFactory factory
com.cloudwebrtc.webrtc.R$styleable: int SplitPairFilter_secondaryActivityName
org.webrtc.SurfaceTextureHelper: int frameRotation
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_TIMER
org.webrtc.voiceengine.WebRtcAudioManager: boolean useStereoInput
org.webrtc.audio.JavaAudioDeviceModule$Builder: int outputSampleRate
com.cloudwebrtc.webrtc.utils.AnyThreadSink: android.os.Handler handler
org.webrtc.GlGenericDrawer: java.lang.String vertexShader
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_RED
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FILL
org.webrtc.audio.WebRtcAudioManager: int DEFAULT_FRAME_PER_BUFFER
org.webrtc.RtpTransceiver: org.webrtc.RtpSender cachedSender
org.webrtc.NetworkMonitorAutoDetect: java.util.Set availableNetworks
org.webrtc.VideoEncoder$Settings: org.webrtc.VideoEncoder$Capabilities capabilities
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory platformSoftwareVideoDecoderFactory
androidx.window.embedding.ActivityStack: java.util.List activities
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_11
org.webrtc.EglRenderer$FrameListenerAndParams: float scale
org.webrtc.H264Utils: java.lang.String H264_LEVEL_3_1
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType VPN
com.cloudwebrtc.webrtc.R$id: int icon
org.webrtc.Size: int width
kotlinx.coroutines.CancellableContinuationImpl: int _decision
org.webrtc.HardwareVideoEncoderFactory$1: int[] $SwitchMap$org$webrtc$VideoCodecMimeType
com.google.android.gms.measurement.internal.zzaw: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$dimen: int notification_media_narrow_margin
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList splitChangeCallbacks
org.webrtc.VideoCodecInfo: java.util.Map params
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
org.webrtc.RtpParameters$Codec: java.lang.Integer numChannels
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map remoteTracks
kotlin.jvm.internal.CallableReference: java.lang.Class owner
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_LOOPBACK
org.webrtc.PeerConnectionFactory: java.lang.String VIDEO_CAPTURER_THREAD_NAME
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatBody
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzp
org.webrtc.AndroidVideoDecoder: int MEDIA_CODEC_RELEASE_TIMEOUT_MS
org.webrtc.voiceengine.WebRtcAudioEffects: java.util.UUID AOSP_NOISE_SUPPRESSOR
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String icon
org.webrtc.CameraCapturer: android.os.Handler cameraThreadHandler
org.webrtc.voiceengine.WebRtcAudioTrack: org.webrtc.ThreadUtils$ThreadChecker threadChecker
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY
org.webrtc.Predicate$1: org.webrtc.Predicate val$other
com.google.android.gms.common.zzq: android.os.Parcelable$Creator CREATOR
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraStatistics cameraStatistics
org.webrtc.PeerConnectionFactory$InitializationOptions: android.content.Context applicationContext
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_DETAILS
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_3
org.webrtc.voiceengine.WebRtcAudioManager: android.media.AudioManager audioManager
com.cloudwebrtc.webrtc.DataChannelObserver: org.webrtc.DataChannel dataChannel
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String value
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecMimeType codecType
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraSwitchHandler switchEventsHandler
org.webrtc.TextureBufferImpl: int height
org.webrtc.audio.WebRtcAudioRecord: boolean isAcousticEchoCancelerSupported
org.webrtc.audio.JavaAudioDeviceModule: int inputSampleRate
org.webrtc.EglBase$ConfigBuilder: int openGlesVersion
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
com.google.android.gms.internal.measurement.zzgt: com.google.android.gms.internal.measurement.zzgt zza
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State LIVE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_VIBRATION
org.webrtc.audio.VolumeLogger$LogVolumeTask: int maxVoiceCallVolume
org.webrtc.VideoFileRenderer: android.os.HandlerThread fileThread
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Number
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SHOW_BADGE
com.cloudwebrtc.webrtc.R$attr: int finishSecondaryWithPrimary
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE
org.webrtc.PeerConnectionFactory$InitializationOptions: java.lang.String nativeLibraryName
org.webrtc.CameraCapturer: android.os.Handler uiThreadHandler
org.webrtc.MediaConstraints: java.util.List mandatory
com.cloudwebrtc.webrtc.R$id: int notification_main_column
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String title
org.webrtc.CameraCapturer: java.lang.String TAG
org.webrtc.DataChannel$Init: boolean ordered
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer importance
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: org.webrtc.audio.WebRtcAudioRecord this$0
org.webrtc.audio.VolumeLogger: java.util.Timer timer
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String id
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzi
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnectionFactory mFactory
org.webrtc.audio.LowLatencyAudioBufferManager: int prevUnderrunCount
org.webrtc.EglRenderer: java.lang.String name
com.google.android.gms.wallet.LoyaltyWalletObject: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String summaryText
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: android.os.Bundle mTimedOutEventParams
com.cloudwebrtc.webrtc.R$id: int title
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean playSound
com.cloudwebrtc.webrtc.GetUserMediaImpl$3$1: com.cloudwebrtc.webrtc.GetUserMediaImpl$3 this$1
com.google.android.gms.internal.measurement.zzgd: boolean zzab
org.webrtc.HardwareVideoEncoder: org.webrtc.HardwareVideoEncoder$YuvFormat yuvFormat
org.webrtc.NetworkMonitorAutoDetect: boolean includeWifiDirect
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase rootEglBase
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzh
org.webrtc.EncodedImage: java.nio.ByteBuffer buffer
androidx.window.core.Bounds: int right
com.cloudwebrtc.webrtc.R$id: int normal
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask: org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger this$0
org.webrtc.GlGenericDrawer: org.webrtc.GlShader currentShader
org.webrtc.HardwareVideoEncoder: java.lang.Integer surfaceColorFormat
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
org.webrtc.audio.WebRtcAudioTrack: long AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS
org.webrtc.CameraCapturer: int height
com.cloudwebrtc.webrtc.R$attr: int splitMinSmallestWidth
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_PRANSWER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PERSON
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: int requestCode
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzk
org.webrtc.Camera2Session: org.webrtc.Camera2Session$SessionState state
androidx.window.R$styleable: int SplitPairRule_splitMinWidth
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_MEMORY
org.webrtc.MediaSource: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.EglRenderer: java.lang.Object statisticsLock
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.VideoDecoderFactory videoDecoderFactory
org.webrtc.ScreenCapturerAndroid: int VIRTUAL_DISPLAY_DPI
com.cloudwebrtc.webrtc.R$id: int tag_screen_reader_focusable
org.webrtc.SurfaceTextureHelper: int textureHeight
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.EglBase$Context sharedContext
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map localStreams
androidx.window.core.Version: int patch
org.webrtc.NetworkMonitor: java.lang.Object networkChangeDetectorLock
org.webrtc.EncodedImage: int encodedWidth
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_GREEN
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int audioTrackIndex
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfMonthAndTime
org.webrtc.AndroidVideoDecoder: org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory
org.webrtc.GlShader: java.lang.String TAG
androidx.window.layout.WindowInfoTracker$Companion: boolean DEBUG
org.webrtc.EglRenderer: int framesRendered
org.webrtc.MediaConstraints: java.util.List optional
org.webrtc.voiceengine.WebRtcAudioRecord: long AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Srtp srtp
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatTitle
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List sendEncodings
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface sidecar
com.google.android.gms.internal.measurement.zzgy: int zzd
org.webrtc.Priority: int LOW
org.webrtc.PeerConnection$RTCConfiguration: java.lang.String turnLoggingId
org.webrtc.MediaStreamTrack: long nativeTrack
com.cloudwebrtc.webrtc.R$dimen: int notification_small_icon_size_as_large
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_BLUE
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: boolean isRunning
com.cloudwebrtc.webrtc.R$id: int italic
com.google.android.gms.internal.measurement.zzgd: long zzx
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityName
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: java.lang.String fieldTrials
org.webrtc.CryptoOptions$Builder: boolean enableAes128Sha1_32CryptoCipher
org.webrtc.audio.WebRtcAudioManager: java.lang.String TAG
org.webrtc.audio.VolumeLogger: java.lang.String THREAD_NAME
com.google.android.gms.internal.measurement.zzet: com.google.android.gms.internal.measurement.zzem zzg
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_fontVariationSettings
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String KEY
org.webrtc.EglBase14Impl: android.opengl.EGLDisplay eglDisplay
org.webrtc.voiceengine.WebRtcAudioUtils: boolean useWebRtcBasedNoiseSuppressor
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus NO_OUTPUT
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver cachedReceiver
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
org.webrtc.NV21Buffer: byte[] data
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer callback
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
org.webrtc.CryptoOptions$Builder: boolean enableGcmCryptoSuites
com.google.android.gms.internal.measurement.zzgm: double zzj
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat embeddingExtension
org.webrtc.CameraCapturer$5: org.webrtc.CameraCapturer this$0
org.webrtc.CameraEnumerationAndroid: java.util.ArrayList COMMON_RESOLUTIONS
org.webrtc.WrappedNativeI420Buffer: int height
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy KEEP_FIRST_READY
org.webrtc.VideoEncoder$ScalingSettings: org.webrtc.VideoEncoder$ScalingSettings OFF
androidx.window.embedding.MatcherUtils: boolean sDebugMatchers
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: boolean enableInternalTracer
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer audioAttributesUsage
org.webrtc.HardwareVideoEncoder: org.webrtc.MediaCodecWrapper codec
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLAY_SOUND
org.webrtc.H264Utils: org.webrtc.VideoCodecInfo DEFAULT_H264_HIGH_PROFILE_CODEC
org.webrtc.ScreenCapturerAndroid: long numCapturedFrames
org.webrtc.VideoSource: org.webrtc.CapturerObserver capturerObserver
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: org.webrtc.NetworkChangeDetector$Observer observer
org.webrtc.PeerConnection$RTCConfiguration: boolean enableImplicitRollback
org.webrtc.voiceengine.WebRtcAudioTrack: int DEFAULT_USAGE
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread audioThread
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource bigPictureBitmapSource
com.google.android.gms.internal.measurement.zzfx: java.lang.String zze
io.objectbox.exception.DbException: int errorCode
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
org.webrtc.EglBase: int[] CONFIG_RGBA
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_CALLBACK_HANDLE_METHOD
org.webrtc.SurfaceViewRenderer: int rotatedFrameWidth
com.cloudwebrtc.webrtc.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
org.webrtc.MediaStream: java.util.List preservedVideoTracks
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.Map mMap
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.concurrent.locks.ReentrantLock lock
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int maxBitrateBps
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] $VALUES
org.webrtc.CryptoOptions$Srtp: boolean enableAes128Sha1_32CryptoCipher
com.google.android.gms.wallet.wobs.LoyaltyPointsBalance: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_13
com.cloudwebrtc.webrtc.R$styleable: int ColorStateListItem_android_alpha
org.webrtc.RtcCertificatePem: java.lang.String certificate
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnectionFactory$Options: int networkIgnoreMask
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] $VALUES
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$ContinualGatheringPolicy continualGatheringPolicy
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useLowLatency
org.webrtc.voiceengine.WebRtcAudioRecord: android.media.AudioRecord audioRecord
org.webrtc.voiceengine.WebRtcAudioRecord: int BITS_PER_SAMPLE
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: java.lang.String TAG
com.google.android.gms.internal.measurement.zzgr: java.lang.String zze
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_HIGH_DIFF_WEIGHT
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] $VALUES
org.webrtc.audio.JavaAudioDeviceModule: java.lang.Object nativeLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String shortcutId
org.webrtc.ScreenCapturerAndroid$1: org.webrtc.ScreenCapturerAndroid this$0
org.webrtc.ThreadUtils$1Result: java.lang.Object value
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink listener
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.media.AudioManager$OnAudioFocusChangeListener audioFocusChangeListener
org.webrtc.HardwareVideoEncoder: int stride
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Null
com.google.android.gms.internal.measurement.zzgy: java.lang.String zzg
org.webrtc.voiceengine.WebRtcAudioEffects: android.media.audiofx.NoiseSuppressor ns
com.cloudwebrtc.webrtc.R$id: int time
com.cloudwebrtc.webrtc.R$attr: int fontProviderFetchStrategy
org.webrtc.Camera2Enumerator: android.content.Context context
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_15
com.google.android.gms.internal.measurement.zzfx: java.lang.String zzf
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CLOSED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PRIORITY
org.webrtc.NetworkMonitor: java.util.ArrayList networkObservers
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioDecoderFactoryFactory audioDecoderFactoryFactory
org.webrtc.H264Utils: java.lang.String H264_PROFILE_CONSTRAINED_BASELINE
org.webrtc.SurfaceTextureHelper$3: org.webrtc.SurfaceTextureHelper this$0
org.webrtc.VideoEncoderFallback: org.webrtc.VideoEncoder primary
com.cloudwebrtc.webrtc.record.FrameCapturer: boolean gotFrame
org.webrtc.PeerConnection$IceServer$Builder: java.util.List urls
androidx.window.layout.SidecarCompat$TranslatingCallback: androidx.window.layout.SidecarCompat this$0
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback audioTrackErrorCallback
org.webrtc.audio.WebRtcAudioEffects: java.lang.String TAG
org.webrtc.voiceengine.WebRtcAudioRecord: java.nio.ByteBuffer byteBuffer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ACTION_ID
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] $VALUES
com.cloudwebrtc.webrtc.R$layout: int custom_dialog
org.webrtc.SurfaceTextureHelper: org.webrtc.EglBase eglBase
com.cloudwebrtc.webrtc.R$drawable: int notification_action_background
android.support.v4.media.MediaDescriptionCompat: android.os.Parcelable$Creator CREATOR
org.webrtc.EglRenderer: org.webrtc.EglRenderer$ErrorCallback errorCallback
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType underlyingTypeForVpn
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback callback
org.webrtc.FileVideoCapturer$VideoReaderY4M: int frameHeight
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_type
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int max
org.webrtc.CameraVideoCapturer$CameraStatistics$1: org.webrtc.CameraVideoCapturer$CameraStatistics this$0
org.webrtc.IceCandidateErrorEvent: java.lang.String url
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState NEW
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzkm zzm
org.webrtc.audio.WebRtcAudioTrack: int BUFFERS_PER_SECOND
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoDecoder$Callback callback
org.webrtc.VideoFrame: int rotation
org.webrtc.EglRenderer: long LOG_INTERVAL_SEC
org.webrtc.CameraEnumerationAndroid$CaptureFormat: org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange framerate
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: androidx.window.layout.SidecarWindowBackend this$0
org.webrtc.PeerConnectionFactory: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ContentUri
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference MAINTAIN_FRAMERATE
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int IFRAME_INTERVAL
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer numChannels
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation HORIZONTAL
org.webrtc.voiceengine.WebRtcAudioRecord: boolean DEBUG
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $VALUES
org.webrtc.GlRectDrawer: java.lang.String FRAGMENT_SHADER
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useStereoOutput
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND_SOURCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_LIGHTS
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction Update
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.content.Context context
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
org.webrtc.HardwareVideoEncoder: android.view.Surface textureInputSurface
android.support.v4.media.session.ParcelableVolumeInfo: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ActivityRule: boolean alwaysExpand
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State MUTED
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_splitRatio
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DISPATCHER_HANDLE
org.webrtc.RtpSender: long nativeRtpSender
com.google.android.gms.internal.measurement.zzft: int zzi
com.cloudwebrtc.webrtc.R$dimen: int notification_subtext_size
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] $VALUES
com.google.android.gms.identity.intents.model.UserAddress: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$id: int text2
org.webrtc.Camera1Session: int NUMBER_OF_CAPTURE_BUFFERS
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker
org.webrtc.MediaStreamTrack: java.lang.String AUDIO_TRACK_KIND
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzkm zzj
io.objectbox.converter.StringMapConverter: java.util.concurrent.atomic.AtomicReference cachedBuilder
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long millisecondsSinceEpoch
com.cloudwebrtc.webrtc.R$attr: int shortcutMatchRequired
com.cloudwebrtc.webrtc.R$dimen: int notification_right_icon_size
org.webrtc.CameraCapturer: org.webrtc.CapturerObserver capturerObserver
org.webrtc.EncodedImage: int encodedHeight
org.webrtc.VideoFrameDrawer: int renderHeight
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
org.webrtc.audio.WebRtcAudioTrack: int AUDIO_TRACK_STOP
org.webrtc.NetworkMonitor$InstanceHolder: org.webrtc.NetworkMonitor instance
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLConfig eglConfig
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int trackIndex
org.webrtc.WrappedNativeI420Buffer: int width
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] $VALUES
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_RESPONSE_TYPE
com.cloudwebrtc.webrtc.R$styleable: int[] SplitPlaceholderRule
org.webrtc.EglBase$ConfigBuilder: boolean supportsPixelBuffer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ID
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VIBRATION_PATTERN
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaCodec mediaCodec
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.lang.String MIME_TYPE
org.webrtc.EglBase: int EGL_OPENGL_ES2_BIT
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.ConnectivityManager connectivityManager
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_APP_LAUNCH_DETAILS_METHOD
org.webrtc.VideoFrameBufferType: int NV12
org.webrtc.Camera1Session: int cameraId
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_ICON_ERROR_CODE
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_7
org.webrtc.audio.WebRtcAudioEffects: java.util.UUID AOSP_NOISE_SUPPRESSOR
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback audioRecordErrorCallback
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledFuture future
org.webrtc.HardwareVideoEncoder: int VIDEO_AVC_PROFILE_HIGH
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioEncoderFactoryFactory audioEncoderFactoryFactory
org.webrtc.ScreenCapturerAndroid: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.CryptoOptions$Builder: boolean enableEncryptedRtpHeaderExtensions
com.google.android.gms.internal.measurement.zzgg: com.google.android.gms.internal.measurement.zzkm zzf
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$IceTransportsType iceTransportsType
org.webrtc.audio.JavaAudioDeviceModule$Builder: int inputSampleRate
androidx.window.R$styleable: int SplitPlaceholderRule_splitRatio
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int width
androidx.window.layout.ExtensionWindowLayoutInfoBackend: androidx.window.extensions.layout.WindowLayoutComponent component
com.cloudwebrtc.webrtc.R$attr: int secondaryActivityAction
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_KEY
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor outputSamplesInterceptor
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] $VALUES
org.webrtc.voiceengine.WebRtcAudioManager: boolean hardwareAEC
com.cloudwebrtc.webrtc.R$drawable: int notification_tile_bg
org.webrtc.audio.WebRtcAudioRecord$1: java.util.concurrent.atomic.AtomicInteger val$nextThreadId
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_ttcIndex
kotlinx.coroutines.CompletedExceptionally: int _handled
com.google.android.gms.internal.measurement.zzek: com.google.android.gms.internal.measurement.zzek zza
com.google.android.gms.internal.measurement.zzer: com.google.android.gms.internal.measurement.zzer zza
org.webrtc.CameraCapturer: java.lang.Runnable openCameraTimeoutRunnable
androidx.window.R$styleable: int SplitPairRule_splitRatio
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String VIBRATION_PATTERN
org.webrtc.Camera2Session: boolean isCameraFrontFacing
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode: org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode[] $VALUES
com.cloudwebrtc.webrtc.R$attr: int fontProviderQuery
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.Boolean groupConversation
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: android.media.AudioTrack originalTrack
org.webrtc.EglRenderer: int framesDropped
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: io.flutter.plugin.common.MethodChannel$Result val$result
androidx.window.core.Bounds: int top
org.webrtc.RtpParameters$HeaderExtension: int id
org.webrtc.YuvConverter: org.webrtc.ThreadUtils$ThreadChecker threadChecker
com.cloudwebrtc.webrtc.R$styleable: int[] GradientColorItem
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map mVideoCapturers
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String id
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String description
org.webrtc.RtpParameters$Encoding: double bitratePriority
org.webrtc.RtpSender: org.webrtc.DtmfSender dtmfSender
org.webrtc.CandidatePairChangeEvent: int lastDataReceivedMs
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean allowGeneratedReplies
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String SECOND
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode: org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode AUDIO_TRACK_START_EXCEPTION
org.webrtc.SurfaceTextureHelper: android.os.Handler handler
androidx.window.embedding.SplitPairFilter: android.content.ComponentName secondaryActivityName
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckIntervalStrongConnectivityMs
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int sampleRate
org.webrtc.SurfaceTextureHelper: int textureWidth
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind BLUETOOTH
com.google.android.gms.internal.measurement.zzgm: long zzh
com.cloudwebrtc.webrtc.DataChannelObserver$1: int[] $SwitchMap$org$webrtc$DataChannel$State
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean contextual
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_centerY
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.util.ArrayList messages
androidx.window.R$id: int rtl
org.webrtc.CameraCapturer$6: org.webrtc.CameraCapturer this$0
org.webrtc.VideoEncoder$ScalingSettings: java.lang.Integer high
org.webrtc.AndroidVideoDecoder: java.lang.String MEDIA_FORMAT_KEY_CROP_TOP
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_startColor
org.webrtc.voiceengine.WebRtcAudioManager: boolean blacklistDeviceForOpenSLESUsage
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] $VALUES
org.webrtc.Camera1Capturer: boolean captureToTexture
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
org.webrtc.RTCStats: java.util.Map members
com.cloudwebrtc.webrtc.R$styleable: int[] ColorStateListItem
com.google.android.gms.internal.auth.zzbw: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoFileRenderer$1: org.webrtc.EglBase$Context val$sharedContext
org.webrtc.voiceengine.WebRtcAudioUtils: boolean useWebRtcBasedAcousticEchoCanceler
org.webrtc.VideoProcessor$FrameAdaptationParameters: int scaleWidth
org.webrtc.voiceengine.WebRtcAudioManager: boolean lowLatencyOutput
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String typeFieldName
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.H264Utils: java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
com.cloudwebrtc.webrtc.R$id: int accessibility_action_clickable_span
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_28
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] $VALUES
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl$RefCountMonitor refCountMonitor
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_VPN
org.webrtc.HardwareVideoEncoder$BusyCount: java.lang.Object countLock
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String previousCompletedSplashIsolate
com.cloudwebrtc.webrtc.R$id: int rtl
androidx.window.R$styleable: int[] SplitPairRule
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_17
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface extensionCallback
com.cloudwebrtc.webrtc.R$styleable: int[] FontFamily
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzkm zzg
androidx.window.R$attr: int splitMinSmallestWidth
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mCreationTimestamp
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MILLISECONDS_SINCE_EPOCH
com.cloudwebrtc.webrtc.R$styleable: int[] GradientColor
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetworkStatePredictorFactoryFactory networkStatePredictorFactoryFactory
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] $VALUES
com.cloudwebrtc.webrtc.R$layout: int notification_template_part_time
org.webrtc.GlGenericDrawer: int texMatrixLocation
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState COMPLETE
com.cloudwebrtc.webrtc.R$dimen: int compat_control_corner_material
org.webrtc.VideoEncoder$Settings: int width
org.webrtc.audio.JavaAudioDeviceModule: android.content.Context context
org.webrtc.CameraCapturer: boolean sessionOpening
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy ALL
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.app.Activity activity
com.cloudwebrtc.webrtc.GetUserMediaImpl: int minAPILevel
androidx.window.core.Version: androidx.window.core.Version CURRENT
com.cloudwebrtc.webrtc.R$attr: int fontStyle
com.dexterous.flutterlocalnotifications.models.MessageDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails person
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzA
org.webrtc.IceCandidate: java.lang.String serverUrl
org.webrtc.SurfaceEglRenderer: boolean isRenderingPaused
org.webrtc.Logging$1: int[] $SwitchMap$org$webrtc$Logging$Severity
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropX
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_ETHERNET
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_STATEINFO
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_TEXT
com.google.android.gms.internal.measurement.zzfr: long zzf
com.google.android.gms.internal.measurement.zzft: long zzg
org.webrtc.voiceengine.WebRtcAudioEffects: boolean shouldEnableAec
io.flutter.plugin.platform.SingleViewPresentation: int viewId
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioManager audioManager
org.webrtc.CameraCapturer: java.lang.Object stateLock
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzff zza
org.webrtc.JavaI420Buffer: int width
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecMimeType codecType
org.webrtc.SessionDescription: org.webrtc.SessionDescription$Type type
com.google.android.gms.internal.measurement.zzgm: int zzd
com.google.android.gms.internal.measurement.zzet: boolean zzj
com.cloudwebrtc.webrtc.R$attr: int ttcIndex
org.webrtc.voiceengine.WebRtcAudioRecord: long nativeAudioRecord
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String id
org.webrtc.EglRenderer: long minRenderPeriodNs
com.google.android.gms.internal.measurement.zzfb: int zzd
org.webrtc.RtpCapabilities: java.util.List headerExtensions
org.webrtc.voiceengine.WebRtcAudioTrack: byte[] emptyBytes
com.cloudwebrtc.webrtc.R$styleable: int[] SplitPairRule
androidx.window.layout.SidecarCompat: java.lang.String TAG
org.webrtc.audio.WebRtcAudioUtils: java.lang.String TAG
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy MAXCOMPAT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMESTAMP
org.webrtc.SurfaceTextureHelper$1: org.webrtc.YuvConverter val$yuvConverter
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.lang.String TAG
org.webrtc.VideoFrameDrawer: float[] dstPoints
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_STREAM
org.webrtc.Size: int height
org.webrtc.audio.JavaAudioDeviceModule$Builder: java.util.concurrent.ScheduledExecutorService scheduler
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzkm zzae
org.webrtc.SurfaceEglRenderer: java.lang.Object layoutLock
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERIODICALLY_SHOW_METHOD
org.webrtc.VideoFrameDrawer: android.graphics.Point renderSize
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] $VALUES
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: com.dexterous.flutterlocalnotifications.models.PersonDetails person
org.webrtc.PeerConnection$RTCConfiguration: boolean pruneTurnPorts
com.cloudwebrtc.webrtc.R$dimen: int notification_main_column_padding_top
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_TERSEINFO
org.webrtc.VideoFrameDrawer: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_DATE_TIME
org.webrtc.CameraCapturer$8: org.webrtc.CameraCapturer this$0
com.google.android.gms.internal.measurement.zzfz: java.lang.String zzf
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType EmptyFrame
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ID
androidx.window.R$styleable: int SplitPlaceholderRule_placeholderActivityName
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzgd zzd
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer progress
org.webrtc.PeerConnectionFactory: java.lang.String TRIAL_ENABLED
com.google.android.gms.internal.measurement.zzek: boolean zzk
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String START_FOREGROUND_SERVICE
com.google.android.gms.internal.measurement.zzff: java.lang.String zzk
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State HALF_OPENED
com.cloudwebrtc.webrtc.R$integer: int status_bar_notification_info_maxnum
org.webrtc.RtpParameters$Codec: java.lang.Integer clockRate
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String CHANNEL_ACTION
com.google.android.gms.internal.measurement.zzey: com.google.android.gms.internal.measurement.zzkm zzh
androidx.appcompat.widget.SearchView$SavedState: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$id: int tag_unhandled_key_event_manager
org.webrtc.CameraCapturer$3: org.webrtc.CameraCapturer this$0
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_LOW_DIFF_WEIGHT
org.webrtc.VideoFrameBufferType: int I420
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_android_fontWeight
org.webrtc.audio.JavaAudioDeviceModule: boolean useStereoInput
com.cloudwebrtc.webrtc.R$styleable: int SplitPlaceholderRule_splitRatio
org.webrtc.MediaStream: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.StyleInformation styleInformation
com.google.android.gms.internal.measurement.zzfp: com.google.android.gms.internal.measurement.zzgi zzg
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String text
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzaa
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.PeerConnection$RTCConfiguration: int iceBackupCandidatePairPingInterval
org.webrtc.RtpParameters: org.webrtc.RtpParameters$Rtcp rtcp
org.webrtc.ScreenCapturerAndroid: boolean isDisposed
org.webrtc.StatsReport: double timestamp
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.Time repeatTime
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isPortrait
org.webrtc.RtpParameters: java.lang.String transactionId
org.webrtc.GlTextureFrameBuffer: int pixelFormat
com.google.android.gms.internal.measurement.zzfn: int zzd
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int audioFormat
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface callback
org.webrtc.VideoSource: boolean isCapturerRunning
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock globalLock
com.google.android.gms.internal.measurement.zzey: int zze
org.webrtc.voiceengine.WebRtcAudioEffects: java.lang.String TAG
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Weekly
org.webrtc.EncodedImage$FrameType: int nativeIndex
org.webrtc.NetworkChangeDetector$IPAddress: byte[] address
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_18
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_BALANCED
com.cloudwebrtc.webrtc.R$attr: int fontProviderCerts
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String DESCRIPTION
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer id
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: byte[] data
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: int id
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend
org.webrtc.VideoEncoder$EncoderInfo: int requestedResolutionAlignment
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean $assertionsDisabled
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState FAILED
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfWeekAndTime
org.webrtc.RtpReceiver: org.webrtc.MediaStreamTrack cachedTrack
org.webrtc.SurfaceTextureHelper$2: org.webrtc.SurfaceTextureHelper this$0
org.webrtc.audio.WebRtcAudioTrack: android.content.Context context
com.google.android.gms.wallet.IsReadyToPayRequest: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_21
org.webrtc.RendererCommon$VideoLayoutMeasure: float visibleFractionMatchOrientation
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzO
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type OES
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_ALL
org.webrtc.SurfaceEglRenderer: int frameRotation
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_VPN
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_NAME
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_DEFAULT
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.ExtensionsWindowLayoutInfoAdapter INSTANCE
org.webrtc.VideoEncoder$Settings: int maxFramerate
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_tileMode
org.webrtc.HardwareVideoEncoder: java.lang.String KEY_BITRATE_MODE
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType FULL
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String RESULT_RECEIVER
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_ERROR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean usesChronometer
com.google.android.gms.internal.measurement.zzek: com.google.android.gms.internal.measurement.zzkm zzg
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $VALUES
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_INFO
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection$RTCConfiguration configuration
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.Predicate defaultAllowedPredicate
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnection$Observer observer
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Integer titleColor
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
com.google.android.gms.wallet.PaymentData: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CLOSED
org.webrtc.HardwareVideoEncoder: org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] encoderOutputBuffers
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate wifiManagerDelegate
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int min
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ICON_SOURCE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String REQUEST_PERMISSION_METHOD
com.google.android.gms.internal.measurement.zzgd: long zzl
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DRAWABLE
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] $VALUES
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind EARPIECE
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector networkChangeDetector
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
org.webrtc.VideoFrameDrawer: android.graphics.Matrix renderMatrix
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: android.content.Context context
org.webrtc.HardwareVideoEncoder: int MEDIA_CODEC_RELEASE_TIMEOUT_MS
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_OFFER
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
androidx.window.layout.WindowMetricsCalculator$Companion: kotlin.jvm.functions.Function1 decorator
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.IceCandidateErrorEvent: int errorCode
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableVibration
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
com.google.android.gms.internal.measurement.zzkf: com.google.android.gms.internal.measurement.zzmp zzc
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_PACKETIZATION_MODE
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection$RTCConfiguration: boolean activeResetSrtpParams
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ticker
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzP
org.webrtc.JavaI420Buffer: int strideU
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0
androidx.window.R$attr: int secondaryActivityAction
org.webrtc.EglRenderer$EglSurfaceCreation: java.lang.Object surface
org.webrtc.PeerConnection$IceServer: java.lang.String hostname
org.webrtc.YuvConverter: java.lang.String TAG
androidx.window.layout.ActivityCompatHelperApi30: androidx.window.layout.ActivityCompatHelperApi30 INSTANCE
org.webrtc.audio.WebRtcAudioRecord: boolean isNoiseSuppressorSupported
org.webrtc.AndroidVideoDecoder: int width
androidx.window.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
org.webrtc.voiceengine.WebRtcAudioManager: int sampleRate
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
org.webrtc.CameraVideoCapturer$CameraStatistics: int freezePeriodCount
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
org.webrtc.voiceengine.WebRtcAudioManager: boolean useStereoOutput
org.webrtc.HardwareVideoEncoder$YuvFormat: org.webrtc.HardwareVideoEncoder$YuvFormat NV12
org.webrtc.HardwareVideoEncoder: java.lang.Exception shutdownException
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.util.SparseArray mediaRecorders
org.webrtc.NativeCapturerObserver: org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState NEW
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: java.util.concurrent.ExecutorService cachedThreadPool
org.webrtc.EglRenderer: boolean mirrorVertically
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType ETHERNET
com.google.android.gms.internal.measurement.zzgd: int zzJ
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.plugin.common.EventChannel eventChannel
com.cloudwebrtc.webrtc.R$id: int chronometer
com.google.android.gms.auth.api.signin.internal.GoogleSignInOptionsExtensionParcelable: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NUMBER
org.webrtc.HardwareVideoEncoder: int MAX_VIDEO_FRAMERATE
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: androidx.lifecycle.Lifecycle lifecycle
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: java.lang.Object layoutLock
androidx.window.R$attr: int placeholderActivityName
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
org.webrtc.StatsReport$Value: java.lang.String name
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
org.webrtc.NV12Buffer: int width
org.webrtc.NV21Buffer: int width
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType VideoFrameKey
org.webrtc.HardwareVideoEncoderFactory: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LARGE_ICON_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOnMs
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String PERMISSIONS
android.support.v4.media.RatingCompat: android.os.Parcelable$Creator CREATOR
org.webrtc.Camera1Session: android.hardware.Camera camera
org.webrtc.PeerConnection$RTCConfiguration: int iceCandidatePoolSize
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: long presentationTimestampUs
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERMISSION_REQUEST_IN_PROGRESS_ERROR_MESSAGE
org.webrtc.EncodedImage: int rotation
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
org.webrtc.voiceengine.WebRtcAudioManager: boolean initialized
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULE_METHOD
org.webrtc.TextureBufferImpl: android.os.Handler toI420Handler
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel OUTPUT
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType NONE
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$Observer observer
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.util.List actionInputs
org.webrtc.voiceengine.WebRtcAudioEffects: java.util.UUID AOSP_ACOUSTIC_ECHO_CANCELER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIME_ZONE_NAME
org.webrtc.voiceengine.WebRtcAudioUtils: int DEFAULT_SAMPLE_RATE_HZ
com.cloudwebrtc.webrtc.R$attr: int fontProviderSystemFontFamily
androidx.window.R$styleable: int[] ActivityRule
org.webrtc.DynamicBitrateAdjuster: double BITS_PER_BYTE
org.webrtc.EglBase14Impl: android.opengl.EGLContext eglContext
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_RED
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType ALL
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_WIDTH
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback samplesReadyCallback
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType H264
com.google.android.gms.internal.measurement.zzfj: java.lang.String zzf
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledExecutorService executor
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.audio.AudioDeviceModule audioDeviceModule
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableLights
org.webrtc.GlGenericDrawer: java.lang.String genericFragmentSource
androidx.window.embedding.SplitRule: int layoutDirection
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String FULL_SCREEN_INTENT
org.webrtc.GlGenericDrawer: org.webrtc.GlGenericDrawer$ShaderCallbacks shaderCallbacks
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ALLOW_WHILE_IDLE
org.webrtc.ScreenCapturerAndroid: org.webrtc.CapturerObserver capturerObserver
com.dexterous.flutterlocalnotifications.models.NotificationAction: com.dexterous.flutterlocalnotifications.models.IconSource iconSource
org.webrtc.Camera1Enumerator: boolean captureToTexture
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_22
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String TAG
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS
org.webrtc.voiceengine.WebRtcAudioRecord: int CALLBACK_BUFFER_SIZE_MS
org.webrtc.NV12Buffer: int stride
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: int channelCount
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int outputFileWidth
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
androidx.fragment.app.FragmentManager$LaunchedFragmentInfo: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INPUT_RESULT
org.webrtc.VideoFrameDrawer: int renderWidth
org.webrtc.YuvConverter$ShaderCallbacks: float[] yCoeffs
org.webrtc.RtpParameters$Encoding: java.lang.String rid
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$PeerConnection$IceConnectionState
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_RAW_RESOURCE_ERROR_MESSAGE
org.webrtc.voiceengine.WebRtcAudioTrack: int BUFFERS_PER_SECOND
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource Uri
org.webrtc.SurfaceTextureHelper: java.lang.String TAG
com.google.android.gms.wallet.zza: android.os.Parcelable$Creator CREATOR
org.webrtc.voiceengine.WebRtcAudioManager: long nativeAudioManager
com.google.android.gms.internal.measurement.zzgd: long zzM
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERROR
com.cloudwebrtc.webrtc.DataChannelObserver: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.GlGenericDrawer: java.nio.FloatBuffer FULL_RECTANGLE_BUFFER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ACTION
org.webrtc.Metrics$HistogramInfo: int min
org.webrtc.voiceengine.WebRtcAudioManager: boolean hardwareNS
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy LOW_COST
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState DISCONNECTED
org.webrtc.VideoFrame$TextureBuffer$Type: int glTarget
org.webrtc.VideoDecoder$Settings: int numberOfCores
com.google.android.gms.internal.measurement.zzey: int zzd
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CALLED_AT
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource DrawableResource
androidx.window.layout.SidecarWindowBackend: java.lang.String TAG
org.webrtc.VideoFileRenderer: int outputFileWidth
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: androidx.window.layout.SidecarCompat this$0
androidx.window.R$id: int ltr
org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer buffer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.NotificationStyle style
androidx.window.core.Bounds: int left
org.webrtc.CameraCapturer$4: org.webrtc.CameraCapturer this$0
org.webrtc.HardwareVideoEncoder: boolean useSurfaceMode
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.NoiseSuppressor ns
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzq
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread audioThread
org.webrtc.PeerConnectionFactory: java.lang.String VIDEO_FRAME_EMIT_TRIAL
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] $VALUES
org.webrtc.VideoEncoder$ScalingSettings: boolean on
org.webrtc.EglRenderer: float layoutAspectRatio
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String name
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.concurrent.Executor executor
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList windowLayoutChangeCallbacks
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mTimeToLive
kotlinx.coroutines.channels.ArrayChannel: int size
org.webrtc.audio.WebRtcAudioRecord: int CHECK_REC_STATUS_DELAY_MS
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType LOOPBACK
com.cloudwebrtc.webrtc.R$style: int TextAppearance_Compat_Notification_Line2
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection$Callback mediaProjectionCallback
androidx.window.embedding.ActivityStack: boolean isEmpty
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_endY
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_2G
org.webrtc.CameraCapturer: org.webrtc.CameraSession$CreateSessionCallback createSessionCallback
io.flutter.embedding.engine.FlutterOverlaySurface: int id
androidx.window.R$styleable: int SplitPairRule_splitLayoutDirection
com.cloudwebrtc.webrtc.DataChannelObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.audio.WebRtcAudioRecord: android.content.Context context
com.google.android.gms.internal.measurement.zzfb: boolean zzg
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_GREEN
androidx.window.R$styleable: int SplitPairRule_splitMinSmallestWidth
com.cloudwebrtc.webrtc.R$attr: int primaryActivityName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_SHOW_BADGE
com.google.android.gms.internal.measurement.zzgd: long zzk
org.webrtc.HardwareVideoEncoder: org.webrtc.EglBase14 textureEglBase
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.media.AudioManager audioManager
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzR
com.cloudwebrtc.webrtc.R$attr: int fontProviderFetchTimeout
org.webrtc.voiceengine.WebRtcAudioManager: int inputBufferSize
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_CONTINUALLY
com.google.android.gms.auth.TokenData: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$dimen: int compat_button_inset_horizontal_material
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_BLUE
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FIT
org.webrtc.Camera2Session: org.webrtc.Histogram camera2StartTimeMsHistogram
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String IMPORTANCE
androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag
org.webrtc.JavaI420Buffer: int strideV
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
org.webrtc.PeerConnectionFactory: long nativeFactory
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] $VALUES
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: boolean keepAlive
androidx.window.layout.WindowLayoutInfo: java.util.List displayFeatures
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.GlRectDrawer drawer
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_REQUEST_SLI
org.webrtc.EncodedImage: long captureTimeMs
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int frameRotation
org.webrtc.NV12Buffer: int height
org.webrtc.audio.WebRtcAudioRecord: int CALLBACK_BUFFER_SIZE_MS
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind SPEAKER
com.google.android.gms.auth.api.signin.internal.SignInConfiguration: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: io.flutter.plugin.common.MethodChannel$Result val$result
com.google.android.gms.internal.measurement.zzet: int zzd
androidx.window.layout.DisplayCompatHelperApi17: androidx.window.layout.DisplayCompatHelperApi17 INSTANCE
org.webrtc.HardwareVideoEncoderFactory: boolean enableH264HighProfile
org.webrtc.IceCandidate: java.lang.String sdpMid
org.webrtc.CameraCapturer: org.webrtc.CameraSession$Events cameraSessionEventsHandler
com.cloudwebrtc.webrtc.R$dimen: int notification_big_circle_margin
com.google.android.gms.internal.measurement.zzgy: boolean zzi
com.cloudwebrtc.webrtc.R$id: int async
org.webrtc.RtpParameters$HeaderExtension: boolean encrypted
org.webrtc.TextureBufferImpl$2: org.webrtc.TextureBufferImpl this$0
org.webrtc.Camera2Session: int framerate
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: android.app.Activity activity
org.webrtc.RtpParameters: java.util.List encodings
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_RED
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.ThreadUtils$ThreadChecker threadChecker
org.webrtc.Logging: org.webrtc.Logging$Severity loggableSeverity
androidx.window.embedding.SplitInfo: float splitRatio
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType ECDSA
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ADDITIONAL_FLAGS
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType connectionType
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_centerX
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArraySet splitRules
com.cloudwebrtc.webrtc.R$drawable: int notify_panel_notification_icon_bg
org.webrtc.PeerConnection$IceServer$Builder: java.util.List tlsEllipticCurves
org.webrtc.BaseBitrateAdjuster: double targetFramerateFps
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: java.lang.Class audioDeviceClass
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.MethodChannel methodChannel
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
com.google.android.gms.internal.measurement.zzfh: int zzd
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderAuthority
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: org.webrtc.audio.LowLatencyAudioBufferManager bufferManager
androidx.window.embedding.SplitController: boolean sDebug
androidx.window.embedding.SplitRule: int minSmallestWidth
org.webrtc.RtcCertificatePem: long DEFAULT_EXPIRY
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoEncoderFactory fallback
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoderFactory fallback
com.google.android.gms.internal.measurement.zzfv: int zzd
org.webrtc.CameraEnumerationAndroid$1: int val$requestedFps
androidx.window.embedding.SplitPlaceholderRule: java.util.Set filters
org.webrtc.DynamicBitrateAdjuster: int bitrateAdjustmentScaleExp
org.webrtc.TurnCustomizer: long nativeTurnCustomizer
org.webrtc.VideoDecoderFallback: org.webrtc.VideoDecoder primary
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.lang.String LIBRARY_NAME
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMEOUT_AFTER
org.webrtc.MediaCodecUtils: int[] TEXTURE_COLOR_FORMATS
org.webrtc.DynamicBitrateAdjuster: int BITRATE_ADJUSTMENT_STEPS
androidx.window.layout.ActivityCompatHelperApi24: androidx.window.layout.ActivityCompatHelperApi24 INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TICKER
com.google.android.gms.maps.model.LatLng: android.os.Parcelable$Creator CREATOR
kotlin.jvm.internal.CallableReference: java.lang.String name
org.webrtc.DynamicBitrateAdjuster: double BITRATE_ADJUSTMENT_SEC
org.webrtc.EglRenderer: java.lang.Object handlerLock
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper$FrameRefMonitor frameRefMonitor
com.google.android.gms.wallet.wobs.CommonWalletObject: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection: java.util.List localStreams
org.webrtc.CameraCapturer: java.lang.String pendingCameraName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHARED_PREFERENCES_KEY
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy PRUNE_BASED_ON_PRIORITY
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarDeviceState lastDeviceState
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] $VALUES
com.cloudwebrtc.webrtc.R$attr: int alwaysExpand
org.webrtc.Camera2Session: int fpsUnitFactor
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory softwareVideoDecoderFactory
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.WebRtcAudioTrack audioOutput
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.Camera2Session$CaptureSessionCallback: org.webrtc.Camera2Session this$0
org.webrtc.Camera2Session: long constructionTimeNs
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzkm zzi
com.google.android.gms.cloudmessaging.CloudMessage: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label
com.cloudwebrtc.webrtc.R$style: int TextAppearance_Compat_Notification_Title
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo lastInfo
org.webrtc.SurfaceTextureHelper: java.lang.Runnable setListenerRunnable
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Object largeIcon
org.webrtc.SurfaceEglRenderer: int rotatedFrameWidth
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_5G
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.List lastValue
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticWorkerThread
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka
org.webrtc.VideoFrameDrawer$YuvUploader: int[] yuvTextures
org.webrtc.SessionDescription: java.lang.String description
org.webrtc.CandidatePairChangeEvent: int estimatedDisconnectedTimeMs
org.webrtc.PeerConnection$AdapterType: java.lang.Integer bitMask
org.webrtc.audio.JavaAudioDeviceModule: android.media.AudioManager audioManager
com.google.android.gms.internal.measurement.zzft: com.google.android.gms.internal.measurement.zzft zza
org.webrtc.EglRenderer$FrameListenerAndParams: boolean applyFpsReduction
com.google.android.gms.internal.measurement.zzgt: com.google.android.gms.internal.measurement.zzgp zzf
org.webrtc.EglRenderer: long statisticsStartTimeNs
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int width
androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
com.google.android.gms.internal.measurement.zzfh: java.lang.String zze
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE_INFORMATION
org.webrtc.AndroidVideoDecoder$FrameInfo: long decodeStartTimeMs
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: java.util.concurrent.Executor executor
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.Predicate codecAllowedPredicate
com.cloudwebrtc.webrtc.R$style: int Widget_Compat_NotificationActionText
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map activityToListeners
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState NEW
com.cloudwebrtc.webrtc.R$styleable: int GradientColorItem_android_color
androidx.window.embedding.SplitPairRule: boolean clearTop
org.webrtc.NetworkMonitor: int numObservers
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$IPAddress[] ipAddresses
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatLines
org.webrtc.Camera1Session: android.content.Context applicationContext
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: java.util.Set availableNetworks
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String timeZoneName
org.webrtc.voiceengine.WebRtcAudioManager: boolean proAudio
com.google.android.gms.internal.measurement.zzem: com.google.android.gms.internal.measurement.zzer zzf
org.webrtc.AndroidVideoDecoder: java.lang.String TAG
kotlin.jvm.internal.Lambda: int arity
org.webrtc.HardwareVideoEncoder: int width
org.webrtc.HardwareVideoEncoder: int MAX_ENCODER_Q_SIZE
org.webrtc.Camera2Session: int height
org.webrtc.audio.WebRtcAudioRecord: java.nio.ByteBuffer byteBuffer
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mOrigin
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_4
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$SdpSemantics sdpSemantics
org.webrtc.SurfaceViewRenderer: java.lang.String resourceName
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mTriggerEventName
org.webrtc.VideoCodecInfo: java.lang.String H264_CONSTRAINED_HIGH_3_1
org.webrtc.SurfaceViewRenderer: int surfaceWidth
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle BigPicture
org.webrtc.RefCountDelegate: java.util.concurrent.atomic.AtomicInteger refCount
org.webrtc.Metrics$HistogramInfo: int bucketCount
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
org.webrtc.Camera2Session: android.view.Surface surface
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String hostname
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType RSA
org.webrtc.Camera2Session: org.webrtc.CameraSession$CreateSessionCallback callback
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource FlutterBitmapAsset
org.webrtc.EglBase: int[] CONFIG_PIXEL_RGBA_BUFFER
androidx.window.R$styleable: int[] SplitPlaceholderRule
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType DISCONNECTED
com.google.android.gms.internal.measurement.zzgd: int zzY
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderFetchStrategy
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_WHEN
org.webrtc.CryptoOptions$Srtp: boolean enableGcmCryptoSuites
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer callback
com.google.android.gms.internal.measurement.zzio: int zzb
com.google.android.gms.internal.measurement.zzfz: int zzd
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_EXCEPTION
org.webrtc.Histogram: long handle
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String TAG
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
com.cloudwebrtc.webrtc.R$layout: int notification_template_custom_big
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON
org.webrtc.ThreadUtils$3: java.util.concurrent.CountDownLatch val$barrier
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderPackage
org.webrtc.HardwareVideoEncoder: long nextPresentationTimestampUs
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String MINUTE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONVERSATION_TITLE
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzkl zze
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.lang.Integer id
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.Predicate defaultAllowedPredicate
com.cloudwebrtc.webrtc.R$drawable: int notification_bg_low_pressed
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType VideoFrameDelta
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Default
androidx.window.embedding.ActivityFilter: java.lang.String intentAction
org.webrtc.NetworkMonitorAutoDetect: android.content.IntentFilter intentFilter
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_0
com.cloudwebrtc.webrtc.R$id: int dialog_button
org.webrtc.RtpCapabilities$HeaderExtensionCapability: int preferredId
androidx.window.R$id: int locale
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: java.lang.Integer decodeTimeMs
org.webrtc.VideoEncoderFallback: org.webrtc.VideoEncoder fallback
androidx.window.embedding.SplitPairRule: boolean finishPrimaryWithSecondary
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
org.webrtc.MediaCodecUtils: int[] DECODER_COLOR_FORMATS
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_UNKNOWN
com.cloudwebrtc.webrtc.R$dimen: int notification_right_side_padding_top
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _height
com.google.common.util.concurrent.AbstractFuture: java.lang.Object value
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object onCloseHandler
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_INSECURE_NO_CHECK
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mExpiredEventName
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String CANCEL_NOTIFICATION
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_SIZE
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.StateProvider stateProvider
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: com.cloudwebrtc.webrtc.utils.ConstraintsMap val$constraints
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] $VALUES
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_ONCE
org.webrtc.VideoFrameDrawer$1: int[] $SwitchMap$org$webrtc$VideoFrame$TextureBuffer$Type
org.webrtc.audio.WebRtcAudioTrack: boolean speakerMute
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.String conversationTitle
com.google.android.gms.internal.measurement.zzgm: java.lang.String zzf
org.webrtc.VideoFileRenderer: android.os.HandlerThread renderThread
org.webrtc.BaseBitrateAdjuster: int targetBitrateBps
org.webrtc.EglRenderer: long renderSwapBufferTimeNs
org.webrtc.CameraEnumerationAndroid$2: int val$requestedHeight
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioDeviceInfo preferredDevice
com.dexterous.flutterlocalnotifications.models.NotificationDetails: int[] additionalFlags
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String contentTitle
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: java.util.HashMap callbacks
org.webrtc.PeerConnectionFactory$InitializationOptions: boolean enableInternalTracer
org.webrtc.SurfaceTextureHelper$1: org.webrtc.EglBase$Context val$sharedContext
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
org.webrtc.voiceengine.WebRtcAudioTrack: long AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_UNKNOWN_CELLULAR
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl splitInfoEmbeddingCallback
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker decoderThreadChecker
kotlinx.coroutines.JobSupport: java.lang.Object _state
org.webrtc.VideoSource$AspectRatio: org.webrtc.VideoSource$AspectRatio UNDEFINED
com.cloudwebrtc.webrtc.R$attr: int fontProviderAuthority
org.webrtc.PeerConnection: java.util.List receivers
org.webrtc.EncodedImage: long captureTimeNs
com.google.android.gms.internal.measurement.zzkf: java.util.Map zza
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropHeight
org.webrtc.GlGenericDrawer: java.lang.String INPUT_TEXTURE_COORDINATE_NAME
org.webrtc.PeerConnection: long nativePeerConnection
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.Set registeredListeners
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType type
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_ID
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes audioAttributes
com.google.android.gms.internal.measurement.zzgy: int zze
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$RtcpMuxPolicy rtcpMuxPolicy
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: long[] vibrationPattern
org.webrtc.NetworkMonitorAutoDetect: android.net.ConnectivityManager$NetworkCallback mobileNetworkCallback
com.cloudwebrtc.webrtc.R$styleable: int ActivityFilter_activityAction
org.webrtc.SurfaceTextureHelper: org.webrtc.TimestampAligner timestampAligner
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.HandlerThread audioThread
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int type
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String PLAY_SOUND
com.google.android.gms.internal.measurement.zzff: boolean zzl
org.webrtc.EglBase: int[] CONFIG_RECORDABLE
org.webrtc.NetworkMonitorAutoDetect: android.content.Context context
org.webrtc.SurfaceViewRenderer: int rotatedFrameHeight
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropWidth
com.google.android.gms.internal.measurement.zzfx: double zzi
org.webrtc.AndroidVideoDecoder: int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
org.webrtc.NetworkMonitor: java.util.ArrayList nativeNetworkObservers
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String tag
org.webrtc.VideoFileRenderer: int frameCount
org.webrtc.ScreenCapturerAndroid$2: org.webrtc.ScreenCapturerAndroid this$0
org.webrtc.VideoCodecInfo: java.lang.String H264_PROFILE_CONSTRAINED_BASELINE
androidx.window.layout.SidecarCompat$FirstAttachAdapter: java.lang.ref.WeakReference activityWeakReference
org.webrtc.FileVideoCapturer$VideoReaderY4M: int frameWidth
org.webrtc.EglRenderer: long nextFrameTimeNs
com.cloudwebrtc.webrtc.R$id: int action_text
org.webrtc.HardwareVideoEncoder: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_ERROR_CODE
org.webrtc.FileVideoCapturer$1: org.webrtc.FileVideoCapturer this$0
org.webrtc.HardwareVideoEncoder: java.lang.Integer yuvColorFormat
org.webrtc.CameraCapturer: org.webrtc.CameraCapturer$SwitchState switchState
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TAG
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AcousticEchoCanceler aec
org.webrtc.Camera2Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat
com.cloudwebrtc.webrtc.R$color: int notification_action_color_filter
org.webrtc.HardwareVideoEncoder: int height
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback errorCallback
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_FOREGROUND_NOTIFICATION_ACTION
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy MAXBUNDLE
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzX
com.google.android.gms.wallet.ShippingAddressRequirements: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1 INSTANCE
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] $VALUES
androidx.window.layout.FoldingFeature$Orientation: java.lang.String description
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel INPUT
org.webrtc.voiceengine.WebRtcAudioRecord: int DEFAULT_AUDIO_SOURCE
com.google.android.gms.internal.measurement.zzff: int zzg
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzW
com.cloudwebrtc.webrtc.R$dimen: int notification_top_pad
org.webrtc.PeerConnectionFactory: boolean internalTracerInitialized
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_VIDEO
org.webrtc.EglRenderer: long renderTimeNs
com.cloudwebrtc.webrtc.R$id: int tag_transition_group
org.webrtc.CameraCapturer: java.lang.String cameraName
org.webrtc.HardwareVideoEncoder: java.util.Map params
org.webrtc.Camera2Session: java.lang.String TAG
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_splitMinSmallestWidth
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckMinInterval
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataV
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String[] BLACKLISTED_OPEN_SL_ES_MODELS
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType VP8
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_MIME_TYPE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUDIO_ATTRIBUTES_USAGE
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy NEGOTIATE
org.webrtc.RtpParameters$HeaderExtension: java.lang.String uri
org.webrtc.GlGenericDrawer: int inTcLocation
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator$Companion $$INSTANCE
org.webrtc.VideoDecoder$Settings: int width
com.google.android.gms.wallet.PaymentMethodTokenizationParameters: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State ENDED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelId
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzkl zzd
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String mimeType
androidx.window.R$attr: int finishPrimaryWithSecondary
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String UNSUPPORTED_OS_VERSION_ERROR_CODE
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.internal.zas mResultGuardian
org.webrtc.PeerConnection$IceServer: java.lang.String password
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: io.flutter.plugin.common.MethodChannel$Result val$result
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_20
com.google.android.gms.wallet.wobs.TextModuleData: android.os.Parcelable$Creator CREATOR
org.webrtc.FileVideoCapturer: org.webrtc.FileVideoCapturer$VideoReader videoReader
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE_BITMAP_SOURCE
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataY
com.cloudwebrtc.webrtc.R$id: int notification_background
org.webrtc.StatsReport: java.lang.String type
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.Predicate codecAllowedPredicate
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback audioRecordStateCallback
androidx.window.layout.WindowMetricsCalculatorCompat: java.lang.String TAG
com.cloudwebrtc.webrtc.R$drawable: int notification_bg
org.webrtc.CameraCapturer: int OPEN_CAMERA_DELAY_MS
com.google.android.gms.internal.measurement.zzet: boolean zzi
org.webrtc.audio.WebRtcAudioEffects: java.util.UUID AOSP_ACOUSTIC_ECHO_CANCELER
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_METHOD
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzgi zza
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource RawResource
com.google.android.gms.internal.measurement.zzek: boolean zzh
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: android.graphics.SurfaceTexture texture
com.cloudwebrtc.webrtc.R$attr: int nestedScrollViewStyle
org.webrtc.WrappedNativeI420Buffer: int strideY
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnection$Observer observer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.content.Context context
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean ongoing
com.cloudwebrtc.webrtc.R$dimen: int notification_large_icon_width
org.webrtc.PeerConnection$RTCConfiguration: boolean offerExtmapAllowMixed
com.google.android.gms.internal.measurement.zzfp: boolean zzh
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink pendingListener
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: java.lang.String typeName
com.cloudwebrtc.webrtc.R$dimen: int notification_large_icon_height
org.webrtc.JavaI420Buffer: int height
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack audioTrack
org.webrtc.Camera2Session: int cameraOrientation
org.webrtc.NV21Buffer: int height
com.cloudwebrtc.webrtc.R$dimen: int notification_small_icon_background_padding
org.webrtc.Metrics$HistogramInfo: int max
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String payload
org.webrtc.VideoFileRenderer: org.webrtc.EglBase eglBase
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioProcessingFactory audioProcessingFactory
org.webrtc.VideoProcessor$FrameAdaptationParameters: int scaleHeight
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.BinaryMessenger messenger
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLATFORM_SPECIFICS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUMMARY_TEXT
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map remoteStreams
org.webrtc.CameraVideoCapturer$CameraStatistics: java.lang.Runnable cameraObserver
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean cancelNotification
org.webrtc.audio.WebRtcAudioManager: int BITS_PER_SAMPLE
androidx.window.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
org.webrtc.SurfaceTextureHelper$1: org.webrtc.SurfaceTextureHelper$FrameRefMonitor val$frameRefMonitor
com.google.android.gms.internal.measurement.zzey: com.google.android.gms.internal.measurement.zzey zza
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: int width
com.cloudwebrtc.webrtc.BuildConfig: boolean DEBUG
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map transceivers
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer maxProgress
com.google.android.gms.internal.measurement.zzfv: java.lang.String zze
org.webrtc.FileVideoCapturer: org.webrtc.CapturerObserver capturerObserver
org.webrtc.ScreenCapturerAndroid: int width
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String key
org.webrtc.VideoDecoder$DecodeInfo: long renderTimeMs
org.webrtc.ScreenCapturerAndroid: int DISPLAY_FLAGS
org.webrtc.HardwareVideoEncoder: int VIDEO_ControlRateConstant
com.google.android.gms.internal.measurement.zzgy: java.lang.String zzh
org.webrtc.VideoFileRenderer: java.io.FileOutputStream videoOutFile
com.google.android.gms.internal.wallet.zzp: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$id: int ltr
org.webrtc.voiceengine.WebRtcAudioEffects: android.media.audiofx.AcousticEchoCanceler aec
org.webrtc.EglRenderer: int framesReceived
org.webrtc.voiceengine.WebRtcAudioManager: int outputChannels
org.webrtc.EglRenderer$FrameListenerAndParams: org.webrtc.RendererCommon$GlDrawer drawer
org.webrtc.AndroidVideoDecoder: boolean hasDecodedFirstFrame
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_LINES
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: io.flutter.plugin.common.MethodChannel$Result val$result
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzH
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend$Companion Companion
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_BLUETOOTH
org.webrtc.CameraCapturer: int framerate
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
com.google.android.gms.internal.measurement.zzgk: int zzd
org.webrtc.NativeLibrary: java.lang.Object lock
org.webrtc.SurfaceTextureHelper: org.webrtc.YuvConverter yuvConverter
androidx.window.embedding.EmbeddingCompat: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingExtension
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_NONE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_GROUP_METHOD
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarInterface$SidecarCallback callbackInterface
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Boolean allowCodecSwitching
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_VIDEO
com.google.android.gms.internal.measurement.zzfd: int zzd
com.google.android.gms.wallet.zzak: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection$IceServer: java.util.List tlsEllipticCurves
org.webrtc.RtpParameters$Encoding: java.lang.Integer maxFramerate
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: io.flutter.plugin.common.MethodChannel$Result val$result
androidx.window.core.Version: java.lang.String description
org.webrtc.voiceengine.WebRtcAudioTrack: org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread audioThread
org.webrtc.Camera2Session$CameraStateCallback: org.webrtc.Camera2Session this$0
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Inbox
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CLOSING
org.webrtc.EglRenderer$HandlerWithExceptionCallback: java.lang.Runnable exceptionCallback
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.layout.SidecarAdapter sidecarAdapter
com.google.android.gms.internal.measurement.zzgg: int zzd
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus UNINITIALIZED
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGL10 egl
org.webrtc.voiceengine.WebRtcAudioManager: int inputChannels
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_BIG_TEXT
com.cloudwebrtc.webrtc.R$id: int action_container
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map listenerToActivity
org.webrtc.VideoFrameBufferType: int I010
org.webrtc.PeerConnection$AdapterType: java.util.Map BY_BITMASK
org.webrtc.CameraCapturer$6: org.webrtc.CameraSession val$oldSession
com.cloudwebrtc.webrtc.R$styleable: int ColorStateListItem_alpha
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ID
org.webrtc.MediaCodecUtils: java.lang.String INTEL_PREFIX
androidx.window.R$styleable: int ActivityFilter_activityName
org.webrtc.GlGenericDrawer: java.lang.String TEXTURE_MATRIX_NAME
org.webrtc.YuvConverter: org.webrtc.YuvConverter$ShaderCallbacks shaderCallbacks
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.SSLCertificateVerifier sslCertificateVerifier
android.support.v4.media.session.PlaybackStateCompat: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgd: long zzn
com.google.android.gms.internal.measurement.zzfp: int zzd
org.webrtc.IceCandidateErrorEvent: java.lang.String address
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledColor
com.google.android.gms.internal.measurement.zzfd: int zzh
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer audioAttributesUsage
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int minBitrateBps
org.webrtc.EglBase: int[] CONFIG_PIXEL_BUFFER
org.webrtc.HardwareVideoEncoderFactory: boolean enableIntelVp8Encoder
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type ANSWER
com.google.firebase.messaging.RemoteMessage: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfr: int zze
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON_BITMAP_SOURCE
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState RUNNING
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
org.webrtc.PeerConnectionFactory$ThreadInfo: int tid
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo workerThread
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String body
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode: org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode AUDIO_TRACK_START_STATE_MISMATCH
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_14
androidx.window.embedding.SplitPairRule: boolean finishSecondaryWithPrimary
com.google.android.gms.wallet.TransactionInfo: android.os.Parcelable$Creator CREATOR
org.webrtc.audio.WebRtcAudioTrack: byte[] emptyBytes
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy NO_PRUNE
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState GATHERING
org.webrtc.RtpTransceiver$RtpTransceiverInit: org.webrtc.RtpTransceiver$RtpTransceiverDirection direction
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_ALPHA
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map dataChannels
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_2
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_APICALL
com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback stateCallback
com.cloudwebrtc.webrtc.R$id: int tag_on_receive_content_mime_types
org.webrtc.PeerConnection$IceServer: java.util.List urls
org.webrtc.EglBase: int[] CONFIG_PLAIN
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.RepeatInterval repeatInterval
org.webrtc.audio.WebRtcAudioTrack: int DEFAULT_USAGE
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List lastInfo
com.google.android.gms.internal.measurement.zzgd: long zzw
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$RtpTransceiver$RtpTransceiverDirection
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_METHOD
org.webrtc.voiceengine.WebRtcAudioTrack: android.media.AudioManager audioManager
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0
androidx.window.core.Version: androidx.window.core.Version UNKNOWN
org.webrtc.RTCStats: java.lang.String type
androidx.window.R$attr: int alwaysExpand
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
com.google.android.gms.wallet.wobs.TimeInterval: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$layout: int notification_action_tombstone
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.DateTimeComponents matchDateTimeComponents
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SET_AS_GROUP_SUMMARY
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object bigPicture
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
com.google.android.gms.internal.measurement.zzfp: int zze
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo networkThread
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection STOPPED
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaMuxer mediaMuxer
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String sound
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State state
org.webrtc.EglRenderer: java.lang.Object frameLock
org.webrtc.VideoFileRenderer: android.os.Handler fileThreadHandler
org.webrtc.VideoEncoder$Settings: int height
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator$Companion$reset$1 INSTANCE
org.webrtc.VideoFileRenderer: int outputFileHeight
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] $VALUES
org.webrtc.ThreadUtils$2: java.util.concurrent.CountDownLatch val$latch
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] $VALUES
com.google.android.gms.internal.measurement.zzgd: long zzB
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_6
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type ROLLBACK
androidx.window.layout.WindowMetrics: androidx.window.core.Bounds _bounds
org.webrtc.MediaCodecUtils$1: int[] $SwitchMap$org$webrtc$VideoCodecMimeType
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State ENDED
org.webrtc.Priority: int MEDIUM
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MESSAGES
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy
org.webrtc.VideoCodecStatus: int number
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERMISSION_REQUEST_IN_PROGRESS_ERROR_CODE
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$CandidateNetworkPolicy candidateNetworkPolicy
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource FilePath
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String CONTEXTUAL
com.google.android.gms.internal.measurement.zzfj: java.lang.String zze
com.google.android.gms.measurement.internal.zzau: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.VideoFrameDrawer frameDrawer
org.webrtc.voiceengine.WebRtcAudioManager: boolean aAudio
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: android.graphics.SurfaceTexture texture
com.google.android.gms.internal.measurement.zzfj: int zzd
com.cloudwebrtc.webrtc.R$string: int status_bar_notification_info_overflow
com.cloudwebrtc.webrtc.R$drawable: int notification_template_icon_low_bg
org.webrtc.HardwareVideoEncoder: org.webrtc.HardwareVideoEncoder$BusyCount outputBuffersBusyCount
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.util.LongSparseArray renders
org.webrtc.ScreenCapturerAndroid: int height
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String REQUEST_CODE
org.webrtc.ThreadUtils$3: org.webrtc.ThreadUtils$1Result val$result
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $VALUES
org.webrtc.TextureBufferImpl: android.graphics.Matrix transformMatrix
com.google.android.gms.common.zzs: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoEncoder$ScalingSettings: java.lang.Integer low
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CLOSED
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.io.RandomAccessFile mediaFile
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus OK
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_LIGHTS
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_WIFI
org.webrtc.voiceengine.WebRtcAudioManager: boolean DEBUG
org.webrtc.AndroidVideoDecoder: java.lang.String MEDIA_FORMAT_KEY_CROP_LEFT
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_fontWeight
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread: org.webrtc.voiceengine.WebRtcAudioTrack this$0
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$SFrame sframe
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String password
org.webrtc.PeerConnection$RTCConfiguration: int iceConnectionReceivingTimeout
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.media.AudioManager audioManager
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_ERROR
org.webrtc.SurfaceEglRenderer: int rotatedFrameHeight
org.webrtc.EncodedImage$Builder: java.lang.Integer qp
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode: org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode AUDIO_RECORD_START_STATE_MISMATCH
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource DrawableResource
org.webrtc.AndroidVideoDecoder: java.lang.String MEDIA_FORMAT_KEY_CROP_BOTTOM
com.cloudwebrtc.webrtc.R$attr: int activityName
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_10
org.webrtc.H264Utils: java.lang.String H264_PROFILE_CONSTRAINED_HIGH
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] $VALUES
org.webrtc.PeerConnectionFactory$Options: boolean disableEncryption
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Map
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String NAME
org.webrtc.HardwareVideoEncoder: java.nio.ByteBuffer configBuffer
org.webrtc.NetworkMonitor: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String contentTitle
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.util.ArrayList mArray
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
androidx.window.R$styleable: int ActivityRule_alwaysExpand
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HIDE_EXPANDED_LARGE_ICON
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.util.concurrent.ExecutorService executor
com.cloudwebrtc.webrtc.R$color: int androidx_core_secondary_text_default_material_light
org.webrtc.AndroidVideoDecoder: int colorFormat
org.webrtc.Camera2Session: boolean firstFrameReported
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjectionManager mediaProjectionManager
org.webrtc.voiceengine.WebRtcAudioTrack: long nativeAudioTrack
com.cloudwebrtc.webrtc.R$attr: int fontVariationSettings
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PROJECTION_DATA
org.webrtc.audio.WebRtcAudioTrack: boolean useLowLatency
org.webrtc.VideoProcessor$FrameAdaptationParameters: long timestampNs
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: java.lang.String fieldName
com.google.android.gms.internal.measurement.zzgd: int zzf
org.webrtc.YuvConverter: java.lang.String FRAGMENT_SHADER
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map mSurfaceTextureHelpers
org.webrtc.voiceengine.WebRtcAudioManager: org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger volumeLogger
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Weekly
org.webrtc.GlShader: int program
com.google.android.gms.internal.measurement.zzfv: long zzf
org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture surfaceTexture
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.Long timestamp
org.webrtc.HardwareVideoEncoder$1: org.webrtc.HardwareVideoEncoder this$0
org.webrtc.CameraCapturer$9: org.webrtc.CameraCapturer this$0
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Context applicationContext
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
org.webrtc.VideoDecoderFallback: org.webrtc.VideoDecoder fallback
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_25
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType RGB
org.webrtc.audio.VolumeLogger: android.media.AudioManager audioManager
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type PRANSWER
com.yalantis.ucrop.model.AspectRatio: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$TcpCandidatePolicy tcpCandidatePolicy
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.PermissionRequestListener callback
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind WIRED_HEADSET
org.webrtc.DynamicBitrateAdjuster: double deviationBytes
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_NONE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ZONED_SCHEDULE_METHOD
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] $VALUES
org.webrtc.Camera2Session: java.lang.String cameraId
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Array
com.google.android.gms.internal.measurement.zzei: int zzd
org.webrtc.IceCandidate: org.webrtc.PeerConnection$AdapterType adapterType
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState STOPPED
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: android.os.Bundle mTriggeredEventParams
org.webrtc.VideoFileRenderer: org.webrtc.YuvConverter yuvConverter
org.webrtc.VideoFileRenderer: int outputFrameSize
org.webrtc.HardwareVideoEncoder: int keyFrameIntervalSec
org.webrtc.audio.VolumeLogger$LogVolumeTask: int maxRingVolume
org.webrtc.PeerConnection$IceServer: java.util.List tlsAlpnProtocols
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_ALERT_BEHAVIOR
androidx.window.core.Version: androidx.window.core.Version VERSION_0_1
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean allowWhileIdle
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingAdapter adapter
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzv
org.webrtc.CryptoOptions$Builder: boolean requireFrameEncryption
org.webrtc.SurfaceEglRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
com.google.android.gms.measurement.internal.zzq: android.os.Parcelable$Creator CREATOR
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLContext eglContext
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Hourly
org.webrtc.RtpParameters$Encoding: boolean adaptiveAudioPacketTime
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ALL_METHOD
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderCerts
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_TITLE
org.webrtc.FileVideoCapturer: java.util.Timer timer
org.webrtc.audio.WebRtcAudioRecord: java.lang.String TAG
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Boolean combinedAudioVideoBwe
org.webrtc.VideoCodecInfo: java.lang.String H264_CONSTRAINED_BASELINE_3_1
org.webrtc.PeerConnection$RTCConfiguration: java.util.List iceServers
org.webrtc.HardwareVideoEncoder: java.nio.ByteBuffer[] outputBuffers
com.google.android.gms.wallet.wobs.WalletObjectMessage: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: org.webrtc.MediaStream val$mediaStream
com.google.android.gms.internal.measurement.zzem: boolean zzg
org.webrtc.audio.WebRtcAudioRecord: int DEFAULT_AUDIO_SOURCE
com.google.android.gms.internal.measurement.zzem: com.google.android.gms.internal.measurement.zzem zza
org.webrtc.voiceengine.WebRtcAudioTrack: org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback errorCallback
org.webrtc.Camera2Session: android.os.Handler cameraThreadHandler
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
org.webrtc.audio.WebRtcAudioRecord: long nativeAudioRecord
org.webrtc.MediaStream: java.util.List videoTracks
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock globalLock
org.webrtc.voiceengine.WebRtcAudioRecord: java.lang.String TAG
com.google.android.gms.internal.measurement.zzey: boolean zzg
com.google.android.gms.internal.measurement.zzft: com.google.android.gms.internal.measurement.zzkm zze
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_METHOD
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.audio.AudioDeviceModule audioDeviceModule
org.webrtc.CameraVideoCapturer$CameraStatistics: int CAMERA_FREEZE_REPORT_TIMOUT_MS
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_4G
io.objectbox.converter.FlexObjectConverter: java.util.concurrent.atomic.AtomicReference cachedBuilder
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend globalInstance
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_SUMMARY_TEXT
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] $VALUES
com.cloudwebrtc.webrtc.R$id: int tag_on_receive_content_listener
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingCompat$Companion Companion
com.cloudwebrtc.webrtc.R$id: int locale
org.webrtc.NetworkMonitorAutoDetect: long INVALID_NET_ID
org.webrtc.Predicate$2: org.webrtc.Predicate val$other
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLSurface eglSurface
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_ALPHA
androidx.window.R$attr: int activityAction
org.webrtc.VideoEncoder$RateControlParameters: org.webrtc.VideoEncoder$BitrateAllocation bitrate
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String sound
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzD
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String HOUR
org.webrtc.VideoEncoder$BitrateAllocation: int[][] bitratesBbs
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: int height
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String[] BLACKLISTED_NS_MODELS
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] $VALUES
androidx.window.core.Version: int minor
com.cloudwebrtc.webrtc.R$attr: int secondaryActivityName
com.google.firebase.datatransport.TransportRegistrar: java.lang.String LIBRARY_NAME
org.webrtc.voiceengine.WebRtcAudioUtils: boolean isDefaultSampleRateOverridden
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showProgress
org.webrtc.TextureBufferImpl$1: java.lang.Runnable val$releaseCallback
org.webrtc.RtpParameters$Encoding: java.lang.Long ssrc
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: org.webrtc.EglBase10Impl this$0
org.webrtc.EglBase14Impl: java.lang.String TAG
com.google.android.gms.internal.measurement.zzfn: java.lang.String zze
org.webrtc.AndroidVideoDecoder: org.webrtc.EglBase$Context sharedContext
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: com.cloudwebrtc.webrtc.SurfaceTextureRenderer surfaceTextureRenderer
org.webrtc.VideoCodecInfo: java.lang.String name
com.cloudwebrtc.webrtc.R$attr: int placeholderActivityName
org.webrtc.EglRenderer: boolean mirrorHorizontally
com.google.android.gms.internal.measurement.zzer: int zze
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_startY
org.webrtc.voiceengine.WebRtcAudioManager: java.lang.String TAG
org.webrtc.AndroidVideoDecoder: int height
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: org.webrtc.VideoTrack videoTrack
org.webrtc.ThreadUtils$1CaughtException: java.lang.Exception e
com.google.android.gms.internal.measurement.zzcl: android.os.Parcelable$Creator CREATOR
org.webrtc.SurfaceViewRenderer: org.webrtc.RendererCommon$VideoLayoutMeasure videoLayoutMeasure
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.content.Context context
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type$Companion Companion
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$Callback callback
androidx.window.R$attr: int splitRatio
org.webrtc.AndroidVideoDecoder: java.util.concurrent.BlockingDeque frameInfos
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy DISABLED
org.webrtc.VideoFrameBufferType: int I444
org.webrtc.H264Utils: java.lang.String H264_CONSTRAINED_BASELINE_3_1
kotlinx.coroutines.CancelledContinuation: int _resumed
org.webrtc.WrappedNativeI420Buffer: int strideU
org.webrtc.audio.WebRtcAudioTrack: int initialBufferSizeInFrames
org.webrtc.CameraEnumerationAndroid$2: int val$requestedWidth
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
org.webrtc.SurfaceTextureHelper$1: android.os.Handler val$handler
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_GREEN
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer stableWritableConnectionPingIntervalMs
org.webrtc.EglRenderer: org.webrtc.GlTextureFrameBuffer bitmapTextureFramebuffer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer color
org.webrtc.voiceengine.WebRtcAudioManager: boolean blacklistDeviceForAAudioUsage
androidx.window.embedding.ActivityRule: java.util.Set filters
com.google.android.gms.internal.measurement.zzgd: long zzV
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection peerConnection
com.cloudwebrtc.webrtc.R$styleable: int ColorStateListItem_android_lStar
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] $VALUES
org.webrtc.EncodedImage$Builder: int rotation
androidx.window.embedding.ExtensionEmbeddingBackend: java.lang.String TAG
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics UNIFIED_PLAN
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] $VALUES
org.webrtc.GlGenericDrawer: org.webrtc.GlGenericDrawer$ShaderType currentShaderType
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PROGRESS
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataY
org.webrtc.WrappedNativeI420Buffer: int strideV
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.Camera2Enumerator: java.lang.String TAG
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrame lastI420Frame
org.webrtc.audio.WebRtcAudioRecord: int BUFFER_SIZE_FACTOR
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CHECKING
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityAction
org.webrtc.VideoFileRenderer: java.lang.String TAG
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.twilio.audioswitch.AudioSwitch audioSwitch
com.google.android.gms.internal.measurement.zzgg: com.google.android.gms.internal.measurement.zzgg zza
com.google.android.gms.internal.measurement.zzgd: long zzN
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.Logging$Severity loggableSeverity
kotlin.jvm.internal.CallableReference: boolean isTopLevel
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String subText
com.cloudwebrtc.webrtc.R$color: int notification_icon_bg_color
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean bot
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] $VALUES
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_TIME
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceUnwritableTimeMs
org.webrtc.EglRenderer$2: org.webrtc.EglRenderer this$0
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] $VALUES
org.webrtc.CameraEnumerationAndroid: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_CODE
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer$Type type
com.google.android.gms.internal.measurement.zzgy: com.google.android.gms.internal.measurement.zzgy zza
org.webrtc.NetworkPreference: int NEUTRAL
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask: int maxVoiceCallVolume
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object largeIcon
org.webrtc.PeerConnection: java.util.List transceivers
org.webrtc.CameraCapturer$1: org.webrtc.CameraCapturer this$0
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] $VALUES
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.Loggable loggable
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy
org.webrtc.YuvConverter$ShaderCallbacks: int coeffsLoc
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.WebRtcAudioRecord audioInput
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback errorCallback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean autoCancel
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: int WIFI_P2P_NETWORK_HANDLE
org.webrtc.Camera2Enumerator: java.util.Map cachedSupportedFormats
org.webrtc.Camera1Session$1: org.webrtc.Camera1Session this$0
androidx.window.embedding.SplitPairFilter: android.content.ComponentName primaryActivityName
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useHardwareNoiseSuppressor
org.webrtc.MediaCodecUtils: java.lang.String EXYNOS_PREFIX
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference MAINTAIN_RESOLUTION
androidx.window.R$attr: int secondaryActivityName
org.webrtc.voiceengine.WebRtcAudioTrack: android.media.AudioTrack audioTrack
org.webrtc.DataChannel$Init: int maxRetransmits
org.webrtc.voiceengine.WebRtcAudioManager: boolean blacklistDeviceForOpenSLESUsageIsOverridden
com.cloudwebrtc.webrtc.utils.AnyThreadResult: io.flutter.plugin.common.MethodChannel$Result result
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: org.webrtc.NetworkMonitorAutoDetect this$0
org.webrtc.PeerConnection$IceServer: java.lang.String uri
org.webrtc.EglRenderer: org.webrtc.RendererCommon$GlDrawer drawer
kotlinx.coroutines.CommonPool: java.util.concurrent.Executor pool
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BODY
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropY
com.google.android.gms.internal.measurement.zzgb: com.google.android.gms.internal.measurement.zzkm zzd
org.webrtc.voiceengine.WebRtcAudioRecord: int BUFFER_SIZE_FACTOR
org.webrtc.StatsReport: java.lang.String id
org.webrtc.audio.JavaAudioDeviceModule$Builder: int audioFormat
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mName
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState STABLE
org.webrtc.audio.WebRtcAudioRecord: int AUDIO_RECORD_STOP
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate connectivityManagerDelegate
androidx.window.embedding.SplitController: java.util.Set staticSplitRules
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetEqFactoryFactory neteqFactoryFactory
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CONNECTING
org.webrtc.EglRenderer: org.webrtc.EglBase eglBase
org.webrtc.PeerConnection$IceServer: java.lang.String username
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzf
org.webrtc.HardwareVideoEncoder: boolean automaticResizeOn
com.cloudwebrtc.webrtc.PeerConnectionObserver: com.cloudwebrtc.webrtc.StateProvider stateProvider
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_DESCRIPTION
org.webrtc.VideoTrack: java.util.IdentityHashMap sinks
com.google.android.gms.common.zzo: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfh: java.lang.String zzf
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: android.app.Activity $activity
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode: org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode[] $VALUES
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback val$callback
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicInteger nextSchedulerId
org.webrtc.Camera2Session: android.hardware.camera2.CameraCaptureSession captureSession
org.webrtc.PeerConnection$RTCConfiguration: int maxIPv6Networks
com.google.android.gms.internal.measurement.zzfd: com.google.android.gms.internal.measurement.zzfd zza
org.webrtc.audio.WebRtcAudioTrack: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_MESSAGE
com.google.android.gms.cloudmessaging.zzd: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfp: com.google.android.gms.internal.measurement.zzgi zzf
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.concurrent.locks.ReentrantLock extensionWindowBackendLock
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataU
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrameDrawer$YuvUploader yuvUploader
android.support.v4.os.ResultReceiver: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec$BufferInfo bufferInfo
org.webrtc.VideoFrameDrawer$YuvUploader: java.nio.ByteBuffer copyBuffer
org.webrtc.PeerConnection$RTCConfiguration: boolean enableCpuOveruseDetection
org.webrtc.YuvConverter$ShaderCallbacks: float[] coeffs
org.webrtc.EglRenderer: org.webrtc.EglRenderer$EglSurfaceCreation eglSurfaceCreationRunnable
org.webrtc.audio.JavaAudioDeviceModule: long nativeAudioDeviceModule
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANCE
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState COMPLETED
org.webrtc.Camera1Session$2: org.webrtc.Camera1Session this$0
com.google.android.gms.internal.auth.zzeu: com.google.android.gms.internal.auth.zzgz zzc
org.webrtc.NV12Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.MediaCodecUtils: java.lang.String QCOM_PREFIX
org.webrtc.CameraCapturer: int width
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_startX
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map subtypeToLabel
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoderFactory fallback
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer stunCandidateKeepaliveIntervalMs
com.google.android.gms.internal.measurement.zzgd: int zza
org.webrtc.voiceengine.WebRtcAudioTrack: int BITS_PER_SAMPLE
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.List actions
org.webrtc.Metrics: java.util.Map map
org.webrtc.Camera2Session: android.hardware.camera2.CameraCharacteristics cameraCharacteristics
org.webrtc.AndroidVideoDecoder: boolean running
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType NONE
android.support.v4.media.session.MediaSessionCompat$Token: android.os.Parcelable$Creator CREATOR
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType OES
com.cloudwebrtc.webrtc.R$attr: int splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableLights
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_STATE_MISMATCH
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzgg zzS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_CONVERSATION
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String uri
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String description
org.webrtc.VideoEncoder$Settings: boolean automaticResizeOn
org.webrtc.RtpTransceiver: long nativeRtpTransceiver
com.google.android.gms.internal.measurement.zzgk: com.google.android.gms.internal.measurement.zzgk zza
org.webrtc.CryptoOptions$Srtp: boolean enableEncryptedRtpHeaderExtensions
org.webrtc.CameraCapturer: boolean firstFrameObserved
org.webrtc.AndroidVideoDecoder: java.lang.Object dimensionLock
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzkm zzh
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean loggingEnabled
androidx.window.R$attr: int activityName
org.webrtc.AndroidVideoDecoder: java.lang.Object renderedTextureMetadataLock
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_AUDIO
org.webrtc.voiceengine.WebRtcAudioRecord: org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread audioThread
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: java.lang.String className
com.google.android.gms.internal.measurement.zzgm: float zzi
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzr
org.webrtc.EglBase: java.lang.Object lock
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
org.webrtc.HardwareVideoEncoder: org.webrtc.EglBase14$Context sharedContext
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzu
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type FOLD
org.webrtc.AndroidVideoDecoder: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_LAUNCHED_APP
com.cloudwebrtc.webrtc.R$color: int androidx_core_ripple_material_light
org.webrtc.DataChannel$Init: java.lang.String protocol
org.webrtc.IceCandidateErrorEvent: int port
org.webrtc.audio.JavaAudioDeviceModule: boolean useStereoOutput
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] audioInputBuffers
com.cloudwebrtc.webrtc.R$style: int Widget_Compat_NotificationActionContainer
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String GRANT_RESULTS
org.webrtc.WrappedNativeI420Buffer: long nativeBuffer
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class baseType
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.concurrent.locks.ReentrantLock multicastConsumerLock
com.google.android.gms.internal.measurement.zzfp: com.google.android.gms.internal.measurement.zzfp zza
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderFetchTimeout
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State LIVE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency scheduledNotificationRepeatFrequency
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ICON
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_METHOD
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback stateCallback
com.google.android.gms.internal.measurement.zzkc: com.google.android.gms.internal.measurement.zzjw zza
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_INTERVAL
com.cloudwebrtc.webrtc.R$id: int tag_accessibility_actions
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction CreateIfNotExists
org.webrtc.Camera2Session: int width
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_VIBRATION
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_ANY
org.webrtc.Camera1Enumerator: java.lang.String TAG
org.webrtc.audio.VolumeLogger: java.lang.String TAG
com.cloudwebrtc.webrtc.R$attr: int alpha
org.webrtc.voiceengine.WebRtcAudioRecord: byte[] emptyBytes
com.google.android.gms.internal.measurement.zzfx: com.google.android.gms.internal.measurement.zzkm zzj
com.google.android.gms.internal.measurement.zzem: int zzd
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
com.google.android.gms.internal.measurement.zzfv: com.google.android.gms.internal.measurement.zzfv zza
org.webrtc.VideoCodecInfo: java.lang.String H264_PROFILE_CONSTRAINED_HIGH
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int height
org.webrtc.PeerConnection: java.util.List senders
com.cloudwebrtc.webrtc.R$id: int line1
org.webrtc.AndroidVideoDecoder: boolean keyFrameRequired
com.cloudwebrtc.webrtc.R$dimen: int notification_content_margin_start
com.google.android.gms.wallet.wobs.UriData: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaCodecUtils: int[] ENCODER_COLOR_FORMATS
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String name
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_GREEN
com.cloudwebrtc.webrtc.R$dimen: int compat_button_padding_horizontal_material
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: boolean keepAlive
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String description
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] $VALUES
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo signalingThread
org.webrtc.CameraCapturer$9: org.webrtc.CameraSession val$oldSession
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.VideoTrack videoTrack
org.webrtc.EglBase10Impl: int EGL_CONTEXT_CLIENT_VERSION
org.webrtc.voiceengine.WebRtcAudioManager: int BITS_PER_SAMPLE
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.view.TextureRegistry textures
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int NOTIFICATION_PERMISSION_REQUEST_CODE
com.cloudwebrtc.webrtc.R$id: int action_divider
org.webrtc.audio.WebRtcAudioEffects: boolean shouldEnableNs
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource BitmapFilePath
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.view.Surface surface
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.H264Utils: java.lang.String H264_FMTP_PROFILE_LEVEL_ID
org.webrtc.RtpParameters$Codec: int payloadType
com.google.android.gms.measurement.internal.zzac: android.os.Parcelable$Creator CREATOR
org.webrtc.CallSessionFileRotatingLogSink: long nativeSink
com.cloudwebrtc.webrtc.R$styleable: int[] SplitPairFilter
org.webrtc.VideoEncoder$EncoderInfo: boolean applyAlignmentToAllSimulcastLayers
com.google.android.gms.internal.measurement.zzem: com.google.android.gms.internal.measurement.zzey zze
org.webrtc.EglBase: int EGL_RECORDABLE_ANDROID
org.webrtc.EncodedImage: java.lang.Integer qp
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.NativeLibraryLoader nativeLibraryLoader
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.view.Surface surface
org.webrtc.HardwareVideoEncoder: org.webrtc.ThreadUtils$ThreadChecker encodeThreadChecker
org.webrtc.CryptoOptions$SFrame: boolean requireFrameEncryption
org.webrtc.AndroidVideoDecoder$1: org.webrtc.AndroidVideoDecoder this$0
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType WIFI
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.SimulcastVideoEncoderFactory native
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $VALUES
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mTriggerTimeout
com.cloudwebrtc.webrtc.R$id: int blocking
com.cloudwebrtc.webrtc.R$id: int tag_accessibility_clickable_spans
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver observer
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack secondaryActivityStack
com.google.android.gms.internal.measurement.zzgp: com.google.android.gms.internal.measurement.zzgp zza
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_SCREEN
com.google.android.gms.internal.measurement.zzgd: long zzm
org.webrtc.Camera1Enumerator: java.util.List cachedSupportedFormats
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Object icon
org.webrtc.YuvConverter$ShaderCallbacks: float stepSize
org.webrtc.Metrics: java.lang.String TAG
org.webrtc.ScreenCapturerAndroid: android.content.Intent mediaProjectionPermissionResultData
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval EveryMinute
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String TAG
com.google.android.gms.internal.measurement.zzer: int zzd
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Messaging
org.webrtc.HardwareVideoEncoder: java.lang.Thread outputThread
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
org.webrtc.EglRenderer$EglSurfaceCreation: org.webrtc.EglRenderer this$0
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State$Companion Companion
com.cloudwebrtc.webrtc.utils.AnyThreadResult: android.os.Handler handler
androidx.window.layout.FoldingFeature$State: java.lang.String description
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String key
org.webrtc.SurfaceEglRenderer: java.lang.String TAG
org.webrtc.HardwareVideoEncoder: org.webrtc.GlRectDrawer textureDrawer
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzt
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TITLE
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_STATE_MISMATCH
org.webrtc.RtpReceiver: long nativeRtpReceiver
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String summaryText
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: android.app.Application application
com.cloudwebrtc.webrtc.R$id: int text
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean onlyAlertOnce
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer clockRate
org.webrtc.EglBase14Impl$Context: android.opengl.EGLContext egl14Context
org.webrtc.CameraCapturer: android.content.Context applicationContext
com.cloudwebrtc.webrtc.R$id: int notification_main_column_container
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSIONS
org.webrtc.SurfaceTextureHelper: org.webrtc.TextureBufferImpl$RefCountMonitor textureRefCountMonitor
com.google.android.gms.internal.auth.zzhr: com.google.android.gms.internal.auth.zzey zzd
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckIntervalWeakConnectivityMs
org.webrtc.GlTextureFrameBuffer: int frameBufferId
org.webrtc.voiceengine.WebRtcAudioManager: int nativeSampleRate
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] $VALUES
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection INACTIVE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String groupId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONTENT_TITLE
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_4G
org.webrtc.voiceengine.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] cachedEffects
org.webrtc.audio.WebRtcAudioManager: int DEFAULT_SAMPLE_RATE_HZ
org.webrtc.MediaCodecUtils: java.lang.String[] SOFTWARE_IMPLEMENTATION_PREFIXES
com.google.android.gms.internal.measurement.zzft: long zzh
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_PARAMETER
org.webrtc.VideoSource$AspectRatio: int width
com.cloudwebrtc.webrtc.R$dimen: int notification_top_pad_large_text
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_NOTIFICATION
com.cloudwebrtc.webrtc.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
org.webrtc.NetworkPreference: int NOT_PREFERRED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANT
org.webrtc.RefCountDelegate: java.lang.Runnable releaseCallback
org.webrtc.VideoFileRenderer: android.os.Handler renderThreadHandler
org.webrtc.DtmfSender: long nativeDtmfSender
org.webrtc.MediaStream: long nativeStream
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzfz zzac
androidx.window.embedding.SplitController: androidx.window.embedding.EmbeddingBackend embeddingBackend
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzkm zzn
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT_TITLE
org.webrtc.JNILogging: org.webrtc.Loggable loggable
com.google.android.gms.internal.measurement.zzey: java.lang.String zzf
org.webrtc.HardwareVideoEncoderFactory: int PERIODIC_KEY_FRAME_INTERVAL_S
org.webrtc.SurfaceTextureHelper: boolean hasPendingTexture
org.webrtc.audio.WebRtcAudioRecord: long AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder encoder
com.cloudwebrtc.webrtc.record.FrameCapturer: io.flutter.plugin.common.MethodChannel$Result callback
org.webrtc.NetworkMonitorAutoDetect: android.net.ConnectivityManager$NetworkCallback allNetworkCallback
com.google.android.gms.auth.api.signin.GoogleSignInOptions: android.os.Parcelable$Creator CREATOR
org.webrtc.EglRenderer: android.graphics.Matrix drawMatrix
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
org.webrtc.audio.LowLatencyAudioBufferManager: boolean keepLoweringBufferSize
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus REQUEST_SLI
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mAppId
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_SOUND_ERROR_CODE
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
org.webrtc.HardwareVideoEncoderFactory: java.util.List H264_HW_EXCEPTION_MODELS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer visibility
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor: java.lang.String MODULE_ID
org.webrtc.GlTextureFrameBuffer: int height
org.webrtc.CandidatePairChangeEvent: org.webrtc.IceCandidate remote
androidx.window.embedding.SplitRule$Api30Impl: androidx.window.embedding.SplitRule$Api30Impl INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String description
org.webrtc.AndroidVideoDecoder: java.lang.String MEDIA_FORMAT_KEY_CROP_RIGHT
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
androidx.window.layout.WindowInfoTracker$Companion: java.lang.String TAG
org.webrtc.EncodedImage$Builder: java.nio.ByteBuffer buffer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLORIZED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TEXT
com.cloudwebrtc.webrtc.R$styleable: int GradientColorItem_android_offset
androidx.appcompat.widget.AppCompatSpinner$SavedState: android.os.Parcelable$Creator CREATOR
org.webrtc.voiceengine.WebRtcAudioTrack: org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback errorCallbackOld
org.webrtc.DataChannel$Init: int maxRetransmitTimeMs
com.cloudwebrtc.webrtc.R$style: int TextAppearance_Compat_Notification
com.cloudwebrtc.webrtc.R$id: int tag_on_apply_window_listener
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer day
kotlin.jvm.internal.CallableReference: java.lang.Object receiver
com.cloudwebrtc.webrtc.R$attr: int clearTop
com.dexterous.flutterlocalnotifications.models.PersonDetails: com.dexterous.flutterlocalnotifications.models.IconSource iconBitmapSource
com.cloudwebrtc.webrtc.R$drawable: int notification_bg_low_normal
org.webrtc.IceCandidate: java.lang.String sdp
org.webrtc.GlGenericDrawer: int inPosLocation
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle BigText
com.google.android.gms.internal.measurement.zzek: boolean zzj
com.cloudwebrtc.webrtc.R$id: int androidx_window_activity_scope
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String METHOD_CHANNEL
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DAY
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.VideoCodecMimeType: java.lang.String mimeType
com.google.android.gms.wallet.CardInfo: android.os.Parcelable$Creator CREATOR
org.webrtc.ContextUtils: java.lang.String TAG
org.webrtc.GlGenericDrawer: java.nio.FloatBuffer FULL_RECTANGLE_TEXTURE_BUFFER
androidx.window.layout.EmptyDecorator: androidx.window.layout.EmptyDecorator INSTANCE
org.webrtc.CandidatePairChangeEvent: org.webrtc.IceCandidate local
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOffMs
androidx.window.layout.HardwareFoldingFeature: androidx.window.core.Bounds featureBounds
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType YUV
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_1
androidx.window.layout.SidecarCompat: java.util.Map windowListenerRegisteredContexts
org.webrtc.Priority: int VERY_LOW
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzaf
androidx.window.R$attr: int splitMinWidth
org.webrtc.HardwareVideoEncoder: int VIDEO_AVC_LEVEL_3
org.webrtc.AndroidVideoDecoder: int stride
org.webrtc.EglRenderer: boolean usePresentationTimeStamp
org.webrtc.voiceengine.WebRtcAudioRecord: org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback errorCallback
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PAYLOAD
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
kotlinx.coroutines.DefaultExecutor: int debugStatus
com.cloudwebrtc.webrtc.CameraEventsHandler: java.lang.String TAG
kotlin.jvm.internal.FunctionReference: int arity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String icon
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_RED
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_ONLY
org.webrtc.EglBase14Impl: android.opengl.EGLSurface eglSurface
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int rotatedFrameWidth
org.webrtc.CameraCapturer: int MAX_OPEN_CAMERA_ATTEMPTS
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
com.cloudwebrtc.webrtc.GetUserMediaImpl: org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_RECV
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer second
com.google.android.gms.auth.api.signin.SignInAccount: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzei: com.google.android.gms.internal.measurement.zzkm zzf
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUB_TEXT
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ID
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType RELAY
org.webrtc.voiceengine.WebRtcAudioEffects: boolean shouldEnableNs
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean hideExpandedLargeIcon
com.google.android.gms.internal.measurement.zzer: java.lang.String zzg
com.google.android.gms.internal.wallet.zzl: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec audioEncoder
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer groupAlertBehavior
org.webrtc.NV12Buffer: java.nio.ByteBuffer buffer
org.webrtc.MediaStream: java.util.List audioTracks
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.CryptoOptions cryptoOptions
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
com.google.android.gms.internal.measurement.zzgt: int zzd
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Daily
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzo
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate wifiDirectManagerDelegate
org.webrtc.EglBase$Context: long NO_CONTEXT
org.webrtc.StatsReport: org.webrtc.StatsReport$Value[] values
org.webrtc.PeerConnectionFactory$Options: boolean disableNetworkMonitor
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type type
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference BALANCED
org.webrtc.PeerConnectionFactory$InitializationOptions: java.lang.String fieldTrials
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $VALUES
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.plugin.common.BinaryMessenger messenger
org.webrtc.VideoEncoder$RateControlParameters: double framerateFps
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String NAME
org.webrtc.Camera1Session: android.hardware.Camera$CameraInfo info
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Options options
org.webrtc.YuvConverter$ShaderCallbacks: float[] vCoeffs
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer this$0
org.webrtc.audio.WebRtcAudioRecord: int BUFFERS_PER_SECOND
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mTriggeredEventName
org.webrtc.VideoEncoder$Settings: int numberOfCores
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderQuery
org.webrtc.HardwareVideoEncoder: int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_9
com.google.android.gms.internal.measurement.zzei: com.google.android.gms.internal.measurement.zzei zza
org.webrtc.DynamicBitrateAdjuster: double timeSinceLastAdjustmentMs
org.webrtc.RtpCapabilities$CodecCapability: org.webrtc.MediaStreamTrack$MediaType kind
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.EglBase$Context sharedContext
org.webrtc.EglBase$ConfigBuilder: boolean isRecordable
com.cloudwebrtc.webrtc.R$id: int right_icon
org.webrtc.RTCStatsReport: long timestampUs
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.NativeLibraryLoader nativeLibraryLoader
androidx.window.core.Version$bigInteger$2: androidx.window.core.Version this$0
com.google.android.gms.internal.measurement.zzgd: int zzC
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.concurrent.locks.ReentrantLock lock
org.webrtc.CameraCapturer: org.webrtc.CameraEnumerator cameraEnumerator
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend globalInstance
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor audioInterceptor
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int subtype
com.google.android.gms.internal.measurement.zzff: java.lang.String zzo
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread: boolean keepAlive
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer importance
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
org.webrtc.EglBase: int EGL_OPENGL_ES3_BIT
org.webrtc.VideoDecoder$DecodeInfo: boolean isMissingFrames
org.webrtc.Logging: boolean loggingEnabled
org.webrtc.EglRenderer$FrameListenerAndParams: org.webrtc.EglRenderer$FrameListener listener
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] $VALUES
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
androidx.window.R$styleable: int[] SplitPairFilter
org.webrtc.YuvConverter: org.webrtc.GlTextureFrameBuffer i420TextureFrameBuffer
org.webrtc.EglRenderer: org.webrtc.VideoFrame pendingFrame
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference DISABLED
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor inputSamplesInterceptor
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGL10 egl
org.webrtc.Camera1Session: org.webrtc.Camera1Session$SessionState state
org.webrtc.EncodedImage: org.webrtc.EncodedImage$FrameType frameType
org.webrtc.YuvConverter: org.webrtc.GlGenericDrawer drawer
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataUri
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatBigText
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarCompat$Companion Companion
org.webrtc.ContextUtils: android.content.Context applicationContext
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_android_ttcIndex
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List streamIds
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState RUNNING
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Byte
kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzg
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLContext eglContext
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.util.ArrayList lines
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] cachedEffects
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean fullScreenIntent
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType ERROR
org.webrtc.Camera1Session: org.webrtc.Histogram camera1StopTimeMsHistogram
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_5
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONGOING
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: int TIMER_PERIOD_IN_SECONDS
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: androidx.window.embedding.ExtensionEmbeddingBackend this$0
org.webrtc.audio.WebRtcAudioTrackUtils: java.lang.String TAG
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
com.cloudwebrtc.webrtc.R$attr: int splitRatio
com.cloudwebrtc.webrtc.R$styleable: int FontFamily_fontProviderSystemFontFamily
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map labelToSubtype
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat windowExtension
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzy
com.cloudwebrtc.webrtc.R$drawable: int notification_icon_background
com.cloudwebrtc.webrtc.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean showBadge
androidx.window.layout.DisplayCompatHelperApi28: androidx.window.layout.DisplayCompatHelperApi28 INSTANCE
com.cloudwebrtc.webrtc.R$id: int tag_state_description
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.audio.WebRtcAudioEffects: boolean shouldEnableAec
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer minute
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String URI
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.HandlerThread renderThread
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
org.webrtc.FileVideoCapturer: java.util.TimerTask tickTask
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String category
org.webrtc.Camera1Session: org.webrtc.Histogram camera1ResolutionHistogram
androidx.window.R$styleable: int ActivityFilter_activityAction
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaSource: long nativeSource
org.webrtc.Camera1Session: android.os.Handler cameraThreadHandler
org.webrtc.audio.JavaAudioDeviceModule$Builder: int audioSource
org.webrtc.HardwareVideoEncoder: org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory
com.cloudwebrtc.webrtc.R$styleable: int[] Capability
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATION_MESSAGING_STYLE_METHOD
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_5G
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_ETHERNET
com.google.android.gms.internal.measurement.zzfz: java.lang.String zze
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String AUDIO_ATTRIBUTES_USAGE
com.google.android.gms.internal.measurement.zzek: boolean zzl
com.google.android.gms.internal.wallet.zzn: android.os.Parcelable$Creator CREATOR
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread: boolean keepAlive
org.webrtc.EncodedImage: org.webrtc.RefCountDelegate refCountDelegate
com.google.android.gms.internal.measurement.zzgr: int zzd
com.google.android.gms.internal.measurement.zzei: boolean zzi
com.cloudwebrtc.webrtc.R$dimen: int compat_notification_large_icon_max_width
com.cloudwebrtc.webrtc.R$styleable: int SplitPairFilter_primaryActivityName
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: int resultCode
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NAME
org.webrtc.DynamicBitrateAdjuster: double BITRATE_ADJUSTMENT_MAX_SCALE
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_LOW_VALUE_WEIGHT
com.cloudwebrtc.webrtc.R$dimen: int compat_button_padding_vertical_material
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_DRAWABLE_RESOURCE_ERROR_MESSAGE
org.webrtc.HardwareVideoEncoder: boolean running
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.Logging$Severity loggableSeverity
com.cloudwebrtc.webrtc.R$drawable: int notification_bg_normal
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus LEVEL_EXCEEDED
org.webrtc.audio.WebRtcAudioRecord: byte[] emptyBytes
androidx.window.R$styleable: int SplitPairRule_clearTop
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType AV1
org.webrtc.voiceengine.WebRtcAudioRecord: org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback audioSamplesReadyCallback
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoderFactory primary
org.webrtc.MediaCodecUtils: java.lang.String NVIDIA_PREFIX
com.cloudwebrtc.webrtc.R$drawable: int notification_bg_low
org.webrtc.EglRenderer: java.lang.Runnable logStatisticsRunnable
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.lang.String LIBRARY_NAME
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
org.webrtc.Camera2Capturer: android.content.Context context
com.cloudwebrtc.webrtc.R$attr: int finishPrimaryWithSecondary
org.webrtc.Logging$TraceLevel: int level
org.webrtc.AndroidVideoDecoder: org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata renderedTextureMetadata
org.webrtc.SurfaceTextureHelper$1: boolean val$alignTimestamps
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters
org.webrtc.YuvConverter: org.webrtc.VideoFrameDrawer videoFrameDrawer
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_endX
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Daily
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelName
org.webrtc.IceCandidateErrorEvent: java.lang.String errorText
org.webrtc.FileVideoCapturer: java.lang.String TAG
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.os.Handler handler
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String USES_CHRONOMETER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showWhen
com.google.android.gms.internal.measurement.zzgk: int zze
org.webrtc.StatsReport$Value: java.lang.String value
com.google.android.gms.internal.auth.zzhr: com.google.android.gms.internal.auth.zzhr zzb
org.webrtc.VideoProcessor$FrameAdaptationParameters: boolean drop
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType VP9
org.webrtc.ThreadUtils$3: java.util.concurrent.Callable val$callable
org.webrtc.TextureBufferImpl: org.webrtc.YuvConverter yuvConverter
com.google.android.gms.internal.wallet.zzr: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
org.webrtc.NetworkChangeDetector$NetworkInformation: long handle
org.webrtc.PeerConnection$RTCConfiguration: int audioJitterBufferMaxPackets
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_NONE
org.webrtc.audio.LowLatencyAudioBufferManager: java.lang.String TAG
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: android.app.Activity activity
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$Companion Companion
com.cloudwebrtc.webrtc.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType UNKNOWN
org.webrtc.TextureBufferImpl: int id
io.flutter.embedding.engine.FlutterJNI: java.lang.String observatoryUri
androidx.window.embedding.EmbeddingCompat: boolean DEBUG
com.cloudwebrtc.webrtc.R$id: int action_image
com.google.android.gms.internal.measurement.zzfx: com.google.android.gms.internal.measurement.zzfx zza
org.webrtc.NV21Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.AndroidVideoDecoder: int DEQUEUE_INPUT_TIMEOUT_US
org.webrtc.H264Utils: java.lang.String H264_FMTP_PACKETIZATION_MODE
android.support.v4.media.MediaBrowserCompat$MediaItem: android.os.Parcelable$Creator CREATOR
org.webrtc.DataChannel$Buffer: boolean binary
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_BIG_PICTURE_ERROR_CODE
org.webrtc.AndroidVideoDecoder$FrameInfo: int rotation
org.webrtc.RtpTransceiver$RtpTransceiverDirection: int nativeIndex
org.webrtc.Camera1Session: java.lang.String TAG
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: java.lang.String nativeLibraryName
androidx.window.layout.SidecarCompat$FirstAttachAdapter: androidx.window.layout.SidecarCompat sidecarCompat
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long when
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: int sampleRate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_ALPHA
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.WebRtcAudioEffects effects
androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean important
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INITIALIZE_METHOD
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key
com.google.android.gms.wallet.PaymentMethodToken: android.os.Parcelable$Creator CREATOR
org.webrtc.RtpParameters: java.util.List codecs
org.webrtc.VideoFrameBufferType: int I422
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzkm zzf
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR
com.cloudwebrtc.webrtc.R$styleable: int[] FontFamilyFont
com.cloudwebrtc.webrtc.R$layout: int notification_action
com.cloudwebrtc.webrtc.R$id: int tag_accessibility_heading
org.webrtc.RtpParameters$Codec: java.util.Map parameters
androidx.window.layout.SidecarCompat: java.util.Map componentCallbackMap
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean setAsGroupSummary
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: java.lang.String THREAD_NAME
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataV
com.google.android.gms.internal.measurement.zzgd: int zzI
com.cloudwebrtc.webrtc.R$dimen: int compat_button_inset_vertical_material
org.webrtc.TimestampAligner: long nativeTimestampAligner
org.webrtc.HardwareVideoEncoder: java.util.concurrent.BlockingDeque outputBuilders
com.cloudwebrtc.webrtc.R$style: int TextAppearance_Compat_Notification_Info
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils$1: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
com.google.android.gms.internal.measurement.zzem: java.lang.String zzh
com.google.android.gms.internal.measurement.zzgy: com.google.android.gms.internal.measurement.zzkm zzf
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.EglBase14$Context sharedContext
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
org.webrtc.VideoSource: org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource
org.webrtc.voiceengine.WebRtcAudioRecord: int BUFFERS_PER_SECOND
org.webrtc.audio.WebRtcAudioRecord: int AUDIO_RECORD_START
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.VideoEncoderFactory videoEncoderFactory
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: org.webrtc.MediaStream val$mediaStream
org.webrtc.PeerConnectionFactory$ThreadInfo: java.lang.Thread thread
com.google.android.gms.internal.measurement.zzfx: int zzd
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_WEEKLY_AT_DAY_AND_TIME_METHOD
com.cloudwebrtc.webrtc.R$attr: int activityAction
com.google.android.gms.internal.measurement.zzek: int zze
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.lang.String TAG
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] $VALUES
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry entry
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataMimeType
com.google.android.gms.internal.measurement.zzfd: boolean zzg
com.google.android.gms.internal.measurement.zzgd: boolean zzF
androidx.window.layout.SidecarAdapter: androidx.window.layout.SidecarAdapter$Companion Companion
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type RGB
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.MethodCallHandlerImpl methodCallHandler
org.webrtc.SurfaceViewRenderer: org.webrtc.SurfaceEglRenderer eglRenderer
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String GROUP_ID
org.webrtc.audio.VolumeLogger: int TIMER_PERIOD_IN_SECONDS
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String id
org.webrtc.voiceengine.WebRtcAudioManager: int outputBufferSize
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_MESSAGE
com.google.android.gms.internal.measurement.zzfx: long zzg
org.webrtc.CameraCapturer: int OPEN_CAMERA_TIMEOUT
com.cloudwebrtc.webrtc.R$dimen: int compat_notification_large_icon_max_height
org.webrtc.GlTextureFrameBuffer: int textureId
androidx.window.core.Version: androidx.window.core.Version$Companion Companion
org.webrtc.YuvConverter$ShaderCallbacks: int xUnitLoc
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.MediaStream mediaStream
com.google.android.gms.internal.auth.zzdp: int zza
org.webrtc.H264Utils: org.webrtc.VideoCodecInfo DEFAULT_H264_BASELINE_PROFILE_CODEC
org.webrtc.VideoEncoder$Settings: int numberOfSimulcastStreams
org.webrtc.YuvConverter$ShaderCallbacks: float[] uCoeffs
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy ENABLED
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_android_fontVariationSettings
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableVibration
com.google.android.gms.internal.measurement.zzgd: int zzg
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
org.webrtc.audio.JavaAudioDeviceModule: java.lang.String TAG
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType$Companion Companion
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$FrameType frameType
org.webrtc.NetworkMonitorAutoDetect: java.lang.String TAG
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CONNECTING
org.webrtc.PeerConnection$RTCConfiguration: boolean surfaceIceCandidatesOnIceTransportTypeChanged
org.webrtc.HardwareVideoEncoder: long forcedKeyFrameNs
org.webrtc.PeerConnection$RTCConfiguration: boolean audioJitterBufferFastAccelerate
android.support.v4.media.session.PlaybackStateCompat$CustomAction: android.os.Parcelable$Creator CREATOR
org.webrtc.EncodedImage$Builder: java.lang.Runnable releaseCallback
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: androidx.window.layout.WindowLayoutInfo lastKnownValue
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
com.google.android.gms.internal.measurement.zzfj: com.google.android.gms.internal.measurement.zzfj zza
com.cloudwebrtc.webrtc.R$id: int tag_accessibility_pane_title
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection mediaProjection
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_WARNING
org.webrtc.JavaI420Buffer: int strideY
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String[] BLACKLISTED_AEC_MODELS
org.webrtc.Camera1Session: org.webrtc.CameraSession$Events events
com.google.android.gms.internal.measurement.zzet: com.google.android.gms.internal.measurement.zzet zza
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String STOP_FOREGROUND_SERVICE
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection RECV_ONLY
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String name
org.webrtc.DataChannel$Init: boolean negotiated
org.webrtc.EglRenderer: java.lang.Object fpsReductionLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_ON_MS
org.webrtc.Camera2Session: android.hardware.camera2.CameraManager cameraManager
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND
org.webrtc.Camera2Enumerator: android.hardware.camera2.CameraManager cameraManager
com.google.android.gms.internal.measurement.zzek: com.google.android.gms.internal.measurement.zzer zzi
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.media.AudioAttributes audioAttributes
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String INPUTS
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
org.webrtc.EglRenderer: org.webrtc.VideoFrameDrawer frameDrawer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map localTracks
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack primaryActivityStack
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.FecControllerFactoryFactoryInterface fecControllerFactoryFactory
org.webrtc.PeerConnection$RTCConfiguration: boolean disableIPv6OnWifi
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer number
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean permissionRequestInProgress
com.google.android.gms.internal.measurement.zzgr: com.google.android.gms.internal.measurement.zzkm zzf
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: boolean isScreenCapture
org.webrtc.GlGenericDrawer: java.lang.String DEFAULT_VERTEX_SHADER_STRING
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.EventChannel eventChannel
kotlinx.coroutines.scheduling.LimitingDispatcher: int inFlightTasks
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticNetworkThread
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.Loggable loggable
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.cloudwebrtc.webrtc.audio.AudioSwitchManager instance
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] audioOutputBuffers
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_OFF_MS
com.cloudwebrtc.webrtc.record.FrameCapturer: org.webrtc.VideoTrack videoTrack
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.content.Context applicationContext
com.google.android.gms.internal.measurement.zzgd: boolean zzZ
org.webrtc.IceCandidate: int sdpMLineIndex
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor: int MODULE_VERSION
kotlinx.coroutines.InvokeOnCancelling: int _invoked
com.google.android.gms.internal.measurement.zzgy: double zzj
org.webrtc.MediaStreamTrack$MediaType: int nativeIndex
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String ID
com.google.android.gms.common.internal.safeparcel.SafeParcelable: java.lang.String NULL
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_HEIGHT
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState STOPPED
com.cloudwebrtc.webrtc.R$id: int forever
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_ALPHA
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents Time
androidx.window.R$styleable: int[] ActivityFilter
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$KeyType keyType
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VISIBILITY
androidx.appcompat.widget.Toolbar$SavedState: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgp: com.google.android.gms.internal.measurement.zzkm zzd
com.google.android.gms.internal.measurement.zzfr: int zzd
io.flutter.plugin.platform.SingleViewPresentation: java.lang.Object createParams
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useHardwareAcousticEchoCanceler
org.webrtc.voiceengine.WebRtcAudioManager: int DEFAULT_FRAME_PER_BUFFER
org.webrtc.RtpSender: boolean ownsTrack
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent placeholderIntent
org.webrtc.AndroidVideoDecoder: android.view.Surface surface
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics PLAN_B
com.google.android.gms.internal.measurement.zzff: long zze
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_3G
org.webrtc.CameraCapturer$7: org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler
androidx.window.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
org.webrtc.audio.WebRtcAudioRecord: boolean microphoneMute
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_WIFI
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: kotlin.jvm.functions.Function2 audioDeviceChangeListener
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzE
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLConfig eglContextConfig
com.google.android.gms.internal.measurement.zzgb: com.google.android.gms.internal.measurement.zzgb zza
org.webrtc.VideoEncoder$Capabilities: boolean lossNotification
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation VERTICAL
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$Companion Companion
org.webrtc.HardwareVideoEncoder$YuvFormat: org.webrtc.HardwareVideoEncoder$YuvFormat[] $VALUES
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_MODULECALL
com.cloudwebrtc.webrtc.R$id: int info
org.webrtc.SurfaceTextureHelper: boolean isQuitting
org.webrtc.VideoSource$AspectRatio: int height
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$PortPrunePolicy turnPortPrunePolicy
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Activity mainActivity
org.webrtc.FileVideoCapturer$VideoReaderY4M: long videoStart
org.webrtc.RtpParameters$Encoding: int networkPriority
androidx.activity.result.IntentSenderRequest: android.os.Parcelable$Creator CREATOR
org.webrtc.CameraVideoCapturer$CameraStatistics: int frameCount
androidx.window.layout.SidecarCompat$DistinctElementCallback: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface callbackInterface
org.webrtc.H264Utils: java.lang.String H264_CONSTRAINED_HIGH_3_1
kotlin.jvm.internal.FunctionReference: int flags
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: io.flutter.plugin.common.MethodChannel channel
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int channelCount
org.webrtc.RendererCommon$1: int[] $SwitchMap$org$webrtc$RendererCommon$ScalingType
org.webrtc.MediaCodecVideoDecoderFactory: java.lang.String TAG
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: android.os.ResultReceiver resultReceiver
com.cloudwebrtc.webrtc.DataChannelObserver: java.lang.String flutterId
org.webrtc.voiceengine.WebRtcAudioTrack: int usageAttribute
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_AUDIO
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_HIGH_VALUE_WEIGHT
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String summaryText
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.lang.String TAG
org.webrtc.NetworkMonitor$1: org.webrtc.NetworkMonitor this$0
org.webrtc.RtpParameters: java.util.List headerExtensions
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatSummaryText
org.webrtc.NetworkMonitor$2: java.lang.String val$fieldTrialsString
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_splitMinWidth
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: boolean isFirstFrameRendered
org.webrtc.NetworkMonitorAutoDetect$NetworkState: boolean connected
com.google.android.gms.internal.measurement.zzgd: boolean zzz
org.webrtc.CameraCapturer$8: org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler
org.webrtc.EglRenderer: java.lang.String TAG
org.webrtc.PeerConnection$RTCConfiguration: boolean enableDscp
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean chronometerCountDown
com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.VideoDecoder$Settings: int height
org.webrtc.NetworkMonitor$2: org.webrtc.NetworkMonitor this$0
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: com.cloudwebrtc.webrtc.record.VideoFileRenderer videoFileRenderer
org.webrtc.AndroidVideoDecoder: java.lang.Thread outputThread
org.webrtc.RTCStats: long timestampUs
com.cloudwebrtc.webrtc.R$styleable: int SplitPlaceholderRule_placeholderActivityName
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: boolean mActive
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_splitLayoutDirection
org.webrtc.Camera2Session: org.webrtc.CameraSession$Events events
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState DISCONNECTED
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map mPeerConnectionObservers
com.cloudwebrtc.webrtc.R$styleable: int[] ActivityFilter
com.google.android.gms.internal.measurement.zzfd: java.lang.String zze
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy REQUIRE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
org.webrtc.RtpParameters$Rtcp: java.lang.String cname
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.TurnCustomizer turnCustomizer
org.webrtc.Predicate$2: org.webrtc.Predicate this$0
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$PeerConnection$PeerConnectionState
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback audioSamplesReadyCallback
com.cloudwebrtc.webrtc.R$drawable: int notification_bg_normal_pressed
com.cloudwebrtc.webrtc.R$attr: int fontProviderPackage
org.webrtc.RtpCapabilities$CodecCapability: java.util.Map parameters
org.webrtc.VideoFileRenderer: java.nio.ByteBuffer outputFrameBuffer
org.webrtc.VideoFileRenderer: java.lang.String outputFileName
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean isRunning
org.webrtc.MediaStreamTrack: java.lang.String VIDEO_TRACK_KIND
org.webrtc.SurfaceViewRenderer: boolean enableFixedSize
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String INDETERMINATE
org.webrtc.CameraCapturer$8: java.lang.String val$cameraName
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
com.cloudwebrtc.webrtc.R$dimen: int notification_action_text_size
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState IN_PROGRESS
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatSummaryText
org.webrtc.EncodedImage$Builder: long captureTimeNs
com.google.android.gms.internal.measurement.zzei: int zze
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_NOTIFICATION_REPEAT_FREQUENCY
org.webrtc.PeerConnection$RTCConfiguration: boolean suspendBelowMinBitrate
com.google.android.gms.internal.measurement.zzgd: int zzK
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONLY_ALERT_ONCE
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzkm zzG
org.webrtc.RtpParameters$Encoding: java.lang.Double scaleResolutionDownBy
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_PROFILE_LEVEL_ID
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ACTIONS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: long[] vibrationPattern
org.webrtc.CameraCapturer$7: org.webrtc.CameraCapturer this$0
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DateAndTime
org.webrtc.audio.WebRtcAudioTrack: int CALLBACK_BUFFER_SIZE_MS
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String username
com.google.android.gms.wallet.MaskedWallet: android.os.Parcelable$Creator CREATOR
org.webrtc.audio.LowLatencyAudioBufferManager: int bufferIncreaseCounter
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$AdapterType networkPreference
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
com.google.android.gms.internal.measurement.zzff: java.lang.String zzf
org.webrtc.RTCStatsReport: java.util.Map stats
androidx.window.core.Version: kotlin.Lazy bigInteger$delegate
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_27
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
com.cloudwebrtc.webrtc.R$id: int right_side
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mTriggeredTimestamp
org.webrtc.SurfaceViewRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_29
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_NOTIFICATION
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceUnwritableMinChecks
com.google.android.gms.internal.measurement.zzfb: com.google.android.gms.internal.measurement.zzfb zza
com.google.android.gms.internal.measurement.zzet: boolean zzh
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CATEGORY
com.google.android.gms.internal.measurement.zzfn: com.google.android.gms.internal.measurement.zzfn zza
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_FPS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Context applicationContext
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_3G
org.webrtc.HardwareVideoEncoder$BusyCount: int count
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState IDLE
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$Settings streamSettings
org.webrtc.EglRenderer: java.util.ArrayList frameListeners
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.WeakHashMap activityWindowLayoutInfo
org.webrtc.TextureBufferImpl: int unscaledHeight
androidx.window.core.Bounds: int bottom
org.webrtc.Camera1Session: boolean captureToTexture
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicReference audioSourceMatchesRecordingSessionRef
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector$ConnectionType currentConnectionType
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer screencastMinBitrate
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType String
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter sidecarAdapter
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Media
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String contentTitle
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean indeterminate
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] $VALUES
androidx.window.layout.SidecarWindowBackend: boolean DEBUG
org.webrtc.RtpParameters: org.webrtc.RtpParameters$DegradationPreference degradationPreference
org.webrtc.RendererCommon$VideoLayoutMeasure: float visibleFractionMismatchOrientation
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INPUT
org.webrtc.Camera2Session: org.webrtc.Histogram camera2ResolutionHistogram
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelDescription
kotlinx.coroutines.DispatchedCoroutine: int _decision
org.webrtc.ThreadUtils$4: java.lang.Runnable val$runner
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_font
com.google.android.gms.internal.measurement.zzkf: int zzd
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long calledAt
androidx.window.embedding.SplitPairRule: java.util.Set filters
com.cloudwebrtc.webrtc.R$styleable: int ColorStateListItem_android_color
org.webrtc.RtcCertificatePem: java.lang.String privateKey
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_CRITICAL
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean encoderStarted
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_30
com.google.android.gms.internal.measurement.zzer: boolean zzf
org.webrtc.DataChannel: long nativeObserver
org.webrtc.Predicate$1: org.webrtc.Predicate this$0
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
androidx.window.R$attr: int clearTop
org.webrtc.CameraCapturer: int openAttemptsRemaining
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson gson
org.webrtc.CryptoOptions$Srtp: org.webrtc.CryptoOptions this$0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread: org.webrtc.voiceengine.WebRtcAudioRecord this$0
androidx.customview.view.AbsSavedState: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.WeakHashMap mActivityWindowLayoutInfo
org.webrtc.RtpParameters$Codec: org.webrtc.MediaStreamTrack$MediaType kind
org.webrtc.AndroidVideoDecoder: org.webrtc.MediaCodecWrapper codec
org.webrtc.VideoFrameBufferType: int I420A
com.cloudwebrtc.webrtc.R$id: int actions
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus FALLBACK_SOFTWARE
com.google.android.gms.internal.auth.zzeu: java.util.Map zzb
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetworkControllerFactoryFactory networkControllerFactoryFactory
org.webrtc.RtpParameters$Encoding: java.lang.Integer numTemporalLayers
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.view.WindowManager windowManager
org.webrtc.HardwareVideoEncoder$YuvFormat: org.webrtc.HardwareVideoEncoder$YuvFormat I420
org.webrtc.voiceengine.WebRtcAudioManager: int nativeChannels
org.webrtc.Camera1Session: long constructionTimeNs
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$attr: int queryPatterns
com.google.android.gms.wallet.wobs.LabelValue: android.os.Parcelable$Creator CREATOR
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] $VALUES
com.cloudwebrtc.webrtc.R$id: int icon_group
org.webrtc.VideoSource: org.webrtc.VideoProcessor videoProcessor
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: org.webrtc.VideoCapturer capturer
org.webrtc.Camera2Session: android.hardware.camera2.CameraDevice cameraDevice
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: java.lang.String TAG
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_2G
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap
org.webrtc.MediaCodecUtils: java.lang.String TAG
org.webrtc.RtpSender: org.webrtc.MediaStreamTrack cachedTrack
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ID
org.webrtc.GlGenericDrawer: java.lang.String INPUT_VERTEX_COORDINATE_NAME
com.cloudwebrtc.webrtc.DataChannelObserver: java.util.ArrayList eventQueue
com.cloudwebrtc.webrtc.BuildConfig: java.lang.String BUILD_TYPE
org.webrtc.NetworkMonitorAutoDetect: boolean isRegistered
org.webrtc.RTCStats: java.lang.String id
org.webrtc.audio.WebRtcAudioTrack: java.nio.ByteBuffer byteBuffer
kotlin.jvm.internal.CallableReference: java.lang.String signature
org.webrtc.FramerateBitrateAdjuster: int DEFAULT_FRAMERATE_FPS
androidx.activity.result.ActivityResult: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzj
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus TIMEOUT
org.webrtc.EglRenderer: android.os.Handler renderThreadHandler
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PENDING_NOTIFICATION_REQUESTS_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHRONOMETER_COUNT_DOWN
org.webrtc.audio.WebRtcAudioRecord: int audioSource
org.webrtc.RtpParameters$Rtcp: boolean reducedSize
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_android_fontStyle
org.webrtc.voiceengine.WebRtcAudioTrack: boolean DEBUG
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzL
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _width
com.cloudwebrtc.webrtc.R$attr: int font
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_PROGRESS
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State INITIALIZING
com.google.android.gms.internal.measurement.zzfz: com.google.android.gms.internal.measurement.zzfn zzg
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: android.content.Context applicationContext
com.cloudwebrtc.webrtc.R$style: int TextAppearance_Compat_Notification_Time
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.nio.channels.FileChannel mediaFileChannel
com.cloudwebrtc.webrtc.record.FrameCapturer: java.io.File file
org.webrtc.EglBase$ConfigBuilder: boolean hasAlphaChannel
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int overlayInsetTypes
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mTimedOutEventName
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_BLUE
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingAdapter adapter
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] $VALUES
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATION_MESSAGING_STYLE_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer ledColor
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
org.webrtc.voiceengine.WebRtcAudioManager: boolean lowLatencyInput
org.webrtc.EglBase10Impl: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean colorized
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_TAG
org.webrtc.voiceengine.WebRtcAudioManager: boolean hardwareAGC
org.webrtc.DataChannel$Init: int id
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Companion Companion
org.webrtc.SurfaceTextureHelper$1: java.lang.String val$threadName
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean requestVPN
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask: int maxRingVolume
com.google.android.gms.internal.measurement.zzek: java.lang.String zzf
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource ByteArray
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PAYLOAD
androidx.window.R$attr: int splitLayoutDirection
com.cloudwebrtc.webrtc.R$color: int ripple_material_light
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int height
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_gradientRadius
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_31
org.webrtc.NativeAndroidVideoTrackSource: long nativeAndroidVideoTrackSource
org.webrtc.audio.WebRtcAudioRecord: int audioFormat
com.google.android.gms.wallet.OfferWalletObject: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$styleable: int SplitPairFilter_secondaryActivityAction
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_BLUE
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: java.util.Timer timer
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
com.cloudwebrtc.webrtc.R$layout: int notification_template_part_chronometer
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int underlyingNetworkTypeForVpn
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_GROUP_METHOD
com.cloudwebrtc.webrtc.R$styleable: int FontFamilyFont_android_font
org.webrtc.PeerConnectionDependencies: org.webrtc.SSLCertificateVerifier sslCertificateVerifier
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String RESULT_RECEIVER
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int underlyingNetworkSubtypeForVpn
org.webrtc.VideoFrameBufferType: int NATIVE
androidx.window.R$attr: int finishSecondaryWithPrimary
org.webrtc.audio.VolumeLogger$LogVolumeTask: org.webrtc.audio.VolumeLogger this$0
com.google.android.gms.wallet.wobs.LabelValueRow: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec encoder
com.google.android.gms.internal.measurement.zzgd: long zzj
com.cloudwebrtc.webrtc.record.VideoFileRenderer: long presTime
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState CLOSED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LINES
com.google.android.gms.internal.measurement.zzer: java.lang.String zzh
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_UNKNOWN
com.google.android.gms.internal.measurement.zzgd: int zzQ
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataU
org.webrtc.Camera1Session: org.webrtc.Histogram camera1StartTimeMsHistogram
com.cloudwebrtc.webrtc.R$styleable: int SplitPairRule_clearTop
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$color: int secondary_text_default_material_light
com.google.android.gms.wallet.zzae: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzet: java.lang.String zzf
androidx.window.R$styleable: int SplitPairFilter_primaryActivityName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean channelShowBadge
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoEncoderFactory primary
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.Object mValue
org.webrtc.SurfaceTextureHelper: boolean isTextureInUse
org.webrtc.RtpCapabilities$HeaderExtensionCapability: boolean preferredEncrypted
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTrackerDecorator decorator
org.webrtc.VideoCodecInfo: int payload
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: java.util.Map registeredPlugins
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String DESCRIPTION
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: int audioFormat
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer hour
org.webrtc.VideoEncoder$EncodeInfo: org.webrtc.EncodedImage$FrameType[] frameTypes
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoCodecInfo info
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State FLAT
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_23
com.google.android.gms.internal.measurement.zzgr: com.google.android.gms.internal.measurement.zzgr zza
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String SHOWS_USER_INTERFACE
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Boolean
com.google.android.gms.internal.measurement.zzgg: int zze
com.cloudwebrtc.webrtc.R$id: int line3
org.webrtc.RtpParameters$Encoding: boolean active
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String bigText
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String WHEN
com.cloudwebrtc.webrtc.R$id: int tag_unhandled_key_listeners
org.webrtc.FileVideoCapturer$VideoReaderY4M: int FRAME_DELIMETER_LENGTH
org.webrtc.NetworkMonitorAutoDetect: java.lang.String wifiSSID
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetectorFactory networkChangeDetectorFactory
com.google.android.gms.internal.measurement.zzgd: int zzs
com.google.android.gms.internal.measurement.zzer: java.lang.String zzi
org.webrtc.DataChannel$Buffer: java.nio.ByteBuffer data
com.google.android.gms.internal.measurement.zzei: boolean zzh
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUTO_CANCEL
org.webrtc.Logging: org.webrtc.Loggable loggable
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type HINGE
org.webrtc.VideoFileRenderer$1: org.webrtc.VideoFileRenderer this$0
com.cloudwebrtc.webrtc.R$id: int tag_window_insets_animation_callback
com.google.android.gms.internal.measurement.zzfb: java.lang.String zze
org.webrtc.ThreadUtils$1: java.lang.Thread val$thread
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.Handler audioThreadHandler
org.webrtc.HardwareVideoEncoder: java.lang.String codecName
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow
com.google.android.gms.measurement.internal.zzkw: android.os.Parcelable$Creator CREATOR
org.webrtc.ScreenCapturerAndroid: android.hardware.display.VirtualDisplay virtualDisplay
org.webrtc.voiceengine.WebRtcAudioEffects: boolean DEBUG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer priority
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean includeOtherUidNetworks
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int minStartBitrateBps
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_8
com.google.android.gms.internal.measurement.zzei: com.google.android.gms.internal.measurement.zzkm zzg
com.google.android.gms.internal.measurement.zzek: int zzd
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int rotatedFrameHeight
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: android.content.Context context
com.google.android.gms.wallet.CardRequirements: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _rotation
org.webrtc.Camera1Session: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
com.google.android.gms.internal.measurement.zzgd: long zzU
org.webrtc.HardwareVideoEncoder: int adjustedBitrate
org.webrtc.voiceengine.WebRtcAudioTrack: int CALLBACK_BUFFER_SIZE_MS
org.webrtc.RtpParameters$Encoding: java.lang.Integer minBitrateBps
org.webrtc.audio.WebRtcAudioTrack: long nativeAudioTrack
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHORTCUT_ID
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_24
org.webrtc.CameraCapturer$2: org.webrtc.CameraCapturer this$0
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.VolumeLogger volumeLogger
com.google.android.gms.internal.measurement.zzft: java.lang.String zzf
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CONNECTED
org.webrtc.DataChannel: long nativeDataChannel
org.webrtc.Camera2Session: android.content.Context applicationContext
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $VALUES
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.io.File recordFile
android.support.v4.media.MediaMetadataCompat: android.os.Parcelable$Creator CREATOR
org.webrtc.NativeLibrary: boolean libraryLoaded
org.webrtc.audio.WebRtcAudioRecord: int DEFAULT_AUDIO_FORMAT
org.webrtc.NetworkChangeDetector$NetworkInformation: java.lang.String name
org.webrtc.TextureBufferImpl: org.webrtc.RefCountDelegate refCountDelegate
com.google.android.gms.internal.measurement.zzgt: com.google.android.gms.internal.measurement.zzkm zze
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_EXCEPTION
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.GetUserMediaImpl getUserMediaImpl
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String name
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState PENDING
com.cloudwebrtc.webrtc.record.VideoFileRenderer: long videoFrameStart
com.cloudwebrtc.webrtc.R$styleable: int ActivityRule_alwaysExpand
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzkk zzT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer iconResourceId
org.webrtc.ThreadUtils$ThreadChecker: java.lang.Thread thread
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.lang.String Y4M_FRAME_DELIMETER
com.google.android.gms.internal.measurement.zzet: int zze
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
org.webrtc.ThreadUtils$3: org.webrtc.ThreadUtils$1CaughtException val$caughtException
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: boolean isRenderingPaused
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_26
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] $VALUES
android.support.v4.media.session.MediaSessionCompat$QueueItem: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_16
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: byte[] data
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$PeerConnection$SignalingState
org.webrtc.AndroidVideoDecoder: java.lang.String MEDIA_FORMAT_KEY_SLICE_HEIGHT
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
com.google.android.gms.internal.measurement.zzfb: com.google.android.gms.internal.measurement.zzkm zzf
org.webrtc.SurfaceTextureHelper: int oesTextureId
org.webrtc.EglRenderer$1: org.webrtc.EglRenderer this$0
org.webrtc.EncodedImage$Builder: int encodedHeight
org.webrtc.RtpParameters$Encoding: java.lang.Integer maxBitrateBps
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int outputFileHeight
org.webrtc.RendererCommon: float BALANCED_VISIBLE_FRACTION
com.google.android.gms.wallet.InstrumentInfo: android.os.Parcelable$Creator CREATOR
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord audioRecord
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetricsCalculatorCompat INSTANCE
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec$BufferInfo audioBufferInfo
org.webrtc.voiceengine.WebRtcAudioRecord: org.webrtc.voiceengine.WebRtcAudioEffects effects
org.webrtc.PeerConnection$IceServer$Builder: java.util.List tlsAlpnProtocols
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: android.os.Bundle mExpiredEventParams
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULED_NOTIFICATIONS
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
androidx.transition.ChangeBounds$7: androidx.transition.ChangeBounds$ViewBounds mViewBounds
org.webrtc.SurfaceViewRenderer: int surfaceHeight
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetricsCalculator$Companion Companion
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_12
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String REQUEST_CODE
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: java.lang.String val$id
androidx.window.embedding.SplitRule: float splitRatio
org.webrtc.audio.JavaAudioDeviceModule: int outputSampleRate
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity activity
androidx.window.core.Version: int major
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CONNECTED
org.webrtc.voiceengine.WebRtcAudioTrack: java.nio.ByteBuffer byteBuffer
org.webrtc.NV12Buffer: int sliceHeight
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.util.List preferredDeviceList
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker$Companion $$INSTANCE
com.google.android.gms.internal.measurement.zzfh: com.google.android.gms.internal.measurement.zzfh zza
org.webrtc.Metrics$HistogramInfo: java.util.Map samples
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatSummaryText
org.webrtc.AndroidVideoDecoder: int sliceHeight
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$BundlePolicy bundlePolicy
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int FRAME_RATE
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_DEBUG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String groupKey
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle splashScreenState
com.cloudwebrtc.webrtc.R$drawable: int notification_template_icon_bg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MATCH_DATE_TIME_COMPONENTS
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
org.webrtc.SurfaceEglRenderer: boolean isFirstFrameRendered
org.webrtc.VideoEncoder$Settings: int startBitrate
org.webrtc.RtpReceiver: long nativeObserver
org.webrtc.HardwareVideoEncoder: org.webrtc.BitrateAdjuster bitrateAdjuster
com.google.android.gms.internal.measurement.zzgk: com.google.android.gms.internal.measurement.zzkl zzf
com.google.android.gms.internal.measurement.zzff: int zzd
org.webrtc.RtpCapabilities: java.util.List codecs
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_OFFER
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: int fps
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioManager audioManager
org.webrtc.Camera2Session: org.webrtc.Histogram camera2StopTimeMsHistogram
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean isActive
org.webrtc.TextureBufferImpl: int width
com.cloudwebrtc.webrtc.GetUserMediaImpl: int CAPTURE_PERMISSION_REQUEST_CODE
com.google.android.gms.internal.auth.zzet: com.google.android.gms.internal.auth.zzep zzb
org.webrtc.Predicate$3: org.webrtc.Predicate this$0
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.RtcCertificatePem certificate
com.cloudwebrtc.webrtc.R$dimen: int notification_action_icon_size
androidx.window.embedding.SplitRule: int minWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_URI
androidx.window.embedding.SplitPairFilter: java.lang.String secondaryActivityIntentAction
org.webrtc.voiceengine.WebRtcAudioTrack: java.lang.String TAG
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation wifiP2pNetworkInfo
androidx.window.R$attr: int primaryActivityName
org.webrtc.HardwareVideoEncoder: long lastKeyFrameNs
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CALLBACK_HANDLE
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock globalLock
org.webrtc.audio.LowLatencyAudioBufferManager: int ticksUntilNextDecrease
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State OPEN
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLDisplay eglDisplay
org.webrtc.TextureBufferImpl: int unscaledWidth
org.webrtc.VideoFrameDrawer: float[] srcPoints
org.webrtc.JavaI420Buffer: org.webrtc.RefCountDelegate refCountDelegate
androidx.window.R$id: int androidx_window_activity_scope
com.google.android.gms.internal.measurement.zzfd: boolean zzf
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState FAILED
org.webrtc.Camera2Capturer: android.hardware.camera2.CameraManager cameraManager
org.webrtc.audio.WebRtcAudioTrack: int AUDIO_TRACK_START
androidx.core.widget.NestedScrollView$SavedState: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgm: java.lang.String zzg
org.webrtc.AndroidVideoDecoder: java.lang.Exception shutdownException
androidx.window.embedding.EmbeddingCompat: java.lang.String TAG
org.webrtc.VideoCodecInfo: java.lang.String H264_LEVEL_3_1
androidx.window.core.Version: java.lang.String VERSION_PATTERN_STRING
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: java.util.Set availableNetworks
org.webrtc.CameraCapturer: org.webrtc.CameraSession currentSession
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String scheduledDateTime
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int frameSizePixels
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy BALANCED
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation$Companion Companion
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzkm zzi
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
androidx.window.core.Version: androidx.window.core.Version VERSION_1_0
com.cloudwebrtc.webrtc.R$styleable: int[] ActivityRule
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController globalInstance
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND_SOURCE
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_WARNING
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useStereoInput
com.cloudwebrtc.webrtc.R$attr: int fontWeight
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean showsUserInterface
org.webrtc.PeerConnection$RTCConfiguration: boolean presumeWritableWhenFullyRelayed
com.google.android.gms.wallet.wobs.LoyaltyPoints: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_centerColor
org.webrtc.RtpCapabilities$HeaderExtensionCapability: java.lang.String uri
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_INFO
com.cloudwebrtc.webrtc.R$attr: int splitLayoutDirection
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode: org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode AUDIO_RECORD_START_EXCEPTION
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] $VALUES
org.webrtc.Camera2Session: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
com.google.android.gms.internal.measurement.zzgm: long zze
com.google.android.gms.common.internal.zzj: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ByteArray
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.cloudwebrtc.webrtc.R$styleable: int ColorStateListItem_lStar
com.google.android.gms.internal.measurement.zzgd: int zze
org.webrtc.NativeLibrary: java.lang.String TAG
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback audioTrackStateCallback
org.webrtc.RtpParameters$Codec: java.lang.String name
org.webrtc.CandidatePairChangeEvent: java.lang.String reason
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long timeoutAfter
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactory
org.webrtc.AndroidVideoDecoder: java.lang.String codecName
org.webrtc.VideoSource: java.lang.Object videoProcessorLock
org.webrtc.Camera1Session: boolean firstFrameReported
com.google.android.gms.wallet.PaymentDataRequest: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_DAILY_AT_TIME_METHOD
com.google.android.gms.internal.measurement.zzft: int zzd
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_VERBOSE
org.webrtc.CameraCapturer: org.webrtc.SurfaceTextureHelper surfaceHelper
org.webrtc.EncodedImage$Builder: int encodedWidth
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean getAllNetworksFromCache
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON_SOURCE
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType ADAPTER_TYPE_ANY
org.webrtc.voiceengine.WebRtcAudioTrack: boolean speakerMute
org.webrtc.voiceengine.WebRtcAudioUtils: int defaultSampleRateHz
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String GRANT_RESULTS
com.cloudwebrtc.webrtc.R$styleable: int GradientColor_android_endColor
androidx.window.layout.SidecarAdapter: java.lang.String TAG
org.webrtc.voiceengine.WebRtcAudioRecord: int audioSource
com.google.android.gms.internal.measurement.zzfx: float zzh
org.webrtc.CameraVideoCapturer$CameraStatistics: java.lang.String TAG
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.CameraVideoCapturer$CameraStatistics: int CAMERA_OBSERVER_PERIOD_MS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MAX_PROGRESS
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoFrameDrawer videoFrameDrawer
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzkm zzh
com.google.android.gms.wallet.FullWallet: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus MEMORY
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean muxerStarted
androidx.window.embedding.ActivityFilter: android.content.ComponentName componentName
org.webrtc.audio.WebRtcAudioTrack: int BITS_PER_SAMPLE
org.webrtc.HardwareVideoEncoder: int REQUIRED_RESOLUTION_ALIGNMENT
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_THRESHOLD
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticSignalingThread
com.cloudwebrtc.webrtc.R$id: int accessibility_custom_action_19
org.webrtc.PeerConnection$RTCConfiguration: boolean disableIpv6
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String title
com.cloudwebrtc.webrtc.R$styleable: int Capability_shortcutMatchRequired
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzad
org.webrtc.MediaStreamTrack: java.lang.String nativeGetId(long)
androidx.window.embedding.SplitController$Companion: SplitController$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.appcompat.widget.ActivityChooserView$InnerLayout: ActivityChooserView$InnerLayout(android.content.Context,android.util.AttributeSet)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)
org.webrtc.VideoEncoder$RateControlParameters: VideoEncoder$RateControlParameters(org.webrtc.VideoEncoder$BitrateAllocation,double)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
org.webrtc.RtpTransceiver: org.webrtc.MediaStreamTrack$MediaType getMediaType()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onCreateFailure(java.lang.String)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putBoolean(java.lang.String,boolean)
androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.cloudwebrtc.webrtc.R: R()
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$Buffer copyNV12ToI420Buffer(java.nio.ByteBuffer,int,int,int,int)
org.webrtc.voiceengine.WebRtcAudioRecord: boolean startRecording()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize(int,int,int)
com.yalantis.ucrop.view.TransformImageView: void setScaleType(android.widget.ImageView$ScaleType)
androidx.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)
org.webrtc.IceCandidate: IceCandidate(java.lang.String,int,java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void streamDispose(java.lang.String)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportImageTintMode()
androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
org.webrtc.VideoDecoder: java.lang.String getImplementationName()
okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
org.webrtc.MediaCodecWrapperFactory: org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String)
androidx.window.layout.WindowInfoTracker$Companion: WindowInfoTracker$Companion()
org.webrtc.VideoCodecStatus: VideoCodecStatus(java.lang.String,int,int)
org.webrtc.TextureBufferImpl$2: void onRetain(org.webrtc.TextureBufferImpl)
kotlin.jvm.internal.FunctionReference: int getArity()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void initialize(com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.internal.measurement.zzcl,long)
androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putString(java.lang.String,java.lang.String)
org.webrtc.voiceengine.WebRtcAudioRecord: void access$100(boolean)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void startRecordingToFile(java.lang.String,java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioChannel)
androidx.core.view.ViewCompat$Api17Impl: void setLayoutDirection(android.view.View,int)
org.webrtc.PeerConnection: void nativeSetLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State valueOf(java.lang.String)
androidx.window.core.Bounds: android.graphics.Rect toRect()
org.webrtc.CryptoOptions: CryptoOptions(boolean,boolean,boolean,boolean,org.webrtc.CryptoOptions$1)
org.webrtc.audio.WebRtcAudioTrack: int initPlayout(int,int,double)
org.webrtc.VideoDecoder$-CC: long $default$createNativeVideoDecoder(org.webrtc.VideoDecoder)
androidx.appcompat.widget.Toolbar: android.widget.TextView getTitleTextView()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathEnd()
org.webrtc.DataChannel: void dispose()
androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$KeyType getKeyType()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)
androidx.window.layout.WindowMetricsCalculator$-CC: androidx.window.layout.WindowMetricsCalculator getOrCreate()
org.webrtc.PeerConnection$Observer$-CC: void $default$onRemoveTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpReceiver)
org.webrtc.voiceengine.WebRtcAudioTrack: void nativeCacheDirectBufferAddress(java.nio.ByteBuffer,long)
org.webrtc.RendererCommon$VideoLayoutMeasure: RendererCommon$VideoLayoutMeasure()
org.webrtc.voiceengine.WebRtcAudioManager: boolean isProAudioSupported()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus release()
org.webrtc.PeerConnection$RtcpMuxPolicy: PeerConnection$RtcpMuxPolicy(java.lang.String,int)
org.webrtc.EglRenderer: void lambda$clearImage$6(float,float,float,float)
org.webrtc.SurfaceTextureHelper$2: void onRetain(org.webrtc.TextureBufferImpl)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableAes128Sha1_32CryptoCipher(boolean)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.google.android.gms.measurement.AppMeasurement: java.lang.String getAppInstanceId()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMinor()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
org.webrtc.CameraSession$Events: void onCameraClosed(org.webrtc.CameraSession)
androidx.appcompat.view.menu.ActionMenuItemView: void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder$ItemInvoker)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.util.List,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String,java.util.List,java.util.List)
org.webrtc.voiceengine.WebRtcAudioUtils: WebRtcAudioUtils()
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkPreference(long,org.webrtc.NetworkChangeDetector$ConnectionType,int)
org.webrtc.CameraEnumerationAndroid$2: int diff(java.lang.Object)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: AppCompatAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
org.webrtc.SurfaceTextureHelper: void forceFrame()
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)
org.webrtc.Camera2Session$CaptureSessionCallback: void lambda$onConfigured$0(org.webrtc.VideoFrame)
androidx.core.view.ViewCompat$Api16Impl: boolean hasOverlappingRendering(android.view.View)
org.webrtc.EglBase10Impl: void createSurface(android.view.Surface)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$NetworkState getCurrentNetworkState()
org.webrtc.PeerConnection$Observer$-CC: void $default$onIceCandidateError(org.webrtc.PeerConnection$Observer,org.webrtc.IceCandidateErrorEvent)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void handleStatsReport(org.webrtc.RTCStatsReport,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.WebRtcAudioRecord: boolean enableBuiltInAEC(boolean)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void surfaceCreated(android.graphics.SurfaceTexture)
org.webrtc.PeerConnection$PeerConnectionState: PeerConnection$PeerConnectionState(java.lang.String,int)
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
org.webrtc.Predicate: boolean test(java.lang.Object)
androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: byte[] getData()
org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.Camera2Session: org.webrtc.Histogram access$1800()
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: byte[] getData()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.models.NotificationDetails extractNotificationDetails(io.flutter.plugin.common.MethodChannel$Result,java.util.Map)
org.webrtc.EglRenderer: void setMirrorVertically(boolean)
org.webrtc.SurfaceTextureHelper: android.os.Handler getHandler()
org.webrtc.CameraCapturer$4: void onFirstFrameAvailable()
org.webrtc.VideoFileRenderer: void release()
org.webrtc.PeerConnectionFactory: long getNativeOwnedFactoryAndThreads()
org.webrtc.StatsReport: java.lang.String toString()
com.google.android.gms.wallet.FullWallet: FullWallet()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack createAudioTrackOnOreoOrHigher(int,int,int,android.media.AudioAttributes)
org.webrtc.DtmfSender: boolean canInsertDtmf()
org.webrtc.LibaomAv1Encoder: boolean isHardwareEncoder()
org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback: void onWebRtcAudioTrackInitError(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioTrack: boolean startPlayout()
org.webrtc.audio.WebRtcAudioManager: boolean isLowLatencyInputSupported(android.content.Context)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void checkSelfPermissions(boolean)
org.webrtc.voiceengine.WebRtcAudioUtils: void setDefaultSampleRateHz(int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceConnectionReceivingChange(boolean)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
androidx.window.layout.FoldingFeature$OcclusionType: FoldingFeature$OcclusionType(java.lang.String)
org.webrtc.CryptoOptions$SFrame: boolean getRequireFrameEncryption()
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$and(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.EglBase14Impl: void checkIsNotReleased()
org.webrtc.PeerConnection$IceServer: java.lang.String getUsername()
org.webrtc.DataChannel: long getNativeDataChannel()
androidx.window.core.Version: int hashCode()
org.webrtc.RtpParameters$Encoding: RtpParameters$Encoding(java.lang.String,boolean,double,int,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Double,java.lang.Long,boolean)
org.webrtc.MediaCodecUtils: boolean isHardwareAcceleratedQOrHigher(android.media.MediaCodecInfo)
androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStream getStreamForId(java.lang.String,java.lang.String)
io.objectbox.exception.NumericOverflowException: NumericOverflowException(java.lang.String)
org.webrtc.CameraCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void release()
androidx.core.view.ViewCompat$Api29Impl: android.view.View$AccessibilityDelegate getAccessibilityDelegate(android.view.View)
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportButtonTintList()
org.webrtc.SurfaceViewRenderer: void setScalingType(org.webrtc.RendererCommon$ScalingType)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
org.webrtc.Metrics$HistogramInfo: Metrics$HistogramInfo(int,int,int)
org.webrtc.Camera1Enumerator: java.util.List getSupportedFormats(int)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$SignalingState nativeSignalingState()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
org.webrtc.BaseBitrateAdjuster: void setTargets(int,double)
org.webrtc.PeerConnection: boolean nativeOldGetStats(org.webrtc.StatsObserver,long)
org.webrtc.YuvHelper: void nativeABGRToI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
androidx.core.graphics.drawable.DrawableCompat$Api19Impl: android.graphics.drawable.Drawable getChild(android.graphics.drawable.DrawableContainer$DrawableContainerState,int)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$Observer access$100(org.webrtc.NetworkMonitorAutoDetect)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.String permissionToOp(java.lang.String)
com.google.android.gms.measurement.AppMeasurement: com.google.android.gms.measurement.AppMeasurement getInstance(android.content.Context)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage createEncodedImage()
org.webrtc.voiceengine.WebRtcAudioManager: void dispose()
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getSampleRate()
androidx.core.content.FileProvider: FileProvider()
org.webrtc.WebRtcClassLoader: WebRtcClassLoader()
org.webrtc.FrameEncryptor: long getNativeFrameEncryptor()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()
org.webrtc.audio.AudioDeviceModule: long getNativeAudioDeviceModulePointer()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void removeRendererFromVideoTrack()
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String streamTypeToString(int)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus release()
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverStop(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaStream: boolean removeTrack(org.webrtc.AudioTrack)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setFecControllerFactoryFactoryInterface(org.webrtc.FecControllerFactoryFactoryInterface)
org.webrtc.voiceengine.WebRtcAudioRecord: void logMainParametersExtended()
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean,org.webrtc.Predicate)
org.webrtc.audio.AudioDeviceModule: void setMicrophoneMute(boolean)
org.webrtc.CameraVideoCapturer$CameraStatistics$1: void run()
org.webrtc.SurfaceTextureHelper: void lambda$stopListening$1()
androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type fromCanonicalForm(java.lang.String)
androidx.core.view.accessibility.AccessibilityRecordCompat$Api15Impl: void setMaxScrollY(android.view.accessibility.AccessibilityRecord,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void pendingNotificationRequests(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory()
org.webrtc.RtpCapabilities$CodecCapability: java.util.Map getParameters()
org.webrtc.TextureBufferImpl$RefCountMonitor: void onRetain(org.webrtc.TextureBufferImpl)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory(org.webrtc.EglBase$Context,org.webrtc.Predicate)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onDataChannel(org.webrtc.DataChannel)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
org.webrtc.SurfaceTextureHelper: void lambda$setTextureSize$2(int,int)
org.webrtc.VideoFrame$Buffer: void release()
org.webrtc.voiceengine.WebRtcAudioUtils: boolean useWebRtcBasedAcousticEchoCanceler()
org.webrtc.PeerConnectionFactory$InitializationOptions: PeerConnectionFactory$InitializationOptions(android.content.Context,java.lang.String,boolean,org.webrtc.NativeLibraryLoader,java.lang.String,org.webrtc.Loggable,org.webrtc.Logging$Severity,org.webrtc.PeerConnectionFactory$1)
org.webrtc.EglBase14Impl: int surfaceWidth()
io.objectbox.Cursor: java.util.List nativeGetBacklinkEntities(long,int,int,long)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onCreate(androidx.lifecycle.LifecycleOwner)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)
androidx.core.graphics.drawable.DrawableCompat$Api23Impl: boolean setLayoutDirection(android.graphics.drawable.Drawable,int)
org.webrtc.voiceengine.BuildInfo: java.lang.String getDevice()
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isAcousticEchoCancelerBlacklisted()
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.MediaStream: boolean removeTrack(org.webrtc.VideoTrack)
org.webrtc.BuiltinAudioEncoderFactoryFactory: long nativeCreateBuiltinAudioEncoderFactory()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initialize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.JniHelper: java.lang.Object getStringClass()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void lambda$requestPermissions$0(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback,java.lang.String[],int[])
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
androidx.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
androidx.core.graphics.drawable.DrawableCompat$Api23Impl: int getLayoutDirection(android.graphics.drawable.Drawable)
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: MethodCallHandlerImpl$2(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.JavaI420Buffer: void nativeCropAndScaleI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.StateProvider: org.webrtc.MediaStreamTrack getLocalTrack(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceUnwritableMinChecks()
org.webrtc.GlShader: int getUniformLocation(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: JavaAudioDeviceModule$AudioRecordStartErrorCode(java.lang.String,int)
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus valueOf(java.lang.String)
androidx.appcompat.widget.Toolbar: void setNavigationIcon(int)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean canUseAcousticEchoCanceler()
org.webrtc.NV21Buffer: void retain()
org.webrtc.VideoTrack: void nativeSetShouldReceive(long,boolean)
org.webrtc.Logging: void enableLogThreads()
com.cloudwebrtc.webrtc.R$integer: R$integer()
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
androidx.core.widget.TextViewCompat$Api17Impl: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView,int,int,int,int)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact valueOf(java.lang.String)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: boolean checkMediaStream(java.lang.String)
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQuery()
org.webrtc.VideoFrame$TextureBuffer: int getTextureId()
org.webrtc.ScreenCapturerAndroid: void checkNotDisposed()
androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onCancel(java.lang.Object)
androidx.appcompat.widget.ActionMenuView: void setPresenter(androidx.appcompat.widget.ActionMenuPresenter)
org.webrtc.SurfaceViewRenderer: void surfaceDestroyed(android.view.SurfaceHolder)
org.webrtc.Size: int hashCode()
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: InboxStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean)
org.webrtc.NativeAndroidVideoTrackSource: void nativeSetIsScreencast(long,boolean)
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScaleI420(org.webrtc.VideoFrame$I420Buffer,int,int,int,int,int,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRates$lambda-8(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$RateControlParameters)
com.google.android.gms.internal.measurement.zzne: com.google.android.gms.internal.measurement.zzne[] values()
org.webrtc.VideoEncoderFactory: org.webrtc.VideoCodecInfo[] getImplementations()
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] values()
org.webrtc.EglBase: void createPbufferSurface(int,int)
org.webrtc.YuvHelper: void nativeI420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.Camera2Capturer: void printStackTrace()
org.webrtc.FileVideoCapturer: void startCapture(int,int,int)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState fromNativeIndex(int)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
org.webrtc.voiceengine.WebRtcAudioUtils: boolean useWebRtcBasedAutomaticGainControl()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
org.webrtc.IceCandidate: java.lang.String getSdpMid()
org.webrtc.RendererCommon: android.graphics.Point getDisplaySize(float,float,int,int)
org.webrtc.DataChannel$Observer: void onMessage(org.webrtc.DataChannel$Buffer)
org.webrtc.HardwareVideoEncoder: void lambda$deliverEncodedImage$0(int)
androidx.core.widget.TextViewCompat$Api28Impl: android.text.PrecomputedText$Params getTextMetricsParams(android.widget.TextView)
androidx.window.layout.WindowMetricsCalculator$Companion: void reset()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromActivityForConfigChanges()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()
androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)
androidx.appcompat.widget.AppCompatRadioButton: void setBackgroundResource(int)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: AnyThreadSink(io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.SurfaceEglRenderer: void logD(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataV()
org.webrtc.voiceengine.BuildInfo: java.lang.String getBuildRelease()
org.webrtc.voiceengine.WebRtcAudioUtils: boolean isAutomaticGainControlSupported()
org.webrtc.NetworkMonitor$2: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.audio.WebRtcAudioRecord: boolean verifyAudioConfig(int,int,android.media.AudioFormat,android.media.AudioDeviceInfo,java.util.List)
org.webrtc.RtpTransceiver: void stop()
androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String peerConnectionInit(com.cloudwebrtc.webrtc.utils.ConstraintsMap,com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.appcompat.widget.AppCompatSpinner: int getDropDownHorizontalOffset()
org.webrtc.voiceengine.WebRtcAudioRecord: WebRtcAudioRecord(long)
org.webrtc.PeerConnection$RTCConfiguration: int getIceConnectionReceivingTimeout()
androidx.appcompat.widget.AppCompatSpinner: int getDropDownVerticalOffset()
androidx.window.embedding.SplitController: SplitController(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] values()
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dataChannelSend(java.lang.String,java.lang.String,java.nio.ByteBuffer,java.lang.Boolean)
org.webrtc.EglRenderer: void notifyCallbacks(org.webrtc.VideoFrame,boolean)
org.webrtc.PeerConnection: java.util.List nativeGetTransceivers()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetworkStatePredictorFactoryFactory(org.webrtc.NetworkStatePredictorFactoryFactory)
org.webrtc.EglRenderer: void lambda$removeFrameListener$4(java.util.concurrent.CountDownLatch,org.webrtc.EglRenderer$FrameListener)
org.webrtc.RtpCapabilities: java.util.List getCodecs()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setSizeFromLayout()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
org.webrtc.NetworkStatePredictorFactoryFactory: long createNativeNetworkStatePredictorFactory()
org.webrtc.audio.WebRtcAudioEffects: boolean setNS(boolean)
org.webrtc.EglBase$Context: long getNativeEglContext()
org.webrtc.NetworkMonitor: void nativeNotifyConnectionTypeChanged(long)
kotlin.jvm.internal.CallableReference: CallableReference()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getCameraInfo(int)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
org.webrtc.PeerConnection: org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack)
org.webrtc.PeerConnection$IceServer: java.util.List getTlsAlpnProtocols()
org.webrtc.EglBase10$Context: javax.microedition.khronos.egl.EGLContext getRawContext()
org.webrtc.NativeAndroidVideoTrackSource: void nativeSetState(long,boolean)
org.webrtc.DataChannel: void registerObserver(org.webrtc.DataChannel$Observer)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map describePerson(androidx.core.app.Person)
org.webrtc.RTCStatsReport: org.webrtc.RTCStatsReport create(long,java.util.Map)
org.webrtc.H264Utils: boolean nativeIsSameH264Profile(java.util.Map,java.util.Map)
okhttp3.TlsVersion: okhttp3.TlsVersion[] values()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushMap(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.VideoSource: void dispose()
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$Context getEglBaseContext()
org.webrtc.audio.WebRtcAudioRecord: boolean access$400(org.webrtc.audio.WebRtcAudioRecord)
org.webrtc.EglBase14Impl: org.webrtc.EglBase$Context getEglBaseContext()
androidx.core.widget.TextViewCompat$Api17Impl: void setTextDirection(android.view.View,int)
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$TlsCertPolicy getTlsCertPolicy()
org.webrtc.Camera1Session: android.hardware.Camera access$300(org.webrtc.Camera1Session)
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.PeerConnectionFactory$ThreadInfo: org.webrtc.PeerConnectionFactory$ThreadInfo getCurrent()
org.webrtc.NetworkMonitor: java.util.List getNativeNetworkObserversSync()
org.webrtc.MediaCodecUtils: boolean codecSupportsType(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
org.webrtc.audio.WebRtcAudioTrack: void access$100(boolean)
org.webrtc.voiceengine.WebRtcAudioManager: void assertTrue(boolean)
org.webrtc.audio.VolumeLogger$LogVolumeTask: VolumeLogger$LogVolumeTask(org.webrtc.audio.VolumeLogger,int,int)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
org.webrtc.HardwareVideoDecoderFactory$1: boolean test(android.media.MediaCodecInfo)
org.webrtc.DataChannel: void nativeUnregisterObserver(long)
org.webrtc.TextureBufferImpl: void release()
org.webrtc.EncodedImage: long getCaptureTimeNs()
com.google.firebase.iid.Registrar: java.util.List getComponents()
androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)
androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)
org.webrtc.EglRenderer: java.lang.Object access$200(org.webrtc.EglRenderer)
androidx.core.widget.PopupWindowCompat$Api23Impl: void setWindowLayoutType(android.widget.PopupWindow,int)
org.webrtc.SurfaceViewRenderer: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
org.webrtc.CameraCapturer: void stopCapture()
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.CameraCapturer$6: void run()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationManagerCompat getNotificationManager(android.content.Context)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource valueOf(java.lang.String)
org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map access$200(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
org.webrtc.voiceengine.WebRtcAudioUtils: void logDeviceInfo(java.lang.String)
org.webrtc.VideoEncoder$Settings: VideoEncoder$Settings(int,int,int,int,int,int,boolean)
org.webrtc.VideoCodecInfo: java.util.Map getParams()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readColor(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.NetworkControllerFactoryFactory: long createNativeNetworkControllerFactory()
org.webrtc.Camera1Session: org.webrtc.Camera1Session$SessionState access$400(org.webrtc.Camera1Session)
androidx.appcompat.view.menu.ActionMenuItemView: void setCheckable(boolean)
org.webrtc.PeerConnectionFactory$Options: PeerConnectionFactory$Options()
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledExecutorService newDefaultScheduler()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpParametersToMap(org.webrtc.RtpParameters)
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getTestFlag(com.google.android.gms.internal.measurement.zzcf,int)
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.BitrateAdjuster createBitrateAdjuster(org.webrtc.VideoCodecMimeType,java.lang.String)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] values()
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackInitError(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRenegotiationNeeded()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpReceiver getRtpReceiverById(java.lang.String)
org.webrtc.MediaStream: boolean addTrack(org.webrtc.VideoTrack)
com.yalantis.ucrop.view.OverlayView: int getFreestyleCropMode()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
androidx.window.embedding.EmptyEmbeddingComponent: EmptyEmbeddingComponent()
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink access$300(org.webrtc.SurfaceTextureHelper)
org.webrtc.RTCStats: java.lang.String getType()
org.webrtc.PeerConnectionFactory: long nativeCreateAudioSource(long,org.webrtc.MediaConstraints)
org.webrtc.PeerConnection: void createOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus updateBitrate()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeStreamForRendererById(java.lang.String)
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(android.content.Context,java.lang.String)
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Srtp getSrtp()
androidx.window.layout.DisplayCompatHelperApi17: DisplayCompatHelperApi17()
io.objectbox.Transaction: void nativeRenew(long)
org.webrtc.audio.WebRtcAudioTrack: void setNativeAudioTrack(long)
org.webrtc.MediaCodecUtils: boolean isHardwareAccelerated(android.media.MediaCodecInfo)
org.webrtc.RtpTransceiver: org.webrtc.RtpSender getSender()
org.webrtc.SurfaceTextureHelper: void dispose()
androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)
org.webrtc.MediaCodecUtils: java.util.Map getCodecProperties(org.webrtc.VideoCodecMimeType,boolean)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckIntervalWeakConnectivity()
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
org.webrtc.NetworkMonitor$2: void onNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetLocalDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoCodecInfo: VideoCodecInfo(java.lang.String,java.util.Map)
org.webrtc.CapturerObserver: void onFrameCaptured(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: int getInt(int)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
org.webrtc.MediaCodecVideoDecoderFactory: boolean isH264HighProfileSupported(android.media.MediaCodecInfo)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,int,java.nio.FloatBuffer)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeTextType()
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.EglBase: void release()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityStopped(android.app.Activity)
org.webrtc.EglBase10Impl: boolean hasSurface()
org.webrtc.VideoDecoderFallback: long createNativeVideoDecoder()
org.webrtc.AudioEncoderFactoryFactory: long createNativeAudioEncoderFactory()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushInt(int)
androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
org.webrtc.MediaStream: long getNativeMediaStream()
org.webrtc.RtpReceiver: long nativeSetObserver(long,org.webrtc.RtpReceiver$Observer)
org.webrtc.NetworkChangeDetector$Observer: void onNetworkDisconnect(long)
org.webrtc.PeerConnection$TlsCertPolicy: PeerConnection$TlsCertPolicy(java.lang.String,int)
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: AndroidVideoDecoder$DecodedTextureMetadata(long,java.lang.Integer)
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setUsername(java.lang.String)
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier[] values()
androidx.core.os.ConfigurationCompat$Api24Impl: android.os.LocaleList getLocales(android.content.res.Configuration)
org.webrtc.PeerConnectionFactory: void shutdownInternalTracer()
org.webrtc.Logging: void log(org.webrtc.Logging$Severity,java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: void stopRecording()
org.webrtc.VideoTrack: long nativeWrapSink(org.webrtc.VideoSink)
androidx.core.app.ActivityCompat$Api23Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] values()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$IceServer$Builder builder(java.lang.String)
org.webrtc.TextureBufferImpl: int getTextureId()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$IPAddress[] getIPAddresses(android.net.LinkProperties)
org.webrtc.VideoEncoder$EncoderInfo: boolean getApplyAlignmentToAllSimulcastLayers()
org.webrtc.VideoFrame: void retain()
org.webrtc.voiceengine.WebRtcAudioEffects: boolean setAEC(boolean)
androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)
org.webrtc.CameraSession$Events: void onCameraOpening()
com.cloudwebrtc.webrtc.record.FrameCapturer: FrameCapturer(org.webrtc.VideoTrack,java.io.File,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection: void nativeCreateOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()
org.webrtc.TextureBufferImpl: int getUnscaledWidth()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback: void onWebRtcAudioRecordStop()
org.webrtc.PeerConnection: void nativeNewGetStatsForSender(org.webrtc.RTCStatsCollectorCallback,long)
org.webrtc.DataChannel$Init: java.lang.String getProtocol()
org.webrtc.GlGenericDrawer: GlGenericDrawer(java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks)
org.webrtc.RtpParameters$Encoding: java.lang.Double getScaleResolutionDownBy()
androidx.core.view.ViewCompat$Api31Impl: java.lang.String[] getReceiveContentMimeTypes(android.view.View)
org.webrtc.voiceengine.WebRtcAudioEffects: void enable(int)
org.webrtc.DataChannel: int nativeId()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean putLocalTrack(java.lang.String,org.webrtc.MediaStreamTrack)
org.webrtc.RtpSender: java.util.List getStreams()
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.Camera1Session: android.os.Handler access$1000(org.webrtc.Camera1Session)
androidx.window.core.Bounds: int hashCode()
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus[] values()
org.webrtc.Camera1Session: void listenForTextureFrames()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putDouble(java.lang.String,double)
org.webrtc.RTCStatsReport: java.util.Map getStatsMap()
androidx.window.embedding.EmbeddingTranslatingCallback: EmbeddingTranslatingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: MessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean,java.lang.Boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotY(float)
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker access$002(org.webrtc.AndroidVideoDecoder,org.webrtc.ThreadUtils$ThreadChecker)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map extractNotificationResponseMap(android.content.Intent)
org.webrtc.Camera1Session: void listenForBytebufferFrames()
org.webrtc.EncodedImage: void release()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack createAudioTrackBeforeOreo(int,int,int,android.media.AudioAttributes)
org.webrtc.voiceengine.WebRtcAudioUtils: void setWebRtcBasedAcousticEchoCanceler(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotX()
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)
org.webrtc.EncodedImage$FrameType: EncodedImage$FrameType(java.lang.String,int,int)
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] values()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
androidx.appcompat.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)
org.webrtc.SurfaceViewRenderer: void setEnableHardwareScaler(boolean)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)
org.webrtc.CameraCapturer$2: CameraCapturer$2(org.webrtc.CameraCapturer)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.CameraEnumerationAndroid$1: CameraEnumerationAndroid$1(int)
org.webrtc.EncodedImage: int getRotation()
org.webrtc.DataChannel: void checkDataChannelExists()
org.webrtc.MediaConstraints$KeyValuePair: boolean equals(java.lang.Object)
org.webrtc.VideoEncoder$CodecSpecificInfoVP8: VideoEncoder$CodecSpecificInfoVP8()
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer$Type getType()
org.webrtc.EglBase14Impl: android.opengl.EGLDisplay getEglDisplay()
androidx.window.embedding.SplitPlaceholderRule: int hashCode()
org.webrtc.EglBase14Impl: EglBase14Impl(android.opengl.EGLContext,int[])
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnectionFactory getPeerConnectionFactory()
org.webrtc.MediaCodecUtils: boolean isSoftwareOnly(android.media.MediaCodecInfo)
org.webrtc.voiceengine.WebRtcAudioRecord: long access$500(org.webrtc.voiceengine.WebRtcAudioRecord)
androidx.appcompat.widget.AppCompatTextView: int getLastBaselineToBottomHeight()
org.webrtc.EglBase: org.webrtc.EglBase$Context getEglBaseContext()
org.webrtc.MediaCodecUtils: boolean isSoftwareOnlyQOrHigher(android.media.MediaCodecInfo)
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.HardwareVideoEncoder$YuvFormat$1: void fillBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer,int,int)
org.webrtc.Camera2Session: org.webrtc.CameraSession$Events access$500(org.webrtc.Camera2Session)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void restartIce()
org.webrtc.EglRenderer: void setLayoutAspectRatio(float)
org.webrtc.PeerConnectionFactory: void checkPeerConnectionFactoryExists()
org.webrtc.CameraVideoCapturer$CameraStatistics: int access$000(org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.voiceengine.WebRtcAudioManager: void storeAudioParameters()
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: GetUserMediaImpl$NoSuchFieldWithNameException(com.cloudwebrtc.webrtc.GetUserMediaImpl,java.lang.String,java.lang.String,java.lang.NoSuchFieldException)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
org.webrtc.CameraCapturer$8: CameraCapturer$8(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.CameraSession$CreateSessionCallback: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)
org.webrtc.BaseBitrateAdjuster: int getAdjustedBitrateBps()
io.objectbox.converter.IntegerFlexMapConverter: java.lang.Object convertToKey(java.lang.String)
org.webrtc.MediaStream: void addNativeVideoTrack(long)
androidx.appcompat.widget.AppCompatImageButton: void setImageDrawable(android.graphics.drawable.Drawable)
androidx.window.embedding.ActivityStack: boolean isEmpty()
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getSubtitle()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory access$200(android.content.Context,org.webrtc.PeerConnectionFactory$Options,long,long,long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoDecoderFactory,long,long,long,long,long)
com.google.firebase.iid.FirebaseInstanceId: com.google.firebase.iid.FirebaseInstanceId getInstance(com.google.firebase.FirebaseApp)
org.webrtc.Camera1Session: int access$900(org.webrtc.Camera1Session)
org.webrtc.SurfaceViewRenderer: void onFirstFrameRendered()
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()
org.webrtc.ThreadUtils$4: ThreadUtils$4(java.lang.Runnable)
androidx.core.view.ViewConfigurationCompat$Api28Impl: int getScaledHoverSlop(android.view.ViewConfiguration)
org.webrtc.ThreadUtils$4: java.lang.Object call()
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
org.webrtc.voiceengine.WebRtcAudioRecord: void access$600(org.webrtc.voiceengine.WebRtcAudioRecord,int,long)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setBackgroundResource(int)
org.webrtc.NetworkChangeDetector: boolean supportNetworkCallback()
com.yalantis.ucrop.view.GestureCropImageView: GestureCropImageView(android.content.Context,android.util.AttributeSet)
com.cloudwebrtc.webrtc.DataChannelObserver: void onStateChange()
org.webrtc.EglRenderer$ErrorCallback: void onGlOutOfMemory()
org.webrtc.PeerConnection$Observer$-CC: void $default$onStandardizedIceConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$IceConnectionState)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setLights(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.RtpParameters$HeaderExtension: RtpParameters$HeaderExtension(java.lang.String,int,boolean)
androidx.core.view.ViewCompat$Api16Impl: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver,android.view.ViewTreeObserver$OnGlobalLayoutListener)
androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
org.webrtc.VideoFrame$Buffer: int getBufferType()
org.webrtc.RendererCommon: float[] getLayoutMatrix(boolean,float,float)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int hashCode()
androidx.appcompat.widget.AppCompatSpinner: androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup getInternalPopup()
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnectionDependencies createPeerConnectionDependencies()
com.google.firebase.iid.Registrar: Registrar()
org.webrtc.NV12Buffer: int getHeight()
org.webrtc.RtpParameters$Codec: org.webrtc.MediaStreamTrack$MediaType getKind()
androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.SessionDescription: SessionDescription(org.webrtc.SessionDescription$Type,java.lang.String)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setStream(org.webrtc.MediaStream,java.lang.String)
org.webrtc.PeerConnection: java.util.List getReceivers()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
org.webrtc.NV21Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.audio.WebRtcAudioTrack: byte[] access$700(org.webrtc.audio.WebRtcAudioTrack)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
org.webrtc.SurfaceViewRenderer: void lambda$onFrameResolutionChanged$0(int,int)
org.webrtc.MediaStream: void removeMediaStreamTrack(java.util.List,long)
org.webrtc.VideoEncoderWrapper: org.webrtc.VideoEncoder$Callback createEncoderCallback(long)
androidx.window.embedding.SplitInfo: java.lang.String toString()
androidx.appcompat.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)
org.webrtc.VideoEncoder: java.lang.String getImplementationName()
org.webrtc.audio.JavaAudioDeviceModule: void setMicrophoneMute(boolean)
androidx.window.embedding.SplitController: java.util.Set getSplitRules()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setMinimumSessionDuration(long)
org.webrtc.NetworkMonitor$2: void onNetworkDisconnect(long)
androidx.core.widget.EdgeEffectCompat$Api31Impl: android.widget.EdgeEffect create(android.content.Context,android.util.AttributeSet)
org.webrtc.ThreadUtils$2: ThreadUtils$2(java.util.concurrent.CountDownLatch)
org.webrtc.EncodedImage: int getEncodedHeight()
org.webrtc.RtpSender: long getNativeRtpSender()
kotlin.jvm.internal.CallableReference: boolean isSuspend()
org.webrtc.PeerConnection$Observer: void onIceCandidatesRemoved(org.webrtc.IceCandidate[])
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getTitle()
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getObbDirs(android.content.Context)
org.webrtc.HardwareVideoEncoder: void releaseCodecOnOutputThread()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onPause(androidx.lifecycle.LifecycleOwner)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: double getDouble(int)
org.webrtc.VideoEncoderFallback: long createNativeVideoEncoder()
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int)
org.webrtc.DynamicBitrateAdjuster: double getBitrateAdjustmentScale()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverSetCodecPreferences(java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
com.yalantis.ucrop.view.UCropView: UCropView(android.content.Context,android.util.AttributeSet)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onStart(androidx.lifecycle.LifecycleOwner)
org.webrtc.audio.WebRtcAudioTrack: WebRtcAudioTrack(android.content.Context,android.media.AudioManager,android.media.AudioAttributes,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback,boolean)
org.webrtc.PeerConnectionFactory: void nativeStopAecDump(long)
org.webrtc.NativeLibraryLoader: boolean load(java.lang.String)
com.yalantis.ucrop.view.TransformImageView: java.lang.String getImageInputPath()
org.webrtc.YuvHelper: void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.audio.WebRtcAudioRecord: long access$600(org.webrtc.audio.WebRtcAudioRecord)
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord access$000(org.webrtc.audio.WebRtcAudioRecord)
com.yalantis.ucrop.view.OverlayView: void setDimmedColor(int)
org.webrtc.CameraCapturer: void startCapture(int,int,int)
androidx.window.embedding.SplitRule$Api30Impl: SplitRule$Api30Impl()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getTransceivers(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: long getDefaultNetId()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRemoveTrack(org.webrtc.RtpReceiver)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag[] values()
com.google.android.gms.internal.auth.zzho: com.google.android.gms.internal.auth.zzho[] values()
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean)
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: WebRtcAudioRecord$AudioRecordThread(org.webrtc.audio.WebRtcAudioRecord,java.lang.String)
org.webrtc.EglBase: void makeCurrent()
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
org.webrtc.CameraEnumerator: java.util.List getSupportedFormats(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLedDetails(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setType(int)
org.webrtc.ScreenCapturerAndroid: long getNumCapturedFrames()
org.webrtc.RtpTransceiver: void nativeStopInternal(long)
org.webrtc.RtpParameters$Rtcp: RtpParameters$Rtcp(java.lang.String,boolean)
org.webrtc.HardwareVideoEncoder: java.lang.Thread createOutputThread()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: WindowMetricsCalculator$Companion$overrideDecorator$1(java.lang.Object)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
org.webrtc.PeerConnectionFactory: long nativeCreatePeerConnection(long,org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,long,org.webrtc.SSLCertificateVerifier)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordStateCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback)
androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()
com.google.android.gms.internal.measurement.zzcb: zzcb()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void generateEventId(com.google.android.gms.internal.measurement.zzcf)
org.webrtc.WrappedNativeVideoDecoder: long createNativeVideoDecoder()
org.webrtc.NetworkMonitorAutoDetect: long getDefaultNetId()
org.webrtc.PeerConnection: org.webrtc.PeerConnection$SignalingState signalingState()
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
org.webrtc.NativeCapturerObserver: void onCapturerStopped()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
org.webrtc.RtpTransceiver: void dispose()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: MethodCallHandlerImpl$1(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FileVideoCapturer$VideoReaderY4M: FileVideoCapturer$VideoReaderY4M(java.lang.String)
org.webrtc.RtpReceiver: org.webrtc.MediaStreamTrack track()
org.webrtc.EglBase14Impl: int surfaceHeight()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderDispose(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NativeCapturerObserver: NativeCapturerObserver(long)
org.webrtc.VideoEncoderFallback: VideoEncoderFallback(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder)
com.google.firebase.installations.FirebaseInstallationsRegistrar: FirebaseInstallationsRegistrar()
org.webrtc.TimestampAligner: long nativeTranslateTimestamp(long,long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidRawSoundResource(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean effectTypeIsVoIP(java.util.UUID)
androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()
org.webrtc.DynamicBitrateAdjuster: void setTargets(int,double)
org.webrtc.PeerConnection$IceServer: java.lang.String getPassword()
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
org.webrtc.Camera2Session: org.webrtc.Camera2Session$SessionState access$202(org.webrtc.Camera2Session,org.webrtc.Camera2Session$SessionState)
androidx.core.view.ViewCompat$Api16Impl: android.view.ViewParent getParentForAccessibility(android.view.View)
org.webrtc.Camera2Session$CaptureSessionCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)
org.webrtc.Camera2Session: android.os.Handler access$1200(org.webrtc.Camera2Session)
org.webrtc.voiceengine.WebRtcAudioRecord: void reportWebRtcAudioRecordInitError(java.lang.String)
androidx.appcompat.widget.AppCompatSpinner: android.content.Context getPopupContext()
org.webrtc.RtpParameters$Encoding: double getBitratePriority()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme)
org.webrtc.audio.WebRtcAudioTrack: int getStreamVolume()
androidx.appcompat.view.menu.ListMenuItemView: void setGroupDividerEnabled(boolean)
androidx.core.widget.NestedScrollView: float getBottomFadingEdgeStrength()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: void onCurrentEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.EglBase14Impl: void detachCurrent()
okhttp3.Protocol: okhttp3.Protocol[] values()
org.webrtc.PeerConnection: org.webrtc.DataChannel createDataChannel(java.lang.String,org.webrtc.DataChannel$Init)
org.webrtc.Camera2Session: Camera2Session(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
androidx.core.content.ContextCompat$Api23Impl: java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
androidx.appcompat.widget.ButtonBarLayout: int getMinimumHeight()
org.webrtc.NV12Buffer: void nativeCropAndScale(int,int,int,int,int,int,java.nio.ByteBuffer,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)
org.webrtc.MediaCodecWrapper: void flush()
org.webrtc.voiceengine.WebRtcAudioTrack: byte[] access$600(org.webrtc.voiceengine.WebRtcAudioTrack)
org.webrtc.audio.WebRtcAudioRecord: void scheduleLogRecordingConfigurationsTask(android.media.AudioRecord)
org.webrtc.Camera2Session$CameraStateCallback: Camera2Session$CameraStateCallback(org.webrtc.Camera2Session,org.webrtc.Camera2Session$1)
com.cloudwebrtc.webrtc.DataChannelObserver: void onMessage(org.webrtc.DataChannel$Buffer)
org.webrtc.VideoTrack: void nativeAddSink(long,long)
androidx.appcompat.widget.SearchView: void setImeOptions(int)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void streamDispose(org.webrtc.MediaStream)
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList createLocaleList(java.util.Locale[])
org.webrtc.WrappedNativeVideoDecoder: WrappedNativeVideoDecoder()
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeCurrentDirection(long)
com.yalantis.ucrop.view.CropImageView: void setTargetAspectRatio(float)
com.yalantis.ucrop.view.OverlayView: void setCropGridStrokeWidth(int)
com.yalantis.ucrop.view.CropImageView: float getMaxScale()
androidx.appcompat.widget.ActionBarOverlayLayout: void setLogo(int)
androidx.window.embedding.SplitInfo: int hashCode()
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List getSendEncodings()
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int,kotlin.coroutines.Continuation)
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrame$Buffer prepareBufferForViewportSize(org.webrtc.VideoFrame$Buffer,int,int)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer getCallback()
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.MediaStream: void removeAudioTrack(long)
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(java.lang.String)
androidx.core.view.MenuItemCompat$Api26Impl: int getAlphabeticModifiers(android.view.MenuItem)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.util.concurrent.ExecutorService getExecutor()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: byte[] castObjectToByteArray(java.lang.Object)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: boolean isHardwareEncoder()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType access$400(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void merge(java.util.Map)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void onActivityResult(int,int,android.content.Intent)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioFormat(int)
org.webrtc.CameraVideoCapturer$-CC: void $default$addMediaRecorderToCamera(org.webrtc.CameraVideoCapturer,android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.EncodedImage: org.webrtc.EncodedImage$Builder builder()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(androidx.core.util.Consumer)
org.webrtc.VideoDecoder$Callback: void onDecodedFrame(org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
kotlin.jvm.internal.CallableReference: java.util.List getParameters()
org.webrtc.EglRenderer: void access$100(org.webrtc.EglRenderer)
androidx.core.widget.TextViewCompat$Api17Impl: int getTextDirection(android.view.View)
org.webrtc.CameraCapturer$7: CameraCapturer$7(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.VideoEncoderFactory$-CC: org.webrtc.VideoCodecInfo[] $default$getImplementations(org.webrtc.VideoEncoderFactory)
org.webrtc.DataChannel$State: DataChannel$State(java.lang.String,int)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isAcousticEchoCancelerSupported()
org.webrtc.VideoFrameDrawer: void drawTexture(org.webrtc.RendererCommon$GlDrawer,org.webrtc.VideoFrame$TextureBuffer,android.graphics.Matrix,int,int,int,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getOutputFormat()
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: int getPreferredId()
androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)
org.webrtc.AudioProcessingFactory: long createNative()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.NativeAndroidVideoTrackSource: NativeAndroidVideoTrackSource(long)
org.webrtc.CameraCapturer: void checkIsOnCameraThread()
com.google.android.gms.measurement.AppMeasurement: java.lang.String getCurrentScreenName()
io.objectbox.exception.DbSchemaException: DbSchemaException(java.lang.String)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)
androidx.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.RTCStatsReport: RTCStatsReport(long,java.util.Map)
org.webrtc.CameraCapturer$9: void run()
okhttp3.internal.publicsuffix.PublicSuffixDatabase: PublicSuffixDatabase()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View,int,int)
org.webrtc.audio.WebRtcAudioRecord: boolean isAcousticEchoCancelerSupported()
org.webrtc.CameraCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.NativeAndroidVideoTrackSource: void setState(boolean)
org.webrtc.CryptoOptions$SFrame: CryptoOptions$SFrame(org.webrtc.CryptoOptions,boolean)
org.webrtc.RtpTransceiver: boolean nativeSetDirection(long,org.webrtc.RtpTransceiver$RtpTransceiverDirection)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: boolean isNull(int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String transceiverDirectionString(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setOutputSampleRate(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: androidx.core.graphics.PathParser$PathDataNode[] getPathData()
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack createMediaStreamTrack(long)
org.webrtc.RtpSender: void setFrameEncryptor(org.webrtc.FrameEncryptor)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putMap(java.lang.String,java.util.Map)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(int)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact[] values()
org.webrtc.NetworkMonitor: void removeObserver(org.webrtc.NetworkMonitor$NetworkObserver)
org.webrtc.SdpObserver: void onCreateSuccess(org.webrtc.SessionDescription)
androidx.window.embedding.SplitPairRule: int hashCode()
androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType()
org.webrtc.HardwareVideoEncoder$BusyCount: void increment()
org.webrtc.RtpSender: void dispose()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.ArrayList loadScheduledNotifications(android.content.Context)
androidx.core.widget.TextViewCompat$Api23Impl: int getBreakStrategy(android.widget.TextView)
org.webrtc.EglBase10Impl: void detachCurrent()
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType valueOf(java.lang.String)
androidx.core.app.NavUtils$Api16Impl: android.content.Intent getParentActivityIntent(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar: java.util.List getComponents()
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor[] values()
org.webrtc.RtpParameters$Codec: java.lang.Integer getNumChannels()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMaxTextSize()
androidx.appcompat.widget.AppCompatRadioButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.webrtc.PeerConnection$Observer$-CC: void $default$onTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpTransceiver)
androidx.window.embedding.ActivityRule: int hashCode()
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype valueOf(java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void onFrame(org.webrtc.VideoFrame)
androidx.appcompat.widget.ActionBarOverlayLayout: ActionBarOverlayLayout(android.content.Context,android.util.AttributeSet)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String getUIDForStream(org.webrtc.MediaStream)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode valueOf(java.lang.String)
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(javax.microedition.khronos.egl.EGLContext,int[])
androidx.core.content.ContextCompat$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
org.webrtc.AndroidVideoDecoder: void access$200(org.webrtc.AndroidVideoDecoder)
org.webrtc.Camera2Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat access$800(org.webrtc.Camera2Session)
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
org.webrtc.PeerConnectionFactory$Options: boolean getDisableEncryption()
com.yalantis.ucrop.view.TransformImageView: void setImageBitmap(android.graphics.Bitmap)
org.webrtc.HardwareVideoDecoderFactory$1: boolean test(java.lang.Object)
org.webrtc.EglBase14Impl$Context: EglBase14Impl$Context(android.opengl.EGLContext)
org.webrtc.YuvHelper: YuvHelper()
android.support.v4.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.activity.ComponentActivity: ComponentActivity()
org.webrtc.PeerConnectionFactory: void onWorkerThreadReady()
org.webrtc.Camera2Session$CaptureSessionCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)
androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatRadioButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.core.view.ViewCompat$Api30Impl: java.lang.CharSequence getStateDescription(android.view.View)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: SidecarWindowBackend$WindowLayoutChangeCallbackWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.webrtc.MediaCodecWrapper: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)
org.webrtc.audio.WebRtcAudioTrack: void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void requestPermissions(android.content.Context,android.app.Activity,java.lang.String[],android.os.ResultReceiver)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Notification createNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.PeerConnectionDependencies: PeerConnectionDependencies(org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getCurrentScreenClass(com.google.android.gms.internal.measurement.zzcf)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.Map toMap()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits$lambda-9(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.audio.WebRtcAudioTrack: void assertTrue(boolean)
org.webrtc.PeerConnection: void setRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.SdpObserver: void onSetSuccess()
org.webrtc.CameraCapturer: int access$2300(org.webrtc.CameraCapturer)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void isDataCollectionEnabled(com.google.android.gms.internal.measurement.zzcf)
org.webrtc.VideoFrame: int getRotatedWidth()
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
org.webrtc.PeerConnection: void restartIce()
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
org.webrtc.Logging: void enableLogTimeStamps()
org.webrtc.Camera2Enumerator: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)
org.webrtc.PeerConnection: boolean nativeRemoveIceCandidates(org.webrtc.IceCandidate[])
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: CameraEnumerationAndroid$ClosestComparator()
org.webrtc.PeerConnection: void nativeNewGetStats(org.webrtc.RTCStatsCollectorCallback)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper(org.webrtc.VideoEncoder)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetRight()
org.webrtc.NetworkMonitor: int getNumObservers()
org.webrtc.CameraEnumerator: java.lang.String[] getDeviceNames()
org.webrtc.SurfaceTextureHelper: SurfaceTextureHelper(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor,org.webrtc.SurfaceTextureHelper$1)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: RtpTransceiver$RtpTransceiverDirection(java.lang.String,int,int)
androidx.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
org.webrtc.CryptoOptions$Builder: CryptoOptions$Builder(org.webrtc.CryptoOptions$1)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
org.webrtc.PeerConnection$RTCConfiguration: boolean getAudioJitterBufferFastAccelerate()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void success(java.lang.Object)
androidx.appcompat.widget.ActionBarOverlayLayout: void setOverlayMode(boolean)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
org.webrtc.Metrics$HistogramInfo: void addSample(int,int)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setMicrophoneMute(boolean)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onEncoderBroken()
org.webrtc.HardwareVideoEncoder$YuvFormat$2: void fillBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer,int,int)
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(int[])
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String getNextTrackUUID()
org.webrtc.WrappedNativeI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int)
androidx.core.os.UserManagerCompat$Api24Impl: boolean isUserUnlocked(android.content.Context)
org.webrtc.CameraCapturer: org.webrtc.CameraCapturer$SwitchState access$100(org.webrtc.CameraCapturer)
com.yalantis.ucrop.view.OverlayView: void setCropFrameColor(int)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.voiceengine.WebRtcAudioRecord: void nativeDataIsRecorded(int,long)
org.webrtc.audio.WebRtcAudioRecord: boolean isAudioSourceMatchingRecordingSession()
org.webrtc.CameraVideoCapturer: void removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isNoiseSuppressorExcludedByUUID()
org.webrtc.voiceengine.WebRtcAudioEffects: void assertTrue(boolean)
androidx.appcompat.widget.SearchView: int getPreferredHeight()
androidx.core.widget.TextViewCompat$Api24Impl: android.icu.text.DecimalFormatSymbols getInstance(java.util.Locale)
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask: WebRtcAudioManager$VolumeLogger$LogVolumeTask(org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger,int,int)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: boolean canApplyTheme(android.graphics.drawable.Drawable)
org.webrtc.NV21Buffer: int getHeight()
org.webrtc.EglRenderer: void releaseEglSurface(java.lang.Runnable)
org.webrtc.Logging: void nativeEnableLogThreads()
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper$FrameRefMonitor access$100(org.webrtc.SurfaceTextureHelper)
androidx.appcompat.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)
org.webrtc.PeerConnectionFactory: void printStackTrace(org.webrtc.PeerConnectionFactory$ThreadInfo,boolean)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onAvailable(android.net.Network)
androidx.core.content.res.ResourcesCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities getRtpReceiverCapabilities(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.NativeAndroidVideoTrackSource: void nativeAdaptOutputFormat(long,int,int,java.lang.Integer,int,int,java.lang.Integer,java.lang.Integer)
org.webrtc.AndroidVideoDecoder: void releaseCodecOnOutputThread()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.webrtc.VideoSource: void adaptOutputFormat(int,int,int,int,int)
org.webrtc.ThreadUtils: void awaitUninterruptibly(java.util.concurrent.CountDownLatch)
androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
com.google.android.gms.internal.measurement.zzbn: android.os.IBinder asBinder()
androidx.appcompat.widget.DropDownListView: void setSelector(android.graphics.drawable.Drawable)
org.webrtc.Empty: Empty()
org.webrtc.FileVideoCapturer$VideoReaderY4M: void close()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onReceive(android.content.Context,android.content.Intent)
androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread: void stopThread()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KFunction getReflected()
org.webrtc.PeerConnection: void createAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(boolean)
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()
org.webrtc.Camera2Session: int access$2100(org.webrtc.Camera2Session)
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink access$402(org.webrtc.SurfaceTextureHelper,org.webrtc.VideoSink)
org.webrtc.Camera1Session: void lambda$listenForTextureFrames$0(org.webrtc.VideoFrame)
org.webrtc.NetEqFactoryFactory: long createNativeNetEqFactory()
androidx.window.layout.DisplayCompatHelperApi28: DisplayCompatHelperApi28()
org.webrtc.EglBase14Impl: void swapBuffers(long)
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.util.List castList(java.lang.Class,java.util.Collection)
org.webrtc.VideoTrack: void setShouldReceive(boolean)
org.webrtc.EglBase10Impl: int surfaceHeight()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void release()
androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspot(android.graphics.drawable.Drawable,float,float)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
androidx.core.app.RemoteInput$Api29Impl: android.app.RemoteInput$Builder setEditChoicesBeforeSending(android.app.RemoteInput$Builder,int)
androidx.core.view.ViewCompat$Api16Impl: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getScreencastMinBitrate()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleX()
androidx.window.layout.WindowInfoTracker$Companion: void reset()
com.yalantis.ucrop.view.CropImageView: void setCropBoundsChangeListener(com.yalantis.ucrop.callback.CropBoundsChangeListener)
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundResource(int)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
androidx.appcompat.widget.AppCompatSpinner: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
org.webrtc.WrappedNativeI420Buffer: int getHeight()
androidx.core.app.ActivityCompat$Api23Impl: void onSharedElementsReady(java.lang.Object)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.MediaStream: boolean nativeRemoveVideoTrack(long,long)
org.webrtc.MediaStream: boolean addPreservedTrack(org.webrtc.VideoTrack)
org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)
org.webrtc.Logging: void v(java.lang.String,java.lang.String)
org.webrtc.Metrics: void nativeEnable()
androidx.appcompat.widget.FitWindowsLinearLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotificationMessagingStyle(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: RuntimeTypeAdapterFactory(java.lang.Class,java.lang.String)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)
org.webrtc.RtpReceiver: long nativeGetTrack(long)
org.webrtc.RendererCommon: android.graphics.Point getDisplaySize(org.webrtc.RendererCommon$ScalingType,float,int,int)
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.EglRenderer$EglSurfaceCreation: EglRenderer$EglSurfaceCreation(org.webrtc.EglRenderer)
io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.PeerConnection)
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] values()
org.webrtc.Predicate$3: Predicate$3(org.webrtc.Predicate)
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,int)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isAcousticEchoCancelerExcludedByUUID()
org.webrtc.CameraVideoCapturer$CameraStatistics: int access$102(org.webrtc.CameraVideoCapturer$CameraStatistics,int)
org.webrtc.VideoFileRenderer: VideoFileRenderer(java.lang.String,int,int,org.webrtc.EglBase$Context)
org.webrtc.CameraCapturer$5: void run()
org.webrtc.VideoFrame$TextureBuffer: android.graphics.Matrix getTransformMatrix()
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] values()
org.webrtc.Camera1Session: void access$000(org.webrtc.Camera1Session)
org.webrtc.VideoFrameDrawer$YuvUploader: void release()
androidx.appcompat.widget.Toolbar: void setContentInsetEndWithActions(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onCreateFailure(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: boolean getDisableIPv6OnWifi()
androidx.window.layout.ExtensionWindowLayoutInfoBackend: ExtensionWindowLayoutInfoBackend(androidx.window.extensions.layout.WindowLayoutComponent)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidBigPictureResources(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.RtpSender: org.webrtc.RtpParameters getParameters()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setId(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.text.Spanned fromHtml(java.lang.String)
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver getReceiver()
org.webrtc.audio.JavaAudioDeviceModule: JavaAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean,org.webrtc.audio.JavaAudioDeviceModule$1)
org.webrtc.audio.VolumeLogger: VolumeLogger(android.media.AudioManager)
org.webrtc.audio.WebRtcAudioTrack: WebRtcAudioTrack(android.content.Context,android.media.AudioManager)
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowCallback(android.view.Window$Callback)
org.webrtc.NV12Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: int getMarginStart(android.view.ViewGroup$MarginLayoutParams)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String)
androidx.core.widget.PopupWindowCompat$Api23Impl: int getWindowLayoutType(android.widget.PopupWindow)
androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)
androidx.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
org.webrtc.ScreenCapturerAndroid: android.hardware.display.VirtualDisplay access$200(org.webrtc.ScreenCapturerAndroid)
androidx.appcompat.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)
org.webrtc.Camera1Session: void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel valueOf(java.lang.String)
org.webrtc.HardwareVideoEncoder: void access$200(org.webrtc.HardwareVideoEncoder)
androidx.appcompat.widget.LinearLayoutCompat: float getWeightSum()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.ArrayList readMessages(java.util.ArrayList)
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraSwitchHandler access$1200(org.webrtc.CameraCapturer)
org.webrtc.PeerConnection$Observer: void onIceCandidate(org.webrtc.IceCandidate)
org.webrtc.EglBase10Impl: int surfaceWidth()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioDecoderFactoryFactory(org.webrtc.AudioDecoderFactoryFactory)
org.webrtc.PeerConnection: boolean setBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer)
org.webrtc.DtmfSender: boolean nativeInsertDtmf(long,java.lang.String,int,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackSetVolume(java.lang.String,double)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getReceivers(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: void onReceive(android.content.Context,android.content.Intent)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)
io.objectbox.converter.PropertyConverter: java.lang.Object convertToEntityProperty(java.lang.Object)
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
org.webrtc.audio.WebRtcAudioTrackUtils: void attachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,org.webrtc.audio.JavaAudioDeviceModule)
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
org.webrtc.H264Utils: java.util.Map getDefaultH264Params(boolean)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: void onCameraSwitchDone(boolean)
androidx.appcompat.widget.ViewStubCompat: void setLayoutInflater(android.view.LayoutInflater)
org.webrtc.CameraCapturer: void dispose()
org.webrtc.CameraEnumerationAndroid: org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange getClosestSupportedFramerateRange(java.util.List,int)
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback: void onWebRtcAudioRecordInitError(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode: WebRtcAudioTrack$AudioTrackStartErrorCode(java.lang.String,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamRemoveTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackSetEnabled(java.lang.String,boolean)
io.objectbox.exception.PagesCorruptException: PagesCorruptException(java.lang.String)
org.webrtc.ScreenCapturerAndroid: void startCapture(int,int,int)
org.webrtc.NativeLibrary: java.lang.String access$000()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable computeReflected()
org.webrtc.ThreadUtils$3: ThreadUtils$3(org.webrtc.ThreadUtils$1Result,java.util.concurrent.Callable,org.webrtc.ThreadUtils$1CaughtException,java.util.concurrent.CountDownLatch)
org.webrtc.LibaomAv1Decoder: long nativeCreateDecoder()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionAddStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.HardwareVideoEncoder: boolean canUseSurface()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: FlutterWebRTCPlugin()
org.webrtc.audio.WebRtcAudioTrackUtils: void detachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule)
org.webrtc.NativeAndroidVideoTrackSource: void nativeOnFrameCaptured(long,int,long,org.webrtc.VideoFrame$Buffer)
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$SFrame getSFrame()
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] $default$getResolutionBitrateLimits(org.webrtc.VideoEncoder)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails from(java.util.Map)
org.webrtc.DataChannel$Init: DataChannel$Init()
androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)
org.webrtc.RendererCommon$GlDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.ScreenCapturerAndroid$1: ScreenCapturerAndroid$1(org.webrtc.ScreenCapturerAndroid)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void clearConditionalUserProperty(java.lang.String,java.lang.String,android.os.Bundle)
androidx.window.layout.WindowMetrics: java.lang.String toString()
androidx.window.layout.FoldingFeature: boolean isSeparating()
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintList(android.content.res.ColorStateList)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void checkSelfPermissions(boolean)
org.webrtc.CameraVideoCapturer$CameraSwitchHandler: void onCameraSwitchError(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
org.webrtc.Size: Size(int,int)
org.webrtc.voiceengine.WebRtcAudioManager: boolean isLowLatencyOutputSupported()
org.webrtc.LibvpxVp8Decoder: long createNativeVideoDecoder()
org.webrtc.MediaStream: MediaStream(long)
org.webrtc.PeerConnection$SdpSemantics: PeerConnection$SdpSemantics(java.lang.String,int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean isNull(java.lang.String)
org.webrtc.CameraCapturer: java.lang.String access$1300(org.webrtc.CameraCapturer)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: WebRtcAudioRecord$AudioSamples(android.media.AudioRecord,byte[],org.webrtc.voiceengine.WebRtcAudioRecord$1)
org.webrtc.Predicate$3: boolean test(java.lang.Object)
io.objectbox.exception.FileCorruptException: FileCorruptException(java.lang.String,int)
androidx.appcompat.widget.Toolbar: int getTitleMarginTop()
androidx.core.graphics.drawable.DrawableCompat$Api19Impl: int getAlpha(android.graphics.drawable.Drawable)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$Builder builder()
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread: WebRtcAudioRecord$AudioRecordThread(org.webrtc.voiceengine.WebRtcAudioRecord,java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()
com.yalantis.ucrop.view.TransformImageView: int getMaxBitmapSize()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: void onFirstFrameRendered()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void close()
org.webrtc.FecControllerFactoryFactoryInterface: long createNative()
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion()
androidx.appcompat.widget.SearchView: void setOnSuggestionListener(androidx.appcompat.widget.SearchView$OnSuggestionListener)
androidx.window.core.Version$bigInteger$2: Version$bigInteger$2(androidx.window.core.Version)
androidx.appcompat.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson buildGson()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setIconTintList(android.view.MenuItem,android.content.res.ColorStateList)
androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()
android.support.v4.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
org.webrtc.StatsReport$Value: java.lang.String toString()
io.flutter.plugins.imagepicker.ImagePickerFileProvider: ImagePickerFileProvider()
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraEventsHandler access$1000(org.webrtc.CameraCapturer)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: boolean getBoolean(int)
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.SSLCertificateVerifier: boolean verify(byte[])
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
org.webrtc.VideoFileRenderer: void renderFrameOnRenderThread(org.webrtc.VideoFrame)
org.webrtc.DataChannel$Init: int getMaxRetransmitTimeMs()
org.webrtc.VideoProcessor$FrameAdaptationParameters: VideoProcessor$FrameAdaptationParameters(int,int,int,int,int,int,long,boolean)
org.webrtc.VideoCapturer: void stopCapture()
com.google.android.gms.internal.auth.zzhn: com.google.android.gms.internal.auth.zzhn[] values()
io.objectbox.converter.FlexObjectConverter: void checkMapKeyType(java.lang.Object)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isDeviceOrientationPortrait()
androidx.appcompat.widget.ActionBarOverlayLayout: void setUiOptions(int)
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat()
org.webrtc.voiceengine.WebRtcAudioTrack: int channelCountToConfiguration(int)
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
org.webrtc.audio.JavaAudioDeviceModule: boolean isBuiltInNoiseSuppressorSupported()
androidx.core.app.AlarmManagerCompat$Api23Impl: void setAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
org.webrtc.Camera2Session: boolean access$1600(org.webrtc.Camera2Session)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationAppLaunchDetails(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService: FlutterFirebaseMessagingBackgroundService()
okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode[] values()
org.webrtc.GlUtil: void checkNoGLES2Error(java.lang.String)
org.webrtc.PeerConnection$Observer: void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.StateProvider access$200(com.cloudwebrtc.webrtc.GetUserMediaImpl)
androidx.appcompat.widget.FitWindowsLinearLayout: FitWindowsLinearLayout(android.content.Context,android.util.AttributeSet)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
org.webrtc.PeerConnection: boolean nativeSetConfiguration(org.webrtc.PeerConnection$RTCConfiguration)
com.yalantis.ucrop.view.TransformImageView: android.net.Uri getImageOutputUri()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void screenRequestPermissions(android.os.ResultReceiver)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities nativeGetRtpReceiverCapabilities(long,org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.Logging: void nativeLog(int,java.lang.String,java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: void setImageBitmap(android.graphics.Bitmap)
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions createCryptoOptions()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetTrack(java.lang.String,org.webrtc.MediaStreamTrack,io.flutter.plugin.common.MethodChannel$Result,boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
androidx.core.view.ViewCompat$Api17Impl: void setLabelFor(android.view.View,int)
org.webrtc.NetworkChangeDetector$Observer: void onNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.SurfaceTextureHelper: void startListening(org.webrtc.VideoSink)
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.SurfaceTextureHelper access$300(org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.voiceengine.WebRtcAudioRecord: void setMicrophoneMute(boolean)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityStopped(com.google.android.gms.dynamic.IObjectWrapper,long)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
androidx.core.view.ViewCompat$Api15Impl: boolean hasOnClickListeners(android.view.View)
org.webrtc.BaseBitrateAdjuster: double getAdjustedFramerateFps()
org.webrtc.audio.WebRtcAudioRecord: void nativeDataIsRecorded(long,int,long)
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQueryHint()
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer getNumChannels()
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isNoiseSuppressorSupported()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateX()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void registerDataChannelObserver(java.lang.String,org.webrtc.DataChannel)
androidx.appcompat.widget.AppCompatButton: void setSupportAllCaps(boolean)
org.webrtc.PeerConnection: void nativeFreeOwnedPeerConnection(long)
com.yalantis.ucrop.view.OverlayView: void setTargetAspectRatio(float)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getNetworkSubType()
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase$Context getRootEglBaseContext()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)
org.webrtc.GlGenericDrawer: GlGenericDrawer(java.lang.String,java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents valueOf(java.lang.String)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()
org.webrtc.RendererCommon: void adjustOrigin(float[])
org.webrtc.HardwareVideoEncoder$BusyCount: HardwareVideoEncoder$BusyCount(org.webrtc.HardwareVideoEncoder$1)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
org.webrtc.NetworkMonitor$NetworkObserver: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: kotlin.Unit lambda$new$0(java.util.List,com.twilio.audioswitch.AudioDevice)
org.webrtc.Camera2Session: void start()
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryName(java.lang.String)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void lambda$error$1(java.lang.String,java.lang.String,java.lang.Object)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTransceiverOfType(java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.core.Version: int getMajor()
androidx.appcompat.app.AppCompatActivity: AppCompatActivity()
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: GetUserMediaImpl$ScreenRequestPermissionsFragment()
com.cloudwebrtc.webrtc.StateProvider: java.lang.String getNextStreamUUID()
androidx.window.core.Version: boolean equals(java.lang.Object)
org.webrtc.audio.WebRtcAudioEffects: void assertTrue(boolean)
org.webrtc.NetworkMonitorAutoDetect: void setConnectivityManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate)
org.webrtc.EglBase10Impl: void releaseSurface()
org.webrtc.NetworkMonitor: void assertIsTrue(boolean)
org.webrtc.RtpTransceiver: org.webrtc.MediaStreamTrack$MediaType nativeGetMediaType(long)
com.cloudwebrtc.webrtc.StateProvider: java.lang.String getNextTrackUUID()
org.webrtc.EglBase10Impl$Context: EglBase10Impl$Context(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLConfig)
org.webrtc.RtpParameters$DegradationPreference: RtpParameters$DegradationPreference(java.lang.String,int)
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: BigPictureStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation getDefaultStyleInformation(java.util.Map)
androidx.appcompat.widget.LinearLayoutCompat: int getBaselineAlignedChildIndex()
androidx.core.app.RemoteInput$Api26Impl: android.app.RemoteInput$Builder setAllowDataType(android.app.RemoteInput$Builder,java.lang.String,boolean)
androidx.core.view.ViewCompat$Api31Impl: androidx.core.view.ContentInfoCompat performReceiveContent(android.view.View,androidx.core.view.ContentInfoCompat)
org.webrtc.Camera2Session: int access$1300(org.webrtc.Camera2Session)
org.webrtc.VideoEncoder$Capabilities: VideoEncoder$Capabilities(boolean)
org.webrtc.RtpCapabilities$HeaderExtensionCapability: java.lang.String getUri()
androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()
org.webrtc.ScreenCapturerAndroid: void createVirtualDisplay()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordInitError(java.lang.String)
androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$500(com.cloudwebrtc.webrtc.GetUserMediaImpl)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void endOfStream()
com.cloudwebrtc.webrtc.utils.PermissionUtils: void send(android.os.ResultReceiver,int,java.lang.String[],int[])
androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: WebRtcAudioManager$VolumeLogger(android.media.AudioManager)
androidx.media.AudioAttributesImplApi26: AudioAttributesImplApi26()
org.webrtc.HardwareVideoEncoderFactory: boolean isMediaCodecAllowed(android.media.MediaCodecInfo)
org.webrtc.MediaCodecVideoDecoderFactory: boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
io.objectbox.exception.ConstraintViolationException: ConstraintViolationException(java.lang.String)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode[] values()
org.webrtc.VideoFileRenderer: void lambda$release$3()
org.webrtc.PeerConnection: PeerConnection(long)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
org.webrtc.VideoEncoder: boolean isHardwareEncoder()
org.webrtc.SurfaceViewRenderer: void clearImage()
org.webrtc.PeerConnection: long getNativePeerConnection()
org.webrtc.CallSessionFileRotatingLogSink: byte[] nativeGetLogData(java.lang.String)
com.twilio.audioswitch.AbstractAudioSwitch$State: com.twilio.audioswitch.AbstractAudioSwitch$State valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatSpinner: void setBackgroundResource(int)
androidx.appcompat.widget.ActionBarContainer: ActionBarContainer(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void removeNotificationFromCache(android.content.Context,java.lang.Integer)
org.webrtc.LibaomAv1Encoder: long createNativeVideoEncoder()
com.yalantis.ucrop.view.GestureCropImageView: int getDoubleTapScaleSteps()
org.webrtc.VideoCodecInfo: java.lang.String toString()
org.webrtc.EglRenderer: void removeFrameListener(org.webrtc.EglRenderer$FrameListener)
androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)
org.webrtc.VideoTrack: boolean nativeGetShouldReceive(long)
org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit()
androidx.core.view.MenuItemCompat$Api26Impl: java.lang.CharSequence getTooltipText(android.view.MenuItem)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)
androidx.appcompat.widget.ViewStubCompat: int getLayoutResource()
com.dexterous.flutterlocalnotifications.models.Time: com.dexterous.flutterlocalnotifications.models.Time from(java.util.Map)
org.webrtc.VideoSource: void setIsScreencast(boolean)
com.google.android.gms.internal.auth.zzby: com.google.android.gms.internal.auth.zzby[] values()
org.webrtc.LibvpxVp9Encoder: long createNativeVideoEncoder()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)
org.webrtc.EglBase10Impl: long nativeGetCurrentNativeEGLContext()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.RtpParameters$Encoding: java.lang.String getRid()
org.webrtc.TextureBufferImpl: void lambda$new$0(org.webrtc.TextureBufferImpl$RefCountMonitor)
androidx.appcompat.widget.AppCompatSpinner: void setAdapter(android.widget.SpinnerAdapter)
androidx.core.app.ComponentActivity: ComponentActivity()
org.webrtc.CameraCapturer$3: void run()
androidx.appcompat.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State valueOf(java.lang.String)
org.webrtc.VideoEncoder$-CC: boolean $default$isHardwareEncoder(org.webrtc.VideoEncoder)
org.webrtc.NetworkMonitor: void access$400(org.webrtc.NetworkMonitor,java.util.List,int)
androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)
org.webrtc.LibvpxVp9Encoder: boolean isHardwareEncoder()
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
org.webrtc.JavaI420Buffer: int getStrideU()
org.webrtc.CameraCapturer: org.webrtc.CameraSession access$700(org.webrtc.CameraCapturer)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()
org.webrtc.SurfaceViewRenderer: void release()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String connectionStateString(org.webrtc.PeerConnection$PeerConnectionState)
org.webrtc.EglBase14Impl: void release()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerPadding(int)
org.webrtc.VideoFrame$Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.PeerConnectionFactory: void nativeShutdownInternalTracer()
org.webrtc.TextureBufferImpl$RefCountMonitor: void onRelease(org.webrtc.TextureBufferImpl)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
androidx.appcompat.widget.SearchView: void setQueryRefinementEnabled(boolean)
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int)
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
org.webrtc.PeerConnectionFactory: java.lang.String fieldTrialsFindFullName(java.lang.String)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.firebase.datatransport.TransportRegistrar: java.util.List getComponents()
androidx.core.widget.NestedScrollView: int getScrollRange()
androidx.window.core.Bounds: int getWidth()
androidx.window.layout.HardwareFoldingFeature$Type: HardwareFoldingFeature$Type(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean canCreateNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
org.webrtc.RtpParameters$Rtcp: java.lang.String getCname()
org.webrtc.HardwareVideoEncoder: HardwareVideoEncoder(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecMimeType,java.lang.Integer,java.lang.Integer,java.util.Map,int,int,org.webrtc.BitrateAdjuster,org.webrtc.EglBase14$Context)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode: WebRtcAudioRecord$AudioRecordStartErrorCode(java.lang.String,int)
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar: com.google.firebase.analytics.connector.AnalyticsConnector lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void logHealthData(int,java.lang.String,com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.dynamic.IObjectWrapper)
androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()
androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraFreezed(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map dtmfSenderToMap(org.webrtc.DtmfSender,java.lang.String)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String signalingStateString(org.webrtc.PeerConnection$SignalingState)
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
org.webrtc.Camera2Session$CameraStateCallback: void onOpened(android.hardware.camera2.CameraDevice)
org.webrtc.VideoCodecInfo: boolean equals(java.lang.Object)
org.webrtc.Logging: void deleteInjectedLoggable()
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet,int)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$I420Buffer lambda$toI420$1()
org.webrtc.EncodedImage: java.lang.Integer getQp()
org.webrtc.EncodedImage$Builder: EncodedImage$Builder()
org.webrtc.audio.AudioDeviceModule: void release()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$initAudioSwitch$2()
org.webrtc.RTCStats: void appendValue(java.lang.StringBuilder,java.lang.Object)
org.webrtc.SurfaceTextureHelper$1: java.lang.Object call()
org.webrtc.PeerConnection: void getStats(org.webrtc.RTCStatsCollectorCallback)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
org.webrtc.EglRenderer$EglSurfaceCreation: void run()
org.webrtc.RtpReceiver: void dispose()
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion()
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason[] values()
com.google.firebase.analytics.FirebaseAnalytics: void setCurrentScreen(android.app.Activity,java.lang.String,java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$CandidateNetworkPolicy getCandidateNetworkPolicy()
androidx.appcompat.widget.SearchView: void setAppSearchData(android.os.Bundle)
org.webrtc.Camera1Enumerator: java.util.List convertSizes(java.util.List)
androidx.window.layout.WindowInfoTracker$-CC: void reset()
io.objectbox.converter.FlexObjectConverter: void addVector(io.objectbox.flatbuffers.FlexBuffersBuilder,java.lang.String,java.util.List)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus resetCodec(int,int,boolean)
org.webrtc.RendererCommon$VideoLayoutMeasure: android.graphics.Point measure(int,int,int,int)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setRequireFrameEncryption(boolean)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: MediaConstraintsUtils()
com.google.android.gms.measurement.internal.zzah: com.google.android.gms.measurement.internal.zzah[] values()
org.webrtc.LibaomAv1Decoder: long createNativeVideoDecoder()
org.webrtc.GlGenericDrawer: org.webrtc.GlShader createShader(org.webrtc.GlGenericDrawer$ShaderType)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putLong(java.lang.String,long)
androidx.appcompat.widget.Toolbar: void setTitleMarginBottom(int)
androidx.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
androidx.core.widget.TextViewCompat$Api23Impl: android.content.res.ColorStateList getCompoundDrawableTintList(android.widget.TextView)
org.webrtc.EglBase10Impl: void createSurfaceInternal(java.lang.Object)
androidx.appcompat.widget.SearchView: void setQueryHint(java.lang.CharSequence)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: MethodCallHandlerImpl$4(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.HardwareVideoEncoder$YuvFormat: HardwareVideoEncoder$YuvFormat(java.lang.String,int)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.google.android.gms.common.api.internal.zzd: zzd()
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)
com.yalantis.ucrop.view.widget.AspectRatioTextView: void setActiveColor(int)
org.webrtc.PeerConnectionFactory$InitializationOptions: PeerConnectionFactory$InitializationOptions(android.content.Context,java.lang.String,boolean,org.webrtc.NativeLibraryLoader,java.lang.String,org.webrtc.Loggable,org.webrtc.Logging$Severity)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setConsent(android.os.Bundle,long)
org.webrtc.EglRenderer$EglSurfaceCreation: void setSurface(java.lang.Object)
androidx.appcompat.widget.ViewStubCompat: void setLayoutResource(int)
androidx.window.layout.SidecarCompat$TranslatingCallback: SidecarCompat$TranslatingCallback(androidx.window.layout.SidecarCompat)
androidx.appcompat.widget.Toolbar: void setSubtitle(int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
androidx.window.layout.WindowInfoTrackerImpl: WindowInfoTrackerImpl(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isEffectTypeAvailable(java.util.UUID)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onSetSuccess()
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()
androidx.window.embedding.SplitRule: int getLayoutDirection()
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: boolean test(java.lang.Object)
org.webrtc.MediaSource: MediaSource(long)
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMinStartBitrateBps()
org.webrtc.audio.WebRtcAudioRecord: void access$700(org.webrtc.audio.WebRtcAudioRecord,long,int,long)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.appcompat.widget.LinearLayoutCompat: void setShowDividers(int)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: java.util.List getComponents()
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.util.List getComponents()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()
org.webrtc.SurfaceEglRenderer: void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getStableWritableConnectionPingIntervalMs()
org.webrtc.ScreenCapturerAndroid: android.hardware.display.VirtualDisplay access$202(org.webrtc.ScreenCapturerAndroid,android.hardware.display.VirtualDisplay)
org.webrtc.TurnCustomizer: long getNativeTurnCustomizer()
org.webrtc.audio.WebRtcAudioTrack: boolean access$600(org.webrtc.audio.WebRtcAudioTrack)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.MethodCallHandlerImpl access$100(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: boolean equals(java.lang.Object)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dispose()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$selectAudioOutput$5(java.lang.Class)
org.webrtc.Camera2Session: boolean access$1602(org.webrtc.Camera2Session,boolean)
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread: WebRtcAudioTrack$AudioTrackThread(org.webrtc.voiceengine.WebRtcAudioTrack,java.lang.String)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable getReflected()
org.webrtc.audio.WebRtcAudioRecord: boolean startRecording()
kotlin.coroutines.AbstractCoroutineContextElement: AbstractCoroutineContextElement(kotlin.coroutines.CoroutineContext$Key)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnection getPeerConnection(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnection$RTCConfiguration parseRTCConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] values()
org.webrtc.CameraCapturer$1: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)
org.webrtc.SdpObserver: void onSetFailure(java.lang.String)
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)
org.webrtc.CameraCapturer: android.content.Context access$2100(org.webrtc.CameraCapturer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void rescheduleNotifications(android.content.Context)
androidx.window.core.Bounds: boolean isZero()
org.webrtc.EglBase: void swapBuffers()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] values()
org.webrtc.MediaStream: boolean nativeAddVideoTrackToNativeStream(long,long)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onWifiP2pGroupChange(android.net.wifi.p2p.WifiP2pGroup)
androidx.appcompat.view.menu.ListMenuItemView: void setSubMenuArrowVisible(boolean)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: ExtensionEmbeddingBackend$EmbeddingCallbackImpl(androidx.window.embedding.ExtensionEmbeddingBackend)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
org.webrtc.audio.WebRtcAudioRecord: int initRecording(int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getStats(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Logging: void nativeEnableLogTimeStamps()
org.webrtc.CameraCapturer$4: void onCameraFreezed(java.lang.String)
org.webrtc.EncodedImage: void retain()
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityStarted(com.google.android.gms.dynamic.IObjectWrapper,long)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener)
androidx.appcompat.widget.AppCompatTextView: void setPrecomputedText(androidx.core.text.PrecomputedTextCompat)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Rect getSurfaceFrame()
org.webrtc.GlGenericDrawer$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
org.webrtc.PeerConnectionFactory: boolean nativeStartInternalTracingCapture(java.lang.String)
org.webrtc.EglBase10Impl: void swapBuffers(long)
org.webrtc.VideoFrame: void release()
org.webrtc.VideoEncoderWrapper: void lambda$createEncoderCallback$0(long,org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo)
androidx.core.widget.TextViewCompat$Api17Impl: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
org.webrtc.Logging: void e(java.lang.String,java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer)
org.webrtc.Histogram: Histogram(long)
org.webrtc.voiceengine.WebRtcAudioManager: int getLowLatencyInputFramesPerBuffer()
org.webrtc.RtpParameters$Encoding: java.lang.Long getSsrc()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.graphics.drawable.IconCompat getIconFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource)
androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.webrtc.voiceengine.WebRtcAudioTrack: int getBufferSizeInFrames()
org.webrtc.NetworkMonitor: int androidSdkInt()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathOffset(float)
org.webrtc.RtpReceiver: org.webrtc.RtpParameters getParameters()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
org.webrtc.SurfaceTextureHelper: void stopListening()
com.cloudwebrtc.webrtc.R$color: R$color()
androidx.window.R$styleable: R$styleable()
org.webrtc.DynamicBitrateAdjuster: DynamicBitrateAdjuster()
org.webrtc.Logging: void enableTracing(java.lang.String,java.util.EnumSet)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerWidth()
androidx.appcompat.widget.SearchView: void setSuggestionsAdapter(androidx.cursoradapter.widget.CursorAdapter)
org.webrtc.GlShader: void useProgram()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$new$1(int)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $values()
com.yalantis.ucrop.view.TransformImageView: TransformImageView(android.content.Context,android.util.AttributeSet)
org.webrtc.JavaI420Buffer: org.webrtc.JavaI420Buffer wrap(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.VideoDecoder$DecodeInfo: VideoDecoder$DecodeInfo(boolean,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: boolean isEnabled(java.lang.String)
org.webrtc.TurnCustomizer: void checkTurnCustomizerExists()
org.webrtc.NV12Buffer: NV12Buffer(int,int,int,int,java.nio.ByteBuffer,java.lang.Runnable)
org.webrtc.HardwareVideoEncoder$YuvFormat: org.webrtc.HardwareVideoEncoder$YuvFormat[] values()
org.webrtc.voiceengine.WebRtcAudioManager: boolean isAAudioSupported()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void logEventAndBundle(java.lang.String,java.lang.String,android.os.Bundle,com.google.android.gms.internal.measurement.zzcf,long)
androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
androidx.appcompat.widget.AppCompatEditText: android.view.textclassifier.TextClassifier getTextClassifier()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: FlutterWebRTCPlugin$LifeCycleObserver(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin)
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
org.webrtc.FileVideoCapturer: FileVideoCapturer(java.lang.String)
androidx.core.text.ICUCompat$Api24Impl: java.lang.String getScript(java.lang.Object)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()
com.yalantis.ucrop.view.CropImageView: void setMaxScaleMultiplier(float)
org.webrtc.JNILogging: JNILogging(org.webrtc.Loggable)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
com.yalantis.ucrop.view.GestureCropImageView: void setGestureEnabled(boolean)
org.webrtc.PeerConnection$TcpCandidatePolicy: PeerConnection$TcpCandidatePolicy(java.lang.String,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.voiceengine.WebRtcAudioTrack: void setErrorCallback(org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback)
org.webrtc.CameraCapturer$2: void onCameraClosed(org.webrtc.CameraSession)
org.webrtc.RtpParameters$Encoding: boolean getActive()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivitySaveInstanceState(com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.internal.measurement.zzcf,long)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: void initializeInternalTracer()
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onCancel(java.lang.Object)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.MediaSource: void checkMediaSourceExists()
org.webrtc.SurfaceTextureHelper: void access$600(org.webrtc.SurfaceTextureHelper)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()
androidx.core.widget.TextViewCompat$Api23Impl: void setBreakStrategy(android.widget.TextView,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getRotation()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void stopRecording(java.lang.Integer)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushArray(com.cloudwebrtc.webrtc.utils.ConstraintsArray)
org.webrtc.Camera2Enumerator: boolean isBackFacing(java.lang.String)
org.webrtc.FileVideoCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$RtcpMuxPolicy getRtcpMuxPolicy()
org.webrtc.RtpSender: void nativeSetStreams(long,java.util.List)
org.webrtc.PeerConnectionFactory: void dispose()
org.webrtc.audio.WebRtcAudioTrack: long access$400(org.webrtc.audio.WebRtcAudioTrack)
org.webrtc.EglRenderer: void createEglSurfaceInternal(java.lang.Object)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverGetDirection(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraCapturer$2: void onCameraError(org.webrtc.CameraSession,java.lang.String)
org.webrtc.Camera1Session$2: void lambda$onPreviewFrame$1(byte[])
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
org.webrtc.Histogram: void addSample(int)
androidx.core.view.accessibility.AccessibilityRecordCompat$Api15Impl: int getMaxScrollX(android.view.accessibility.AccessibilityRecord)
org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback: void onWebRtcAudioTrackStartError(org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode,java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()
androidx.core.view.DisplayCutoutCompat$Api28Impl: java.util.List getBoundingRects(android.view.DisplayCutout)
org.webrtc.PeerConnectionFactory$Options: int getNetworkIgnoreMask()
androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onFirstFrameAvailable()
org.webrtc.Camera2Session$CaptureSessionCallback: void chooseStabilizationMode(android.hardware.camera2.CaptureRequest$Builder)
com.yalantis.ucrop.view.OverlayView: void setShowCropFrame(boolean)
androidx.core.os.CancellationSignal$Api16Impl: void cancel(java.lang.Object)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.GlTextureFrameBuffer: void release()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTransceiverOfType(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpReceiver: org.webrtc.RtpParameters nativeGetParameters(long)
org.webrtc.JNILogging: void logToInjectable(java.lang.String,java.lang.Integer,java.lang.String)
org.webrtc.BuiltinAudioDecoderFactoryFactory: long createNativeAudioDecoderFactory()
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] supportedCodecs()
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: JavaAudioDeviceModule$AudioSamples(int,int,int,byte[])
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.util.ArrayList toArrayList()
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType valueOf(java.lang.String)
org.webrtc.PeerConnection: org.webrtc.SessionDescription nativeGetLocalDescription()
org.webrtc.VideoEncoderWrapper: void nativeOnEncodedFrame(long,org.webrtc.EncodedImage)
org.webrtc.EglRenderer: java.lang.String averageTimeAsString(long,int)
androidx.appcompat.widget.Toolbar: void setOnMenuItemClickListener(androidx.appcompat.widget.Toolbar$OnMenuItemClickListener)
androidx.window.layout.WindowMetricsCalculator$Companion: WindowMetricsCalculator$Companion()
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int,int,int)
org.webrtc.LibvpxVp9Decoder: long nativeCreateDecoder()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackRelease(java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.R$drawable: R$drawable()
androidx.core.view.MenuItemCompat$Api26Impl: int getNumericModifiers(android.view.MenuItem)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: int access$000(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer)
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()
org.webrtc.Camera1Session: org.webrtc.Size findClosestPictureSize(android.hardware.Camera$Parameters,int,int)
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
org.webrtc.JniHelper: java.lang.Object getValue(java.util.Map$Entry)
org.webrtc.audio.WebRtcAudioTrack: boolean setStreamVolume(int)
androidx.window.java.R: R()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeColor(int)
androidx.appcompat.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate access$200(org.webrtc.NetworkMonitorAutoDetect)
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraSwitchHandler access$1202(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)
androidx.appcompat.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform[] values()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector$-CC: org.webrtc.VideoCodecInfo $default$onResolutionChange(org.webrtc.VideoEncoderFactory$VideoEncoderSelector,int,int)
org.webrtc.DtmfSender: DtmfSender(long)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: VideoFileRenderer(java.lang.String,org.webrtc.EglBase$Context,boolean)
org.webrtc.RtpSender: long nativeGetTrack(long)
androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)
androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setProgress(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection getCurrentDirection()
com.eak.mentor.app.MainActivity: MainActivity()
androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()
androidx.appcompat.widget.SearchView: int getMaxWidth()
org.webrtc.TextureBufferImpl$1: TextureBufferImpl$1(java.lang.Runnable)
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType fromNativeIndex(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$3$1: GetUserMediaImpl$3$1(com.cloudwebrtc.webrtc.GetUserMediaImpl$3)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus initEncodeInternal()
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void setActivity(android.app.Activity)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection fromNativeIndex(int)
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.DataChannel$Init: boolean getOrdered()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver nativeAddTransceiverWithTrack(long,org.webrtc.RtpTransceiver$RtpTransceiverInit)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void requestPermissions(android.content.Context,android.app.Activity,java.lang.String[],com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback)
androidx.appcompat.widget.ActionBarContainer: void setVisibility(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextRepeatingNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.MediaCodecVideoDecoderFactory: android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecMimeType)
org.webrtc.CameraCapturer: void access$1600(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection access$300(org.webrtc.ScreenCapturerAndroid)
io.objectbox.Transaction: boolean nativeIsReadOnly(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void schedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback: void onWebRtcAudioRecordSamplesReady(org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean)
org.webrtc.SurfaceEglRenderer: void pauseVideo()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean supportNetworkCallback()
androidx.appcompat.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)
androidx.core.app.NavUtils$Api16Impl: boolean navigateUpTo(android.app.Activity,android.content.Intent)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillColor(int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: ExtensionWindowLayoutInfoBackend$MulticastConsumer(android.app.Activity)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
org.webrtc.VideoSource$1: void onFrameCaptured(org.webrtc.VideoFrame)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
org.webrtc.VideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsCertPolicy(org.webrtc.PeerConnection$TlsCertPolicy)
androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void setPeerConnection(org.webrtc.PeerConnection)
org.webrtc.BuiltinAudioDecoderFactoryFactory: long nativeCreateBuiltinAudioDecoderFactory()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object)
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object)
org.webrtc.audio.WebRtcAudioRecord: boolean stopRecording()
androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()
androidx.appcompat.widget.Toolbar: void setLogo(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
androidx.window.layout.SidecarCompat: SidecarCompat(android.content.Context)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()
org.webrtc.audio.WebRtcAudioTrack: boolean access$900(org.webrtc.audio.WebRtcAudioTrack)
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context,android.util.AttributeSet,int)
org.webrtc.voiceengine.WebRtcAudioManager: boolean hasEarpiece()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.GlShader: int getAttribLocation(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setEnableInternalTracer(boolean)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus release()
org.webrtc.ContextUtils: void initialize(android.content.Context)
org.webrtc.PeerConnectionFactory: void nativeInitializeInternalTracer()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void start()
com.google.firebase.analytics.FirebaseAnalytics: java.lang.String getFirebaseInstanceId()
com.yalantis.ucrop.view.CropImageView: CropImageView(android.content.Context,android.util.AttributeSet)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraDisconnected()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceConnectionState iceConnectionState()
org.webrtc.CameraCapturer: org.webrtc.CameraSession$Events access$2000(org.webrtc.CameraCapturer)
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.objectbox.converter.StringMapConverter: java.lang.Object convertToEntityProperty(java.lang.Object)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryLoader(org.webrtc.NativeLibraryLoader)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()
org.webrtc.audio.WebRtcAudioTrack: void logBufferSizeInFrames()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
org.webrtc.SurfaceTextureHelper$1: org.webrtc.SurfaceTextureHelper call()
org.webrtc.CameraCapturer: CameraCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,org.webrtc.CameraEnumerator)
org.webrtc.PeerConnectionFactory: void nativePrintStackTrace(int)
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: void access$100(org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger)
androidx.appcompat.widget.AppCompatButton: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails fromNotificationDetails(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.voiceengine.WebRtcAudioManager: boolean isCommunicationModeEnabled()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ObjectType getType(java.lang.String)
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector createNetworkChangeDetector(android.content.Context,java.lang.String)
org.webrtc.MediaStreamTrack: java.lang.String nativeGetKind(long)
org.webrtc.voiceengine.WebRtcAudioRecord: void setOnAudioSamplesReady(org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback)
androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setSearchView(androidx.appcompat.widget.SearchView)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionCreateAnswer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.WebRtcAudioRecord: int logRecordingConfigurations(android.media.AudioRecord,boolean)
org.webrtc.WrappedNativeVideoDecoder: java.lang.String getImplementationName()
androidx.window.core.Bounds: int getLeft()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver$RtpTransceiverDirection stringToTransceiverDirection(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioManager: void setStereoInput(boolean)
org.webrtc.voiceengine.WebRtcAudioRecord: boolean stopRecording()
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushDouble(double)
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier valueOf(java.lang.String)
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: WindowMetricsCalculator$Companion$reset$1()
org.webrtc.SurfaceTextureHelper: SurfaceTextureHelper(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackStateCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback)
org.webrtc.CameraCapturer$4: void onCameraOpening(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: JavaAudioDeviceModule$AudioTrackStartErrorCode(java.lang.String,int)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion()
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType valueOf(java.lang.String)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setVisibleFraction(float,float)
org.webrtc.Camera1Enumerator: java.util.List convertFramerates(java.util.List)
org.webrtc.VideoFrame$I420Buffer$-CC: int $default$getBufferType(org.webrtc.VideoFrame$I420Buffer)
com.google.android.gms.cloudmessaging.CloudMessagingReceiver: CloudMessagingReceiver()
org.webrtc.JavaI420Buffer: int getStrideY()
org.webrtc.EglRenderer: void lambda$addFrameListener$3(org.webrtc.RendererCommon$GlDrawer,org.webrtc.EglRenderer$FrameListener,float,boolean)
org.webrtc.WrappedNativeI420Buffer: int getStrideU()
androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable getDividerDrawable()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckMinInterval()
org.webrtc.BaseBitrateAdjuster: BaseBitrateAdjuster()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
io.objectbox.converter.StringMapConverter: java.util.Map convertToEntityProperty(byte[])
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$Context,int[])
androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityStarted(android.app.Activity)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeatNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
org.webrtc.Logging: void enableLogToDebugOutput(org.webrtc.Logging$Severity)
androidx.core.app.ActivityCompat$Api23Impl: void requestPermissions(android.app.Activity,java.lang.String[],int)
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: int getAudioFormat()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: java.nio.ByteBuffer[] getInputBuffers()
org.webrtc.FileVideoCapturer: void tick()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void logEvent(java.lang.String,java.lang.String,android.os.Bundle,boolean,boolean,long)
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
org.webrtc.EglRenderer: void createEglSurface(android.view.Surface)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.graphics.Bitmap getBitmapFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
org.webrtc.EglRenderer: void clearSurfaceOnRenderThread(float,float,float,float)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCategory(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setConsentThirdParty(android.os.Bundle,long)
org.webrtc.Camera2Enumerator: java.util.List getSupportedSizes(android.hardware.camera2.CameraCharacteristics)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] $values()
org.webrtc.VideoEncoder$-CC: long $default$createNativeVideoEncoder(org.webrtc.VideoEncoder)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$I420Buffer allocateI420Buffer(int,int)
com.cloudwebrtc.webrtc.R$string: R$string()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void show(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] values()
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread: void run()
org.webrtc.CameraEnumerationAndroid$1: int diff(java.lang.Object)
androidx.appcompat.widget.AppCompatImageButton: void setImageResource(int)
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.SessionDescription: java.lang.String getTypeInCanonicalForm()
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void lambda$success$0(java.lang.Object)
androidx.appcompat.widget.AppCompatButton: void setBackgroundResource(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void access$000(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback access$800(org.webrtc.audio.WebRtcAudioRecord)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1(androidx.window.layout.SidecarCompat,android.app.Activity)
org.webrtc.JavaI420Buffer: int getHeight()
org.webrtc.NativeCapturerObserver: void onCapturerStarted(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
org.webrtc.DataChannel: void nativeClose()
com.google.firebase.iid.FirebaseInstanceIdReceiver: FirebaseInstanceIdReceiver()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String modeToString(int)
io.objectbox.exception.DbMaxReadersExceededException: DbMaxReadersExceededException(java.lang.String,int)
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraStatistics access$802(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.VideoDecoderFallback: long nativeCreateDecoder(org.webrtc.VideoDecoder,org.webrtc.VideoDecoder)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void registerPlugin(java.lang.String,io.flutter.plugins.firebase.core.FlutterFirebasePlugin)
androidx.window.core.Bounds: Bounds(android.graphics.Rect)
org.webrtc.PeerConnection$Observer: void onRemoveStream(org.webrtc.MediaStream)
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceGatheringState iceGatheringState()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpReceiverToMap(org.webrtc.RtpReceiver)
androidx.window.layout.WindowMetricsCalculatorCompat: WindowMetricsCalculatorCompat()
androidx.appcompat.widget.ActionBarOverlayLayout: int getNestedScrollAxes()
org.webrtc.MediaStream: void removeVideoTrack(long)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus reinitDecode(int,int)
org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback: void onWebRtcAudioTrackError(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.NetworkInfo)
org.webrtc.Camera2Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.EglRenderer$HandlerWithExceptionCallback: void dispatchMessage(android.os.Message)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetParameters(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void removeTrack(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.SearchView: SearchView(android.content.Context)
org.webrtc.SurfaceViewRenderer: void onLayout(boolean,int,int,int,int)
org.webrtc.SurfaceTextureHelper: void returnTextureFrame()
androidx.core.view.MenuItemCompat$Api26Impl: android.content.res.ColorStateList getIconTintList(android.view.MenuItem)
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] values()
androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStatsForTrack$0(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)
org.webrtc.Histogram: long nativeCreateCounts(java.lang.String,int,int,int)
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.utils.StringUtils: java.lang.Boolean isNullOrEmpty(java.lang.String)
androidx.window.core.Bounds: int getHeight()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setStream(org.webrtc.MediaStream)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String iceGatheringStateString(org.webrtc.PeerConnection$IceGatheringState)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getUserProperties(java.lang.String,java.lang.String,boolean,com.google.android.gms.internal.measurement.zzcf)
org.webrtc.PeerConnectionFactory: PeerConnectionFactory(long)
androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)
org.webrtc.JavaI420Buffer: int getWidth()
org.webrtc.SessionDescription$Type: java.lang.String canonicalForm()
io.objectbox.Transaction: boolean nativeIsOwnerThread(long)
org.webrtc.EglRenderer: void lambda$releaseEglSurface$5(java.lang.Runnable)
io.objectbox.exception.DbShutdownException: DbShutdownException(java.lang.String)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] values()
com.dexterous.flutterlocalnotifications.models.BitmapSource: BitmapSource(java.lang.String,int)
org.webrtc.VideoFrame: VideoFrame(org.webrtc.VideoFrame$Buffer,int,long)
org.webrtc.EglRenderer: void setFpsReduction(float)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isAcousticEchoCancelerEffectAvailable()
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: void setMarginEnd(android.view.ViewGroup$MarginLayoutParams,int)
org.webrtc.VideoFrameDrawer$YuvUploader: VideoFrameDrawer$YuvUploader()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)
org.webrtc.EglBase14Impl$Context: long getNativeEglContext()
org.webrtc.ThreadUtils$1Result: ThreadUtils$1Result()
org.webrtc.EglBase10Impl: void release()
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onNewBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.voiceengine.BuildInfo: java.lang.String getDeviceModel()
org.webrtc.BitrateAdjuster: int getAdjustedBitrateBps()
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)
androidx.appcompat.widget.ActionBarContextView: int getAnimatedVisibility()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String audioEncodingToString(int)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)
org.webrtc.Metrics: void add(java.lang.String,org.webrtc.Metrics$HistogramInfo)
org.webrtc.SurfaceViewRenderer: void setMirror(boolean)
org.webrtc.voiceengine.WebRtcAudioManager: int getLowLatencyOutputFramesPerBuffer()
org.webrtc.CapturerObserver: void onCapturerStarted(boolean)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $values()
org.webrtc.EglRenderer: void setErrorCallback(org.webrtc.EglRenderer$ErrorCallback)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback: void onWebRtcAudioTrackError(java.lang.String)
androidx.core.view.ViewCompat$Api18Impl: boolean isInLayout(android.view.View)
org.webrtc.VideoFileRenderer: void lambda$renderFrameOnRenderThread$1(org.webrtc.VideoFrame$I420Buffer,org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.utils.PermissionUtils: PermissionUtils()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onSetFailure(java.lang.String)
androidx.core.util.ObjectsCompat$Api19Impl: boolean equals(java.lang.Object,java.lang.Object)
org.webrtc.Camera1Session: void startCapturing()
com.google.android.gms.identity.intents.model.UserAddress: UserAddress()
org.webrtc.RtpTransceiver: boolean isStopped()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.PendingIntent getBroadcastPendingIntent(android.content.Context,int,android.content.Intent)
com.cloudwebrtc.webrtc.GetUserMediaImpl$3$1: void onStop()
org.webrtc.Camera1Session: Camera1Session(org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,int,android.hardware.Camera,android.hardware.Camera$CameraInfo,org.webrtc.CameraEnumerationAndroid$CaptureFormat,long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setRotation(float)
org.webrtc.PeerConnection$RTCConfiguration: int getIceBackupCandidatePairPingInterval()
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnection: void nativeClose()
org.webrtc.voiceengine.WebRtcAudioRecord: int getDefaultAudioSource()
io.objectbox.exception.DbException: int getErrorCode()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void areNotificationsEnabled(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] values()
org.webrtc.voiceengine.WebRtcAudioManager: boolean isLowLatencyInputSupported()
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.VideoFrame: long getTimestampNs()
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding valueOf(java.lang.String)
com.google.android.gms.measurement.AppMeasurement: void beginAdUnitExposure(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.net.Uri retrieveSoundResourceUri(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.models.SoundSource)
io.objectbox.exception.FileCorruptException: FileCorruptException(java.lang.String)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMajor()
androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)
org.webrtc.PeerConnection: void nativeSetLocalDescriptionAutomatically(org.webrtc.SdpObserver)
org.webrtc.audio.WebRtcAudioTrack: int channelCountToConfiguration(int)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getLogoDescription()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void setPathData(androidx.core.graphics.PathParser$PathDataNode[])
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)
org.webrtc.CameraEnumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.VideoFrame$I420Buffer: int getStrideY()
io.objectbox.BoxStore: void nativeDelete(long)
org.webrtc.AndroidVideoDecoder: void deliverByteFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer)
org.webrtc.Camera1Capturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.SdpObserver: void onCreateFailure(java.lang.String)
org.webrtc.NetworkMonitor: NetworkMonitor(org.webrtc.NetworkMonitor$1)
org.webrtc.voiceengine.WebRtcAudioUtils: void setWebRtcBasedNoiseSuppressor(boolean)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void onResume()
org.webrtc.GlGenericDrawer$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setEncodedHeight(int)
org.webrtc.CameraCapturer: int access$2400(org.webrtc.CameraCapturer)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putNull(java.lang.String)
kotlin.jvm.internal.FunctionReference: boolean isSuspend()
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.GlShader: void release()
androidx.core.view.ViewCompat$Api19Impl: int getAccessibilityLiveRegion(android.view.View)
org.webrtc.MediaSource: long getNativeMediaSource()
com.google.android.datatransport.cct.CctBackendFactory: com.google.android.datatransport.runtime.backends.TransportBackend create(com.google.android.datatransport.runtime.backends.CreationContext)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
io.objectbox.exception.DbException: DbException(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationDetails from(java.util.Map)
org.webrtc.VideoEncoderFactory$-CC: org.webrtc.VideoEncoderFactory$VideoEncoderSelector $default$getEncoderSelector(org.webrtc.VideoEncoderFactory)
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
org.webrtc.RefCounted: void release()
androidx.fragment.app.FragmentContainerView: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)
androidx.window.layout.WindowMetrics: WindowMetrics(androidx.window.core.Bounds)
org.webrtc.TextureBufferImpl: int getWidth()
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: AudioSamplesInterceptor()
org.webrtc.voiceengine.WebRtcAudioManager: int getNativeOutputSampleRate()
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
org.webrtc.voiceengine.WebRtcAudioUtils: boolean runningOnEmulator()
org.webrtc.LibaomAv1Encoder: LibaomAv1Encoder()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver: FlutterFirebaseMessagingReceiver()
org.webrtc.VideoSource: boolean access$202(org.webrtc.VideoSource,boolean)
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void onCancel(java.lang.Object)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService: FlutterFirebaseMessagingService()
org.webrtc.PeerConnection$IceServer: int hashCode()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $values()
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: CameraEnumerationAndroid$ClosestComparator(org.webrtc.CameraEnumerationAndroid$1)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix,int,int,int,int)
org.webrtc.NV12Buffer: void release()
org.webrtc.audio.JavaAudioDeviceModule: void release()
org.webrtc.voiceengine.WebRtcAudioTrack: int getStreamMaxVolume()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)
org.webrtc.AudioSource: AudioSource(long)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
org.webrtc.audio.WebRtcAudioRecord: java.nio.ByteBuffer access$300(org.webrtc.audio.WebRtcAudioRecord)
org.webrtc.CameraVideoCapturer$CameraStatistics: int access$104(org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.audio.WebRtcAudioUtils: WebRtcAudioUtils()
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
org.webrtc.EglBase: void swapBuffers(long)
de.julianassmann.flutter_background.IsolateHolderService: IsolateHolderService()
org.webrtc.VideoFrame$I420Buffer: int getStrideU()
androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)
androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setFrameType(org.webrtc.EncodedImage$FrameType)
com.google.firebase.iid.Registrar: com.google.firebase.iid.internal.FirebaseInstanceIdInternal lambda$getComponents$1$Registrar(com.google.firebase.components.ComponentContainer)
org.webrtc.audio.WebRtcAudioRecord$1: java.lang.Thread newThread(java.lang.Runnable)
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State[] values()
org.webrtc.EglBase14Impl: void makeCurrent()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.String getTurnLoggingId()
org.webrtc.NetworkMonitor: org.webrtc.NetworkMonitor getInstance()
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkVp9(android.media.MediaCodecInfo)
com.google.android.gms.measurement.AppMeasurementJobService: AppMeasurementJobService()
androidx.core.view.ViewCompat$Api19Impl: void setContentChangeTypes(android.view.accessibility.AccessibilityEvent,int)
androidx.appcompat.widget.AppCompatCheckedTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
org.webrtc.voiceengine.WebRtcAudioUtils: java.util.List getBlackListedModelsForAecUsage()
org.webrtc.CameraSession$-CC: int getDeviceOrientation(android.content.Context)
org.webrtc.SurfaceTextureHelper: void access$200(org.webrtc.SurfaceTextureHelper)
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Builder builder()
org.webrtc.VideoFrameDrawer: void calculateTransformedRenderSize(int,int,android.graphics.Matrix)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
org.webrtc.PeerConnectionFactory: void printInternalStackTraces(boolean)
androidx.appcompat.widget.AppCompatToggleButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)
org.webrtc.EglBase14Impl: void createPbufferSurface(int,int)
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: android.media.AudioManager access$000(org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setOpenGlesVersion(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference fromNativeIndex(int)
org.webrtc.GlUtil: java.nio.FloatBuffer createFloatBuffer(float[])
androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()
org.webrtc.PeerConnection: void nativeStopRtcEventLog()
com.google.android.gms.measurement.AppMeasurement: long generateEventId()
androidx.appcompat.widget.LinearLayoutCompat: int getBaseline()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getFrameSizePixels()
org.webrtc.Camera1Capturer: boolean isScreencast()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture getSurfaceTexture()
org.webrtc.RendererCommon: float convertScalingTypeToVisibleFraction(org.webrtc.RendererCommon$ScalingType)
androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()
org.webrtc.RTCStatsReport: java.lang.String toString()
com.yalantis.ucrop.view.CropImageView: void setImageToWrapCropBounds(boolean)
org.webrtc.PeerConnection$Observer: void onTrack(org.webrtc.RtpTransceiver)
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.GlRectDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String getThreadInfo()
androidx.window.layout.EmptyDecorator: EmptyDecorator()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: boolean checkVideoTrack(java.lang.String)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateY()
org.webrtc.MediaConstraints$KeyValuePair: int hashCode()
androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.lang.String getString(java.lang.String)
androidx.appcompat.widget.ButtonBarLayout: ButtonBarLayout(android.content.Context,android.util.AttributeSet)
kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(android.content.res.ColorStateList)
androidx.core.provider.FontProvider$Api16Impl: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTrack(org.webrtc.MediaStreamTrack,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase14Impl: void createDummyPbufferSurface()
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setTimeoutAfter(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.layout.WindowInfoTracker$-CC: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.AudioDecoderFactoryFactory: long createNativeAudioDecoderFactory()
org.webrtc.RtpParameters$Codec: java.lang.String getName()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.lang.Byte[] getByte(int)
androidx.core.app.NavUtils$Api16Impl: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)
androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.window.embedding.ActivityFilter: ActivityFilter(android.content.ComponentName,java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] values()
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsAlpnProtocols(java.util.List)
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode[] values()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void hasTorch(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.objectbox.converter.LongFlexMapConverter: void checkMapKeyType(java.lang.Object)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotX(float)
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
org.webrtc.audio.WebRtcAudioManager: WebRtcAudioManager()
org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadFromBuffer(org.webrtc.VideoFrame$I420Buffer)
org.webrtc.audio.WebRtcAudioManager: int getMinOutputFrameSize(int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState)
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: PeerConnectionFactory$InitializationOptions$Builder(android.content.Context)
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkDisconnect(long,long)
org.webrtc.Camera1Capturer: void stopCapture()
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
org.webrtc.RefCountDelegate: RefCountDelegate(java.lang.Runnable)
org.webrtc.ScreenCapturerAndroid: org.webrtc.CapturerObserver access$100(org.webrtc.ScreenCapturerAndroid)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] $values()
org.webrtc.WrappedNativeI420Buffer: int getWidth()
com.yalantis.ucrop.view.OverlayView: OverlayView(android.content.Context,android.util.AttributeSet)
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType getUnderlyingConnectionTypeForVpn()
io.objectbox.converter.FlexObjectConverter: void addValue(io.objectbox.flatbuffers.FlexBuffersBuilder,java.lang.Object)
org.webrtc.CandidatePairChangeEvent: CandidatePairChangeEvent(org.webrtc.IceCandidate,org.webrtc.IceCandidate,int,java.lang.String,int)
org.webrtc.NetworkMonitor: void init(android.content.Context)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
com.cloudwebrtc.webrtc.record.FrameCapturer: void lambda$onFrame$0()
androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)
androidx.window.embedding.ActivityFilter: java.lang.String toString()
org.webrtc.SurfaceViewRenderer: void removeFrameListener(org.webrtc.EglRenderer$FrameListener)
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector getNetworkChangeDetector()
io.objectbox.converter.StringLongMapConverter: boolean shouldRestoreAsLong(io.objectbox.flatbuffers.FlexBuffers$Reference)
org.webrtc.RtcCertificatePem: java.lang.String getPrivateKey()
org.webrtc.ScreenCapturerAndroid: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
org.webrtc.CameraCapturer: int access$1700(org.webrtc.CameraCapturer)
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)
androidx.window.embedding.SplitPairFilter: int hashCode()
org.webrtc.RendererCommon: android.graphics.Matrix convertMatrixToAndroidGraphicsMatrix(float[])
org.webrtc.DefaultVideoEncoderFactory: DefaultVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
androidx.appcompat.widget.AppCompatTextView: void setTextMetricsParamsCompat(androidx.core.text.PrecomputedTextCompat$Params)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTint(android.graphics.drawable.Drawable,int)
org.webrtc.PeerConnection$IceServer: java.lang.String getHostname()
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer getClockRate()
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOp(android.app.AppOpsManager,java.lang.String,java.lang.String)
androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)
org.webrtc.PeerConnectionFactory: void nativeInjectLoggable(org.webrtc.JNILogging,int)
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportImageTintList()
org.webrtc.RtpParameters$Encoding: boolean getAdaptivePTime()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getOutputFormat()
androidx.appcompat.widget.AppCompatRadioButton: void setSupportButtonTintList(android.content.res.ColorStateList)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
com.dexterous.flutterlocalnotifications.models.NotificationAction: NotificationAction(java.util.Map)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setSampleRate(int)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundResource(int)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType valueOf(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
org.webrtc.PeerConnectionFactory: long nativeGetNativePeerConnectionFactory(long)
org.webrtc.VideoCapturer: void changeCaptureFormat(int,int,int)
androidx.core.view.ViewCompat$Api16Impl: void setHasTransientState(android.view.View,boolean)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putArray(java.lang.String,java.util.ArrayList)
org.webrtc.voiceengine.WebRtcAudioManager: boolean getStereoInput()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] values()
androidx.appcompat.widget.LinearLayoutCompat: int getOrientation()
org.webrtc.PeerConnection$IceServer$Builder: PeerConnection$IceServer$Builder(java.util.List)
androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()
org.webrtc.voiceengine.BuildInfo: int getSdkVersion()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.HardwareVideoEncoder: java.lang.String getImplementationName()
org.webrtc.VideoEncoderWrapper: java.lang.Integer getScalingSettingsHigh(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
org.webrtc.WrappedNativeVideoEncoder: WrappedNativeVideoEncoder()
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
org.webrtc.voiceengine.WebRtcAudioUtils: void logIsStreamMute(java.lang.String,android.media.AudioManager,int,java.lang.StringBuilder)
org.webrtc.NV21Buffer: int getWidth()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void post(java.lang.Runnable)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraError(java.lang.String)
org.webrtc.RtpReceiver: void nativeUnsetObserver(long,long)
org.webrtc.voiceengine.WebRtcAudioEffects: WebRtcAudioEffects()
org.webrtc.PeerConnection$IceServer: java.lang.String toString()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ObjectType getType(int)
org.webrtc.RtpCapabilities$CodecCapability: RtpCapabilities$CodecCapability(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.lang.String,java.util.Map)
org.webrtc.audio.WebRtcAudioUtils: void logIsStreamMute(java.lang.String,android.media.AudioManager,int,java.lang.StringBuilder)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.TurnCustomizer getTurnCustomizer()
org.webrtc.voiceengine.WebRtcAudioTrack: void setErrorCallback(org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback)
kotlin.jvm.internal.FunctionReference: boolean isInfix()
org.webrtc.IceCandidate: boolean objectEquals(java.lang.Object,java.lang.Object)
org.webrtc.VideoCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.appcompat.widget.Toolbar: void setTitleTextColor(android.content.res.ColorStateList)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
androidx.core.view.ViewCompat$Api16Impl: int getMinimumWidth(android.view.View)
kotlin.jvm.internal.CallableReference: java.lang.String getSignature()
org.webrtc.GlUtil: GlUtil()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setRotation(int)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$BundlePolicy getBundlePolicy()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStats$2(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)
org.webrtc.Camera1Enumerator: Camera1Enumerator(boolean)
androidx.appcompat.widget.AppCompatTextView: java.lang.CharSequence getText()
org.webrtc.voiceengine.WebRtcAudioTrack: void logMainParameters()
org.webrtc.SurfaceViewRenderer: void surfaceCreated(android.view.SurfaceHolder)
org.webrtc.EglRenderer: void logD(java.lang.String)
org.webrtc.RtpTransceiver: void stopInternal()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
org.webrtc.LibvpxVp9Encoder: long nativeCreateEncoder()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()
org.webrtc.VideoEncoder$EncoderInfo: VideoEncoder$EncoderInfo(int,boolean)
androidx.core.app.RemoteInput$Api20Impl: void addResultsToIntent(java.lang.Object,android.content.Intent,android.os.Bundle)
androidx.appcompat.widget.AppCompatEditText: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
androidx.appcompat.widget.AppCompatButton: void setAutoSizeTextTypeWithDefaults(int)
androidx.appcompat.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void post(java.lang.Runnable)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
androidx.appcompat.app.AppCompatActivity: void setContentView(android.view.View)
org.webrtc.RTCStats: java.lang.String toString()
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: OutputAudioSamplesInterceptor(org.webrtc.audio.JavaAudioDeviceModule)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityCreated(android.app.Activity,android.os.Bundle)
androidx.appcompat.widget.Toolbar: android.view.Menu getMenu()
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
androidx.appcompat.widget.AppCompatEditText: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: ConstraintsMap(java.util.Map)
org.webrtc.voiceengine.WebRtcAudioUtils: void logAudioStateBasic(java.lang.String,android.media.AudioManager)
org.webrtc.DefaultVideoDecoderFactory: DefaultVideoDecoderFactory(org.webrtc.VideoDecoderFactory)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Boolean getCombinedAudioVideoBwe()
org.webrtc.audio.WebRtcAudioRecord: void logMainParametersExtended()
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encodeTextureBuffer(org.webrtc.VideoFrame,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String getNextStreamUUID()
org.webrtc.VideoSink: void onFrame(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.StateProvider: boolean putLocalStream(java.lang.String,org.webrtc.MediaStream)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String getSourceIdConstraint(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[])
org.webrtc.YuvHelper: void ABGRToI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.EglRenderer: EglRenderer(java.lang.String)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack$State nativeGetState(long)
org.webrtc.PeerConnection$RTCConfiguration: boolean getActiveResetSrtpParams()
androidx.appcompat.widget.AppCompatSpinner: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVisibility(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.R$styleable: R$styleable()
org.webrtc.audio.WebRtcAudioTrack: void logBufferCapacityInFrames()
androidx.core.view.ViewCompat$Api16Impl: void requestFitSystemWindows(android.view.View)
io.objectbox.exception.DbException: DbException(java.lang.String,java.lang.Throwable)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onSetSuccess()
androidx.appcompat.widget.AbsActionBarView: void setVisibility(int)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableDscp()
androidx.appcompat.widget.LinearLayoutCompat: void setOrientation(int)
androidx.appcompat.widget.SearchView: void setSubmitButtonEnabled(boolean)
com.yalantis.ucrop.view.OverlayView: com.yalantis.ucrop.callback.OverlayViewChangeListener getOverlayViewChangeListener()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType valueOf(java.lang.String)
org.webrtc.PeerConnection$Observer: void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: WindowInfoTrackerImpl$windowLayoutInfo$1(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)
org.webrtc.MediaStreamTrack: boolean enabled()
androidx.appcompat.widget.AppCompatTextView: int[] getAutoSizeTextAvailableSizes()
org.webrtc.PeerConnection: org.webrtc.RtpSender createSender(java.lang.String,java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: boolean getDisableIpv6()
org.webrtc.Camera1Session$2: Camera1Session$2(org.webrtc.Camera1Session)
com.google.firebase.datatransport.TransportRegistrar: com.google.android.datatransport.TransportFactory lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
androidx.appcompat.widget.SearchView: void setMaxWidth(int)
com.yalantis.ucrop.view.GestureCropImageView: float getDoubleTapTargetScale()
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: void setMarginStart(android.view.ViewGroup$MarginLayoutParams,int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean getBoolean(java.lang.String)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetEqFactoryFactory(org.webrtc.NetEqFactoryFactory)
org.webrtc.NetworkMonitor$2: java.lang.String getFieldTrialsString()
org.webrtc.SurfaceTextureHelper: boolean access$502(org.webrtc.SurfaceTextureHelper,boolean)
io.objectbox.exception.DbException: java.lang.String toString()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotifications(android.content.Context,java.util.ArrayList)
org.webrtc.EglRenderer: void clearImage()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: FlutterFirebaseAppRegistrar()
org.webrtc.VideoFileRenderer: org.webrtc.EglBase access$000(org.webrtc.VideoFileRenderer)
org.webrtc.IceCandidate: int hashCode()
org.webrtc.VideoSource: java.lang.Object access$100(org.webrtc.VideoSource)
com.yalantis.ucrop.view.CropImageView: float getTargetAspectRatio()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.Object getPrivateProperty(java.lang.Class,java.lang.Object,java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityCreated(com.google.android.gms.dynamic.IObjectWrapper,android.os.Bundle,long)
androidx.core.view.MenuItemCompat$Api26Impl: java.lang.CharSequence getContentDescription(android.view.MenuItem)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setSessionTimeoutDuration(long)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.AppCompatSpinner: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: PermissionUtils$RequestPermissionsFragment()
org.webrtc.Camera1Capturer: void startCapture(int,int,int)
org.webrtc.YuvConverter: YuvConverter(org.webrtc.VideoFrameDrawer)
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
org.webrtc.SurfaceViewRenderer: void onMeasure(int,int)
org.webrtc.NetworkChangeDetector$IPAddress: NetworkChangeDetector$IPAddress(byte[])
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void error(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.PeerConnectionFactory: void onSignalingThreadReady()
org.webrtc.EglBase: boolean hasSurface()
androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)
org.webrtc.voiceengine.WebRtcAudioTrack: int getStreamVolume()
org.webrtc.RefCountDelegate: void release()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void setPreferredInputDevice(int)
org.webrtc.voiceengine.WebRtcAudioTrack: void reportWebRtcAudioTrackError(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: void stopThread()
org.webrtc.voiceengine.WebRtcAudioTrack: void access$100(boolean)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void queueInputBuffer(int,int,int,long,int)
org.webrtc.PeerConnection$Observer: void onDataChannel(org.webrtc.DataChannel)
org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateY(float)
org.webrtc.SurfaceTextureHelper: void lambda$forceFrame$3()
org.webrtc.VideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)
androidx.core.view.ViewGroupCompat$Api21Impl: int getNestedScrollAxes(android.view.ViewGroup)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: org.webrtc.MediaConstraints parseMediaConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.appcompat.widget.AppCompatSpinner: java.lang.CharSequence getPrompt()
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceConnectionState nativeIceConnectionState()
androidx.core.graphics.drawable.DrawableCompat$Api19Impl: android.graphics.drawable.Drawable getDrawable(android.graphics.drawable.InsetDrawable)
org.webrtc.VideoFrame$I420Buffer: int getStrideV()
org.webrtc.RtpParameters$HeaderExtension: java.lang.String getUri()
io.objectbox.BoxStore: boolean nativeStopObjectBrowser(long)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void removeVideoCapturer(java.lang.String)
androidx.appcompat.widget.Toolbar: void setCollapsible(boolean)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMajor()
org.webrtc.Metrics: Metrics()
org.webrtc.VideoFileRenderer: org.webrtc.YuvConverter access$102(org.webrtc.VideoFileRenderer,org.webrtc.YuvConverter)
androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
org.webrtc.RtpParameters: java.util.List getHeaderExtensions()
com.cloudwebrtc.webrtc.DataChannelObserver: void onBufferedAmountChange(long)
org.webrtc.VideoTrack: void nativeFreeSink(long)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: int compare(java.lang.Object,java.lang.Object)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.Integer getConstrainInt(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String)
com.yalantis.ucrop.view.TransformImageView: void setMaxBitmapSize(int)
androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void flush()
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
org.webrtc.audio.WebRtcAudioRecord: void logMainParameters()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes$Builder applyAttributesOnQOrHigher(android.media.AudioAttributes$Builder,android.media.AudioAttributes)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.voiceengine.WebRtcAudioUtils: void logAudioStateVolume(java.lang.String,android.media.AudioManager)
com.cloudwebrtc.webrtc.GetUserMediaImpl: org.webrtc.AudioTrack getUserAudio(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.BitrateAdjuster: void setTargets(int,double)
org.webrtc.ThreadUtils: boolean joinUninterruptibly(java.lang.Thread,long)
org.webrtc.CameraCapturer: int access$2200(org.webrtc.CameraCapturer)
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAlignedChildIndex(int)
org.webrtc.audio.WebRtcAudioRecord: void setPreferredDevice(android.media.AudioDeviceInfo)
org.webrtc.RtpParameters$HeaderExtension: int getId()
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getExternalCacheDirs(android.content.Context)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: FlutterFirebasePluginRegistry()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$100(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.widget.TextViewCompat$Api23Impl: void setCompoundDrawableTintMode(android.widget.TextView,android.graphics.PorterDuff$Mode)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onResolutionChange(int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStatsForTrack$1(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection getDirection()
org.webrtc.voiceengine.WebRtcAudioUtils: int getDefaultSampleRateHz()
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverSetCodecPreferences(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.AbsActionBarView: int getContentHeight()
org.webrtc.Histogram: org.webrtc.Histogram createCounts(java.lang.String,int,int,int)
org.webrtc.MediaCodecWrapper: android.view.Surface createInputSurface()
org.webrtc.VideoFrame$Buffer: void retain()
com.twilio.audioswitch.AbstractAudioSwitch$State: com.twilio.audioswitch.AbstractAudioSwitch$State[] values()
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: BigTextStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean)
androidx.core.text.ICUCompat$Api21Impl: java.lang.String getScript(java.util.Locale)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode)
org.webrtc.PeerConnectionDependencies$Builder: PeerConnectionDependencies$Builder(org.webrtc.PeerConnection$Observer)
org.webrtc.VideoCodecMimeType: VideoCodecMimeType(java.lang.String,int,java.lang.String)
org.webrtc.CameraCapturer: void access$2500(org.webrtc.CameraCapturer,java.lang.String,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
androidx.window.embedding.SplitPairFilter: SplitPairFilter(android.content.ComponentName,android.content.ComponentName,java.lang.String)
androidx.core.widget.ImageViewCompat$Api21Impl: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$502(com.cloudwebrtc.webrtc.GetUserMediaImpl,boolean)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotifications(io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setAlphabeticShortcut(android.view.MenuItem,char,int)
androidx.appcompat.app.AlertController$RecycleListView: AlertController$RecycleListView(android.content.Context,android.util.AttributeSet)
org.webrtc.Camera2Enumerator: java.lang.String[] getDeviceNames()
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void lambda$error$1(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioSource(int)
com.dexterous.flutterlocalnotifications.models.Time: Time()
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State fromNativeIndex(int)
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode: org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode valueOf(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: void setTitleOptional(boolean)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLost(android.net.Network)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack)
org.webrtc.RtpCapabilities: java.util.List getHeaderExtensions()
androidx.core.widget.CompoundButtonCompat$Api21Impl: android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)
org.webrtc.CalledByNative: java.lang.String value()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
androidx.core.os.CancellationSignal$Api16Impl: android.os.CancellationSignal createCancellationSignal()
org.webrtc.PeerConnection: void nativeAddIceCandidateWithObserver(java.lang.String,int,java.lang.String,org.webrtc.AddIceObserver)
org.webrtc.PeerConnection: void setAudioPlayout(boolean)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeDirection(long)
androidx.core.view.ViewParentCompat$Api21Impl: void onStopNestedScroll(android.view.ViewParent,android.view.View)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: WebRtcAudioRecord$AudioSamples(android.media.AudioRecord,byte[])
androidx.core.view.ViewPropertyAnimatorCompat$Api19Impl: android.view.ViewPropertyAnimator setUpdateListener(android.view.ViewPropertyAnimator,android.animation.ValueAnimator$AnimatorUpdateListener)
org.webrtc.DtmfSender: void checkDtmfSenderExists()
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dispose()
io.objectbox.converter.IntegerLongMapConverter: boolean shouldRestoreAsLong(io.objectbox.flatbuffers.FlexBuffers$Reference)
androidx.core.widget.EdgeEffectCompat$Api31Impl: float onPullDistance(android.widget.EdgeEffect,float,float)
androidx.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)
androidx.appcompat.widget.AppCompatSpinner: void setDropDownVerticalOffset(int)
org.webrtc.EglRenderer: void disableFpsReduction()
org.webrtc.RTCStatsCollectorCallback: void onStatsDelivered(org.webrtc.RTCStatsReport)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setImeVisibility(boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readInboxStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
org.webrtc.Logging$Severity: Logging$Severity(java.lang.String,int)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
org.webrtc.CryptoOptions$Builder: CryptoOptions$Builder()
org.webrtc.audio.WebRtcAudioRecord: void access$200(org.webrtc.audio.WebRtcAudioRecord,int)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeTextType()
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] values()
org.webrtc.TextureBufferImpl: int getHeight()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getSources(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Camera2Session: android.view.Surface access$1000(org.webrtc.Camera2Session)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean)
org.webrtc.AudioSource: long getNativeAudioSource()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getCurrentScreenName(com.google.android.gms.internal.measurement.zzcf)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void notImplemented()
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdk(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
com.dexterous.flutterlocalnotifications.NotificationStyle: NotificationStyle(java.lang.String,int)
org.webrtc.NetworkMonitor: boolean networkBindingSupported()
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)
org.webrtc.PeerConnectionFactory: org.webrtc.AudioSource createAudioSource(org.webrtc.MediaConstraints)
org.webrtc.PeerConnection$RTCConfiguration: boolean getPruneTurnPorts()
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoCodecStatus $default$setRates(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.MediaStream: void dispose()
org.webrtc.RtpTransceiver$RtpTransceiverInit: int getDirectionNativeIndex()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: NetworkMonitorAutoDetect$WifiDirectManagerDelegate(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
org.webrtc.SurfaceViewRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float)
org.webrtc.audio.WebRtcAudioRecord: void assertTrue(boolean)
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: void onCameraSwitchError(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceUnwritableTimeout()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMediaStyle(androidx.core.app.NotificationCompat$Builder)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: FlutterWebRTCPlugin$LifeCycleObserver(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean setNS(boolean)
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
org.webrtc.SurfaceViewRenderer: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)
org.webrtc.VideoEncoder$CodecSpecificInfoAV1: VideoEncoder$CodecSpecificInfoAV1()
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.WebRtcClassLoader: java.lang.Object getClassLoader()
org.webrtc.SurfaceEglRenderer: void surfaceCreated(android.view.SurfaceHolder)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$Buffer copyI420Buffer(java.nio.ByteBuffer,int,int,int,int)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getTitle()
androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordError(java.lang.String)
org.webrtc.DtmfSender: int nativeInterToneGap(long)
org.webrtc.MediaStream: java.lang.String toString()
org.webrtc.GlTextureFrameBuffer: int getWidth()
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion()
org.webrtc.PeerConnection: long getNativeOwnedPeerConnection()
org.webrtc.RtpTransceiver: boolean setDirection(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetStart()
androidx.appcompat.widget.ViewStubCompat: void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat$OnInflateListener)
org.webrtc.AddIceObserver: void onAddSuccess()
org.webrtc.CameraSession$Events: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)
kotlin.jvm.internal.FunctionReference: java.lang.String toString()
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus release()
com.cloudwebrtc.webrtc.StateProvider: android.content.Context getApplicationContext()
org.webrtc.MediaCodecWrapperFactoryImpl: org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String)
androidx.appcompat.widget.Toolbar: void setTitle(int)
androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)
org.webrtc.Camera2Session: android.hardware.camera2.CameraCaptureSession access$100(org.webrtc.Camera2Session)
org.webrtc.voiceengine.WebRtcAudioRecord: boolean access$300()
org.webrtc.SurfaceEglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.VideoEncoder$CodecSpecificInfoH264: VideoEncoder$CodecSpecificInfoH264()
org.webrtc.NetworkMonitorAutoDetect$NetworkState: NetworkMonitorAutoDetect$NetworkState(boolean,int,int,int,int)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoEncoderFactory$VideoEncoderSelector getEncoderSelector()
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context)
androidx.appcompat.widget.Toolbar: android.widget.TextView getSubtitleTextView()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationCompat$MessagingStyle$Message createMessage(android.content.Context,com.dexterous.flutterlocalnotifications.models.MessageDetails)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.view.Surface getSurface()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()
org.webrtc.PeerConnection: void close()
org.webrtc.YuvConverter$ShaderCallbacks: YuvConverter$ShaderCallbacks()
org.webrtc.NV12Buffer: void retain()
org.webrtc.NetworkMonitor: void removeNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver)
androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)
org.webrtc.MediaCodecWrapper: int dequeueInputBuffer(long)
kotlin.jvm.internal.CallableReference: java.lang.String getName()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamAddTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkMonitor: void addObserver(org.webrtc.NetworkMonitor$NetworkObserver)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] values()
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMinBitrateBps()
org.webrtc.RefCountDelegate: void retain()
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] values()
org.webrtc.PeerConnectionDependencies: PeerConnectionDependencies(org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier,org.webrtc.PeerConnectionDependencies$1)
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] values()
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getLogo()
org.webrtc.VideoCodecMimeType: java.lang.String mimeType()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getBufferSizeInFrames()
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
org.webrtc.Camera2Session$CaptureSessionCallback: Camera2Session$CaptureSessionCallback(org.webrtc.Camera2Session)
androidx.appcompat.widget.Toolbar: void setCollapseIcon(int)
androidx.core.app.AlarmManagerCompat$Api23Impl: void setExactAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent)
org.webrtc.VideoFrameDrawer: VideoFrameDrawer()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] values()
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context,long,java.lang.String)
org.webrtc.PeerConnectionFactory$Options: boolean getDisableNetworkMonitor()
org.webrtc.GlTextureFrameBuffer: GlTextureFrameBuffer(int)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()
org.webrtc.PeerConnection: boolean removeTrack(org.webrtc.RtpSender)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor valueOf(java.lang.String)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: void doAudioRecordStateCallback(int)
org.webrtc.audio.WebRtcAudioRecord: boolean checkDeviceMatch(android.media.AudioDeviceInfo,android.media.AudioDeviceInfo)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
org.webrtc.NetworkMonitorAutoDetect: void setIncludeWifiDirect(boolean)
androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onRetainBuffer(org.webrtc.VideoFrame$TextureBuffer)
androidx.core.view.ViewCompat$Api16Impl: int getImportantForAccessibility(android.view.View)
org.webrtc.Camera1Session: void checkIsOnCameraThread()
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus initDecodeInternal(int,int)
org.webrtc.HardwareVideoEncoderFactory: int getForcedKeyFrameIntervalMs(org.webrtc.VideoCodecMimeType,java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean)
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
androidx.core.app.AppOpsManagerCompat$Api29Impl: java.lang.String getOpPackageName(android.content.Context)
org.webrtc.PeerConnection: void nativeSetAudioRecording(boolean)
androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack access$000(org.webrtc.audio.WebRtcAudioTrack)
androidx.core.widget.EdgeEffectCompat$Api31Impl: float getDistance(android.widget.EdgeEffect)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)
org.webrtc.Camera1Enumerator: int getCameraIndex(java.lang.String)
kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()
org.webrtc.ContextUtils: android.content.Context getApplicationContext()
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isNoiseSuppressorEffectAvailable()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
org.webrtc.WrappedNativeI420Buffer: int getStrideY()
org.webrtc.HardwareVideoEncoder$BusyCount: HardwareVideoEncoder$BusyCount()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.MediaConstraints: MediaConstraints()
org.webrtc.AudioTrack: void nativeSetVolume(long,double)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback: void onWebRtcAudioTrackStart()
androidx.core.widget.NestedScrollView: float getTopFadingEdgeStrength()
androidx.core.text.ICUCompat$Api24Impl: android.icu.util.ULocale addLikelySubtags(java.lang.Object)
org.webrtc.RendererCommon$ScalingType: RendererCommon$ScalingType(java.lang.String,int)
org.webrtc.RtpParameters$Rtcp: boolean getReducedSize()
org.webrtc.SurfaceTextureHelper: boolean access$500(org.webrtc.SurfaceTextureHelper)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigPictureStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.RtpParameters: java.lang.String getTransactionId()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dataChannelSend(java.lang.String,java.nio.ByteBuffer,java.lang.Boolean)
androidx.window.layout.SidecarAdapter: SidecarAdapter()
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] values()
com.yalantis.ucrop.view.TransformImageView: com.yalantis.ucrop.model.ExifInfo getExifInfo()
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: int getChannelCount()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encodeByteBuffer(org.webrtc.VideoFrame,long,org.webrtc.VideoFrame$Buffer,int)
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits()
androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)
androidx.core.widget.TextViewCompat$Api16Impl: int getMaxLines(android.widget.TextView)
androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: boolean isConnected()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathStart()
com.google.android.gms.internal.measurement.zzbn: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
org.webrtc.CameraCapturer: boolean access$1102(org.webrtc.CameraCapturer,boolean)
org.webrtc.TextureBufferImpl$2: void onDestroy(org.webrtc.TextureBufferImpl)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent getLaunchIntent(android.content.Context)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] values()
org.webrtc.CameraEnumerationAndroid$2: int diff(org.webrtc.Size)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $values()
org.webrtc.voiceengine.BuildInfo: java.lang.String getBuildType()
org.webrtc.DataChannel: org.webrtc.DataChannel$State state()
org.webrtc.PeerConnection: void nativeSetAudioPlayout(boolean)
org.webrtc.voiceengine.WebRtcAudioRecord: android.media.AudioRecord access$000(org.webrtc.voiceengine.WebRtcAudioRecord)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setPassword(java.lang.String)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: ConstraintsArray(java.util.ArrayList)
com.yalantis.ucrop.view.UCropView: com.yalantis.ucrop.view.GestureCropImageView getCropImageView()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void trackDispose(java.lang.String)
org.webrtc.JavaI420Buffer: void lambda$allocate$0(java.nio.ByteBuffer)
androidx.appcompat.widget.ContentFrameLayout: void setAttachListener(androidx.appcompat.widget.ContentFrameLayout$OnAttachListener)
org.webrtc.MediaConstraints: java.util.List getMandatory()
org.webrtc.VideoCodecInfo: java.lang.String getName()
org.webrtc.ScreenCapturerAndroid: void dispose()
androidx.appcompat.widget.Toolbar: void setPopupTheme(int)
io.objectbox.Cursor: long nativeRenew(long)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity valueOf(java.lang.String)
org.webrtc.GlTextureFrameBuffer: int getFrameBufferId()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void enableSpeakerphone(boolean)
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread: void run()
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: java.util.List getComponents()
androidx.window.core.Bounds: boolean equals(java.lang.Object)
androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)
org.webrtc.audio.JavaAudioDeviceModule: void setPreferredInputDevice(android.media.AudioDeviceInfo)
org.webrtc.PeerConnection$RTCConfiguration: boolean getSurfaceIceCandidatesOnIceTransportTypeChanged()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean hasKey(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParamsCompat()
androidx.appcompat.widget.Toolbar: void setContentInsetStartWithNavigation(int)
androidx.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
androidx.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.DecorToolbar getWrapper()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathEnd(float)
org.webrtc.ThreadUtils$1CaughtException: ThreadUtils$1CaughtException()
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] values()
org.webrtc.Camera2Enumerator: java.util.List convertSizes(android.util.Size[])
androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()
org.webrtc.PeerConnection: boolean nativeStartRtcEventLog(int,int)
org.webrtc.RendererCommon: float[] convertMatrixFromAndroidGraphicsMatrix(android.graphics.Matrix)
org.webrtc.PeerConnection$IceServer: java.util.List getUrls()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind fromTypeName(java.lang.String)
androidx.appcompat.widget.AppCompatSpinner: void setDropDownHorizontalOffset(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
androidx.media.AudioAttributesImplBase: AudioAttributesImplBase()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: ConstraintsArray()
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
org.webrtc.audio.WebRtcAudioEffects: void enable(int)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setBuffer(java.nio.ByteBuffer,java.lang.Runnable)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails readPersonDetails(java.util.Map)
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection access$302(org.webrtc.ScreenCapturerAndroid,android.media.projection.MediaProjection)
org.webrtc.RtpCapabilities$CodecCapability: org.webrtc.MediaStreamTrack$MediaType getKind()
org.webrtc.VideoDecoderFallback: VideoDecoderFallback(org.webrtc.VideoDecoder,org.webrtc.VideoDecoder)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$AdapterType getNetworkPreference()
org.webrtc.VideoSource: org.webrtc.NativeAndroidVideoTrackSource access$000(org.webrtc.VideoSource)
org.webrtc.Camera2Session: org.webrtc.SurfaceTextureHelper access$900(org.webrtc.Camera2Session)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStreamTrack getLocalTrack(java.lang.String)
org.webrtc.EglRenderer$EglSurfaceCreation: EglRenderer$EglSurfaceCreation(org.webrtc.EglRenderer,org.webrtc.EglRenderer$1)
org.webrtc.Camera1Enumerator: java.lang.String getDeviceName(int)
org.webrtc.CryptoOptions$Srtp: CryptoOptions$Srtp(org.webrtc.CryptoOptions,boolean,boolean,boolean,org.webrtc.CryptoOptions$1)
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
org.webrtc.VideoEncoderFallback: boolean isHardwareEncoder()
org.webrtc.MediaStream: java.lang.String getId()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: void start()
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.RtpTransceiver: void checkRtpTransceiverExists()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
androidx.window.core.Version: Version(int,int,int,java.lang.String)
org.webrtc.LibvpxVp9Decoder: boolean nativeIsSupported()
org.webrtc.NetworkMonitor$2: void onNetworkPreference(java.util.List,int)
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: java.lang.String getWifiSSID()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: void setStreamSettings(org.webrtc.VideoEncoder$Settings)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getMaxUserProperties(java.lang.String,com.google.android.gms.internal.measurement.zzcf)
org.webrtc.ThreadUtils: void joinUninterruptibly(java.lang.Thread)
org.webrtc.ScreenCapturerAndroid: void onFrame(org.webrtc.VideoFrame)
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLContext createEglContext(javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int)
io.objectbox.Transaction: void nativeRecycle(long)
org.webrtc.PeerConnection: boolean addStream(org.webrtc.MediaStream)
androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
org.webrtc.voiceengine.BuildInfo: java.lang.String getAndroidBuildId()
org.webrtc.Camera2Session: int access$2000(org.webrtc.Camera2Session)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class access$100(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
org.webrtc.BitrateAdjuster: void reportEncodedFrame(int)
org.webrtc.ThreadUtils$ThreadChecker: void checkIsOnValidThread()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] values()
org.webrtc.VideoEncoder$Callback: void onEncodedFrame(org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo)
org.webrtc.Camera2Session: void reportError(java.lang.String)
org.webrtc.DefaultVideoDecoderFactory: DefaultVideoDecoderFactory(org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits()
org.webrtc.DynamicBitrateAdjuster: void reportEncodedFrame(int)
androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map describeIcon(androidx.core.graphics.drawable.IconCompat)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetRemoteDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readMessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$TcpCandidatePolicy getTcpCandidatePolicy()
org.webrtc.EncodedImage$FrameType: int getNative()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: ExtensionEmbeddingBackend$SplitListenerWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.webrtc.CameraCapturer: void access$1800(org.webrtc.CameraCapturer,int)
org.webrtc.RtpTransceiver: java.lang.String getMid()
androidx.core.app.ActivityCompat$Api16Impl: void finishAffinity(android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.core.app.RemoteInput$Api26Impl: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)
org.webrtc.Camera1Session$SessionState: Camera1Session$SessionState(java.lang.String,int)
org.webrtc.VideoEncoder$ScalingSettings: java.lang.String toString()
com.google.android.gms.internal.measurement.zznf: com.google.android.gms.internal.measurement.zznf[] values()
com.yalantis.ucrop.view.CropImageView: float getMinScale()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
org.webrtc.NetworkMonitor: boolean isOnline()
org.webrtc.VideoFrame$TextureBuffer$Type: int getGlTarget()
org.webrtc.HardwareVideoEncoder: void deliverEncodedImage()
org.webrtc.SurfaceEglRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.CameraSession: void stop()
org.webrtc.VideoCapturer: boolean isScreencast()
com.yalantis.ucrop.view.TransformImageView: float getCurrentScale()
androidx.appcompat.widget.SearchView: int getSuggestionRowLayout()
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter)
org.webrtc.PlatformSoftwareVideoDecoderFactory: PlatformSoftwareVideoDecoderFactory(org.webrtc.EglBase$Context)
org.webrtc.voiceengine.WebRtcAudioUtils: void logAudioState(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void release()
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void stop()
org.webrtc.EglRenderer: void renderFrameOnRenderThread()
com.google.android.gms.measurement.AppMeasurementReceiver: AppMeasurementReceiver()
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: void onReceive(android.content.Context,android.content.Intent)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioEncoderFactoryFactory(org.webrtc.AudioEncoderFactoryFactory)
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority valueOf(java.lang.String)
androidx.window.embedding.SplitPairRule: java.util.Set getFilters()
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] values()
org.webrtc.PeerConnectionFactory: void nativeInitializeFieldTrials(java.lang.String)
org.webrtc.Camera1Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: CameraEnumerationAndroid$CaptureFormat$FramerateRange(int,int)
org.webrtc.YuvConverter$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.SimulcastVideoEncoder: boolean isHardwareEncoder()
org.webrtc.Camera2Session: android.hardware.camera2.CameraCharacteristics access$1500(org.webrtc.Camera2Session)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void startListening(android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry)
android.support.v4.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] $values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverGetDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.voiceengine.WebRtcAudioTrack: void setAudioTrackUsageAttribute(int)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: MediaRecorderImpl(java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor)
org.webrtc.EncodedImage: EncodedImage(java.nio.ByteBuffer,java.lang.Runnable,int,int,long,org.webrtc.EncodedImage$FrameType,int,java.lang.Integer)
org.webrtc.NativeAndroidVideoTrackSource: void setIsScreencast(boolean)
org.webrtc.EglBase14Impl: void releaseSurface()
org.webrtc.AndroidVideoDecoder: java.lang.Thread createOutputThread()
org.webrtc.voiceengine.WebRtcAudioUtils: void logAudioDeviceInfo(java.lang.String,android.media.AudioManager)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)
org.webrtc.CameraEnumerationAndroid: void reportCameraResolution(org.webrtc.Histogram,org.webrtc.Size)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readChannelInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: void stopThread()
androidx.appcompat.widget.SearchView: androidx.cursoradapter.widget.CursorAdapter getSuggestionsAdapter()
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.HashMap getMappedNotificationChannel(android.app.NotificationChannel)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] values()
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor: ModuleDescriptor()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioManager: boolean isAcousticEchoCancelerSupported()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void setFpsReduction(float)
org.webrtc.ScreenCapturerAndroid: void changeCaptureFormat(int,int,int)
androidx.core.view.ViewCompat$Api19Impl: boolean isLaidOut(android.view.View)
org.webrtc.VideoFileRenderer$1: void run()
org.webrtc.MediaConstraints$KeyValuePair: MediaConstraints$KeyValuePair(java.lang.String,java.lang.String)
androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
org.webrtc.DataChannel: void close()
io.objectbox.exception.DbException: DbException(java.lang.String,int)
org.webrtc.PeerConnectionFactory: org.webrtc.MediaStream createLocalMediaStream(java.lang.String)
androidx.core.widget.PopupWindowCompat$Api23Impl: boolean getOverlapAnchor(android.widget.PopupWindow)
org.webrtc.RendererCommon$GlDrawer: void release()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readProgressInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.NetworkMonitor$1: NetworkMonitor$1(org.webrtc.NetworkMonitor)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void finish()
org.webrtc.voiceengine.WebRtcAudioRecord: boolean enableBuiltInNS(boolean)
org.webrtc.MediaStream: java.lang.String nativeGetId(long)
androidx.appcompat.widget.SearchView: int getImeOptions()
org.webrtc.TextureBufferImpl$2: TextureBufferImpl$2(org.webrtc.TextureBufferImpl)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] values()
org.webrtc.Camera2Session: org.webrtc.Camera2Session$SessionState access$200(org.webrtc.Camera2Session)
org.webrtc.Camera1Session: int getFrameOrientation()
org.webrtc.Camera1Session$1: void onError(int,android.hardware.Camera)
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleY()
com.google.firebase.iid.Registrar: com.google.firebase.iid.FirebaseInstanceId lambda$getComponents$0$Registrar(com.google.firebase.components.ComponentContainer)
org.webrtc.PeerConnection: void nativeRemoveLocalStream(long)
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException: GooglePlayServicesMissingManifestValueException()
org.webrtc.VideoFrameDrawer: void release()
androidx.appcompat.widget.AppCompatImageView: void setBackgroundResource(int)
org.webrtc.CameraSession$Events: void onCameraDisconnected(org.webrtc.CameraSession)
org.webrtc.SurfaceTextureHelper: void lambda$dispose$6()
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
org.webrtc.IceCandidate: java.lang.String getSdp()
org.webrtc.VideoEncoderWrapper: java.lang.Integer getScalingSettingsLow(org.webrtc.VideoEncoder$ScalingSettings)
com.cloudwebrtc.webrtc.CameraEventsHandler: CameraEventsHandler()
org.webrtc.GlRectDrawer: GlRectDrawer()
org.webrtc.audio.WebRtcAudioTrack: void setSpeakerMute(boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void restartIce(java.lang.String)
org.webrtc.EglRenderer: void lambda$release$1(java.util.concurrent.CountDownLatch)
org.webrtc.VideoCapturer: void dispose()
org.webrtc.NetworkMonitor: void updateCurrentConnectionType(org.webrtc.NetworkChangeDetector$ConnectionType)
androidx.appcompat.widget.SearchView: void setOnQueryTextListener(androidx.appcompat.widget.SearchView$OnQueryTextListener)
org.webrtc.HardwareVideoEncoderFactory: android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecMimeType)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: SidecarCompat$DistinctSidecarElementCallback(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus release()
androidx.appcompat.widget.ContentFrameLayout: ContentFrameLayout(android.content.Context,android.util.AttributeSet)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)
io.objectbox.converter.LongFlexMapConverter: java.lang.Object convertToKey(java.lang.String)
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String getName()
org.webrtc.VideoSource$1: void onCapturerStopped()
androidx.core.content.ContextCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportBackgroundTintList(android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
org.webrtc.RtcCertificatePem: RtcCertificatePem(java.lang.String,java.lang.String)
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: SidecarWindowBackend$ExtensionListenerImpl(androidx.window.layout.SidecarWindowBackend)
org.webrtc.EncodedImage: int getFrameType()
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()
androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleX(float)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback)
androidx.window.layout.SidecarWindowBackend: SidecarWindowBackend(androidx.window.layout.ExtensionInterfaceCompat)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.Network[] getAllNetworks()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: boolean equals(java.lang.Object)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setEventInterceptor(com.google.android.gms.internal.measurement.zzci)
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,org.webrtc.TextureBufferImpl$RefCountMonitor)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver: ActionBroadcastReceiver()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackError(java.lang.String)
org.webrtc.Logging: void nativeEnableLogToDebugOutput(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: org.webrtc.VideoTrack getUserVideo(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: ScheduledNotificationRepeatFrequency(java.lang.String,int)
androidx.activity.ComponentActivity: void setContentView(android.view.View)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: ScheduledNotificationBootReceiver()
com.cloudwebrtc.webrtc.DataChannelObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.yalantis.ucrop.view.OverlayView: void setShowCropGrid(boolean)
org.webrtc.PeerConnection$Observer: void onSelectedCandidatePairChanged(org.webrtc.CandidatePairChangeEvent)
org.webrtc.voiceengine.WebRtcAudioManager: void setStereoOutput(boolean)
io.objectbox.Transaction: boolean nativeIsRecycled(long)
org.webrtc.TextureBufferImpl: int getUnscaledHeight()
androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getUnderlyingNetworkTypeForVpn()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
org.webrtc.VideoEncoder$BitrateAllocation: int getSum()
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: java.io.FileDescriptor dup(java.io.FileDescriptor)
androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundResource(int)
org.webrtc.audio.WebRtcAudioTrack: void access$800(org.webrtc.audio.WebRtcAudioTrack,java.lang.String)
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$negate(org.webrtc.Predicate)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback: void onWebRtcAudioRecordStart()
androidx.appcompat.widget.AppCompatImageView: void setImageBitmap(android.graphics.Bitmap)
com.cloudwebrtc.webrtc.GetUserMediaImpl: org.webrtc.VideoCapturer createVideoCapturer(org.webrtc.CameraEnumerator,boolean,java.lang.String)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: WindowInfoTrackerCallbackAdapter$addListener$1$1(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)
androidx.appcompat.widget.AppCompatRadioButton: int getCompoundPaddingLeft()
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setInjectableLogger(org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.Camera1Session$2: void onPreviewFrame(byte[],android.hardware.Camera)
org.webrtc.RtpParameters: java.util.List getCodecs()
org.webrtc.voiceengine.WebRtcAudioRecord: void reportWebRtcAudioRecordError(java.lang.String)
kotlin.jvm.internal.CallableReference: boolean isFinal()
com.cloudwebrtc.webrtc.DataChannelObserver: java.lang.String dataChannelStateString(org.webrtc.DataChannel$State)
org.webrtc.CameraVideoCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.RendererCommon: RendererCommon()
androidx.appcompat.widget.AppCompatTextView: void setLineHeight(int)
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDate(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.CameraCapturer$1: void onDone(org.webrtc.CameraSession)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
org.webrtc.EglBase10Impl: long access$000()
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState fromNativeIndex(int)
androidx.window.embedding.SplitRule: int hashCode()
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()
org.webrtc.PeerConnection: boolean addIceCandidate(org.webrtc.IceCandidate)
org.webrtc.voiceengine.WebRtcAudioRecord: int channelCountToConfiguration(int)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceGatheringState nativeIceGatheringState()
androidx.appcompat.widget.DropDownListView: void setListSelectionHidden(boolean)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState fromNativeIndex(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Context access$300(com.cloudwebrtc.webrtc.GetUserMediaImpl)
com.dexterous.flutterlocalnotifications.models.IconSource: IconSource(java.lang.String,int)
android.support.v4.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
androidx.window.embedding.ActivityStack: java.lang.String toString()
io.objectbox.Transaction: boolean nativeIsActive(long)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$ContinualGatheringPolicy getContinualGatheringPolicy()
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,org.webrtc.TextureBufferImpl$RefCountMonitor)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: void parseConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.util.List)
androidx.appcompat.widget.AppCompatEditText: void setBackgroundResource(int)
androidx.fragment.app.FragmentContainerView: void setDrawDisappearingViewsLast(boolean)
androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)
org.webrtc.Camera2Session$SessionState: Camera2Session$SessionState(java.lang.String,int)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
org.webrtc.CameraEnumerationAndroid$2: CameraEnumerationAndroid$2(int,int)
org.webrtc.Predicate$2: boolean test(java.lang.Object)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetworkControllerFactoryFactory(org.webrtc.NetworkControllerFactoryFactory)
org.webrtc.NetworkMonitor: void stopMonitoring()
org.webrtc.voiceengine.WebRtcAudioTrack: boolean access$500()
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
org.webrtc.FileVideoCapturer$VideoReader: org.webrtc.VideoFrame getNextFrame()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setInstanceIdProvider(com.google.android.gms.internal.measurement.zzck)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.MediaStreamTrack$MediaType stringToMediaType(java.lang.String)
androidx.window.layout.FoldingFeature$Orientation: FoldingFeature$Orientation(java.lang.String)
org.webrtc.MediaStreamTrack: java.lang.String kind()
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: FlutterFirebaseCoreRegistrar()
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneV()
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetParameters(java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status[] values()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void registerNetworkCallback(android.net.ConnectivityManager$NetworkCallback)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void createLocalMediaStream(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$CandidateNetworkPolicy: PeerConnection$CandidateNetworkPolicy(java.lang.String,int)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setSelector(android.graphics.drawable.Drawable)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: int size()
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.SurfaceViewRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.SurfaceEglRenderer: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
org.webrtc.RtpSender: void setStreams(java.util.List)
org.webrtc.DataChannel: org.webrtc.DataChannel$State nativeState()
kotlin.jvm.internal.FunctionReference: boolean equals(java.lang.Object)
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatRadioButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
org.webrtc.GlGenericDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.SurfaceViewRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer)
org.webrtc.CameraCapturer$4: void onCameraClosed()
org.webrtc.VideoDecoderWrapper: void nativeOnDecodedFrame(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
org.webrtc.PeerConnection: void stopRtcEventLog()
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: GetUserMediaImpl$VideoCapturerInfo(com.cloudwebrtc.webrtc.GetUserMediaImpl)
org.webrtc.CameraVideoCapturer$MediaRecorderHandler: void onMediaRecorderSuccess()
androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)
androidx.core.view.ViewCompat$Api16Impl: int getWindowSystemUiVisibility(android.view.View)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void pauseVideo()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void endAdUnitExposure(java.lang.String,long)
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()
org.webrtc.voiceengine.WebRtcAudioManager: void setBlacklistDeviceForOpenSLESUsage(boolean)
org.webrtc.EglRenderer: void setMirror(boolean)
org.webrtc.NativeLibrary: NativeLibrary()
org.webrtc.audio.JavaAudioDeviceModule$Builder: JavaAudioDeviceModule$Builder(android.content.Context,org.webrtc.audio.JavaAudioDeviceModule$1)
androidx.core.view.ViewCompat$Api17Impl: void setLayerPaint(android.view.View,android.graphics.Paint)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion()
org.webrtc.HardwareVideoEncoder$BusyCount: void decrement()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$getPluginConstantsForFirebaseApp$0(com.google.firebase.FirebaseApp,com.google.android.gms.tasks.TaskCompletionSource)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.Boolean isHardwareEncoder$lambda-7(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map transceiverToMap(java.lang.String,org.webrtc.RtpTransceiver)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] values()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()
com.google.firebase.installations.FirebaseInstallationsRegistrar: com.google.firebase.installations.FirebaseInstallationsApi lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
kotlin.jvm.internal.FunctionReference: int hashCode()
org.webrtc.PeerConnection$IceServer: java.util.List getTlsEllipticCurves()
androidx.core.widget.NestedScrollView: int getMaxScrollAmount()
org.webrtc.EglBase14Impl: void swapBuffers()
com.google.android.gms.wallet.wobs.CommonWalletObject: CommonWalletObject()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.util.List getComponents()
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory valueOf(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context,android.util.AttributeSet)
androidx.core.view.AccessibilityDelegateCompat$Api16Impl: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View$AccessibilityDelegate,android.view.View)
androidx.appcompat.widget.Toolbar: int getPopupTheme()
androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
org.webrtc.CameraVideoCapturer$CameraStatistics: void release()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onSetFailure(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getStrokeColor()
com.cloudwebrtc.webrtc.R$id: R$id()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.TextureBufferImpl$1: void onRetain(org.webrtc.TextureBufferImpl)
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
com.google.android.datatransport.cct.CctBackendFactory: CctBackendFactory()
org.webrtc.voiceengine.WebRtcAudioManager: int getMinOutputFrameSize(int,int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: BaseContinuationImpl(kotlin.coroutines.Continuation)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)
org.webrtc.audio.JavaAudioDeviceModule$Builder: JavaAudioDeviceModule$Builder(android.content.Context)
org.webrtc.Camera1Enumerator: Camera1Enumerator()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onWifiP2pStateChange(int)
org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer getBuffer()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
org.webrtc.RtpTransceiver$RtpTransceiverDirection: int getNativeIndex()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)
org.webrtc.PeerConnection$BundlePolicy: PeerConnection$BundlePolicy(java.lang.String,int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation networkToInfo(android.net.Network)
org.webrtc.FileVideoCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.audio.LowLatencyAudioBufferManager: void maybeAdjustBufferSize(android.media.AudioTrack)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpParameters updateRtpParameters(org.webrtc.RtpParameters,java.util.Map)
org.webrtc.VideoFileRenderer: void lambda$release$2(java.util.concurrent.CountDownLatch)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType,long)
org.webrtc.audio.WebRtcAudioRecord: void setMicrophoneMute(boolean)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem nativeGenerateCertificate(org.webrtc.PeerConnection$KeyType,long)
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion()
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.audio.WebRtcAudioManager: int getMinInputFrameSize(int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void lambda$requestPermissions$0(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback,java.lang.String[],int[])
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
org.webrtc.audio.WebRtcAudioTrack: boolean startPlayout()
org.webrtc.PeerConnectionFactory: java.lang.String nativeFindFieldTrialsFullName(java.lang.String)
androidx.core.view.ViewCompat$Api16Impl: void postInvalidateOnAnimation(android.view.View,int,int,int,int)
org.webrtc.MediaStream: void checkMediaStreamExists()
io.objectbox.converter.StringMapConverter: StringMapConverter()
org.webrtc.audio.WebRtcAudioRecord: byte[] access$500(org.webrtc.audio.WebRtcAudioRecord)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(boolean,boolean)
org.webrtc.CameraVideoCapturer$CameraStatistics: void checkThread()
org.webrtc.PeerConnectionDependencies$Builder: PeerConnectionDependencies$Builder(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnectionDependencies$1)
androidx.appcompat.widget.AppCompatTextView: void setFirstBaselineToTopHeight(int)
androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigTextStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
org.webrtc.MediaCodecWrapper: java.nio.ByteBuffer[] getInputBuffers()
org.webrtc.IceCandidate: boolean equals(java.lang.Object)
org.webrtc.Camera2Enumerator: Camera2Enumerator(android.content.Context)
org.webrtc.TimestampAligner: void nativeReleaseTimestampAligner(long)
org.webrtc.CameraSession$-CC: org.webrtc.VideoFrame$TextureBuffer createTextureBufferWithModifiedTransformMatrix(org.webrtc.TextureBufferImpl,boolean,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateRepeatIntervalMilliseconds(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void stopForegroundService(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void initAudioSwitch()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Class,java.lang.String,java.lang.String,int)
com.google.android.gms.internal.measurement.zzcb: com.google.android.gms.internal.measurement.zzcc asInterface(android.os.IBinder)
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy valueOf(java.lang.String)
org.webrtc.DataChannel$Observer: void onBufferedAmountChange(long)
org.webrtc.Logging: void e(java.lang.String,java.lang.String,java.lang.Throwable)
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: GetUserMediaImpl$4(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
org.webrtc.YuvHelper: void nativeI420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMinTextSize()
org.webrtc.TimestampAligner: long nativeRtcTimeNanos()
org.webrtc.CameraEnumerationAndroid$1: int diff(org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
androidx.core.widget.TextViewCompat$Api28Impl: void setFirstBaselineToTopHeight(android.widget.TextView,int)
org.webrtc.ScreenCapturerAndroid: void access$500(org.webrtc.ScreenCapturerAndroid)
org.webrtc.ThreadUtils$1: void run()
org.webrtc.WrappedNativeVideoEncoder: java.lang.String getImplementationName()
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate()
org.webrtc.ScreenCapturerAndroid: org.webrtc.SurfaceTextureHelper access$000(org.webrtc.ScreenCapturerAndroid)
org.webrtc.PeerConnectionFactory: org.webrtc.AudioTrack createAudioTrack(java.lang.String,org.webrtc.AudioSource)
androidx.core.view.ViewCompat$Api19Impl: boolean isAttachedToWindow(android.view.View)
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState fromNativeIndex(int)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: java.lang.String toString()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
androidx.appcompat.widget.Toolbar: void setTitleTextColor(int)
androidx.appcompat.widget.AppCompatImageButton: void setImageURI(android.net.Uri)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void Dispose()
org.webrtc.ScreenCapturerAndroid$2: ScreenCapturerAndroid$2(org.webrtc.ScreenCapturerAndroid)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: EglBase10Impl$1FakeSurfaceHolder(org.webrtc.EglBase10Impl,android.view.Surface)
com.cloudwebrtc.webrtc.DataChannelObserver: DataChannelObserver(io.flutter.plugin.common.BinaryMessenger,java.lang.String,java.lang.String,org.webrtc.DataChannel)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverGetCurrentDirection(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback: void invoke(java.lang.String[],int[])
org.webrtc.PeerConnection$RTCConfiguration: int getAudioJitterBufferMaxPackets()
org.webrtc.EglBase10Impl: org.webrtc.EglBase$Context getEglBaseContext()
org.webrtc.voiceengine.WebRtcAudioManager: boolean getStereoOutput()
org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType)
com.google.firebase.messaging.FirebaseMessaging: com.google.firebase.messaging.FirebaseMessaging getInstance(com.google.firebase.FirebaseApp)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setDropDownBackgroundResource(int)
org.webrtc.NetworkChangeDetector$NetworkInformation: java.lang.String getName()
com.dexterous.flutterlocalnotifications.models.SoundSource: SoundSource(java.lang.String,int)
com.google.firebase.FirebaseCommonRegistrar: FirebaseCommonRegistrar()
org.webrtc.CameraEnumerator: boolean isBackFacing(java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setMeasurementEnabled(boolean,long)
org.webrtc.NetworkMonitorAutoDetect: long networkToNetId(android.net.Network)
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String deviceTypeToString(int)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void access$100(android.content.Context,android.app.Activity,java.lang.String[],android.os.ResultReceiver)
org.webrtc.YuvHelper: void nativeCopyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoInput(boolean)
androidx.core.view.ViewCompat$Api19Impl: void notifySubtreeAccessibilityStateChanged(android.view.ViewParent,android.view.View,android.view.View,int)
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoFrame$I420Buffer textureToYuv(org.webrtc.VideoFrame$TextureBuffer)
androidx.window.embedding.SplitRule: int getMinWidth()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$initVideoEncoder$0()
org.webrtc.RTCStatsReport: double getTimestampUs()
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)
androidx.appcompat.widget.AppCompatTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
org.webrtc.VideoSource: VideoSource(long)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
org.webrtc.audio.WebRtcAudioTrack: void access$200(org.webrtc.audio.WebRtcAudioTrack,int)
androidx.appcompat.widget.AppCompatSpinner: void setAdapter(android.widget.Adapter)
com.google.firebase.messaging.FirebaseMessagingRegistrar: com.google.firebase.messaging.FirebaseMessaging lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLosing(android.net.Network,int)
org.webrtc.Camera2Session$CaptureSessionCallback: void chooseFocusMode(android.hardware.camera2.CaptureRequest$Builder)
org.webrtc.NetworkChangeDetector$Observer: NetworkChangeDetector$Observer()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
org.webrtc.MediaStreamTrack: java.lang.String id()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
org.webrtc.Camera2Capturer: Camera2Capturer(android.content.Context,java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.BuiltinAudioDecoderFactoryFactory: BuiltinAudioDecoderFactoryFactory()
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
androidx.appcompat.widget.AppCompatRadioButton: android.content.res.ColorStateList getSupportButtonTintList()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void initForTests(java.util.Map)
androidx.core.content.res.ResourcesCompat$Api23Impl: int getColor(android.content.res.Resources,int,android.content.res.Resources$Theme)
androidx.core.view.ViewCompat$Api16Impl: void setBackground(android.view.View,android.graphics.drawable.Drawable)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.Long createNativeVideoEncoder$lambda-6(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.EglBase10Impl$Context: long getNativeEglContext()
org.webrtc.EglBase$ConfigBuilder: int[] createConfigAttributes()
org.webrtc.VideoSource: void lambda$setVideoProcessor$1(org.webrtc.VideoFrame)
androidx.core.view.ViewCompat$Api18Impl: android.graphics.Rect getClipBounds(android.view.View)
org.webrtc.Size: java.lang.String toString()
androidx.appcompat.widget.DropDownListView: void setSelectorEnabled(boolean)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
androidx.appcompat.widget.LinearLayoutCompat: void setGravity(int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation access$300(org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate,android.net.Network)
org.webrtc.Predicate: org.webrtc.Predicate or(org.webrtc.Predicate)
androidx.appcompat.widget.Toolbar: Toolbar(android.content.Context,android.util.AttributeSet)
androidx.window.core.Version: int compareTo(androidx.window.core.Version)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
org.webrtc.Camera2Session: void findCaptureFormat()
androidx.window.embedding.SplitRule: int getMinSmallestWidth()
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraClosed()
org.webrtc.audio.JavaAudioDeviceModule: boolean isBuiltInAcousticEchoCancelerSupported()
androidx.appcompat.widget.ActionMenuView: int getPopupTheme()
org.webrtc.CameraCapturer: boolean isScreencast()
androidx.core.app.Person$Api28Impl: android.app.Person toAndroidPerson(androidx.core.app.Person)
com.cloudwebrtc.webrtc.R$style: R$style()
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$Context)
org.webrtc.LibaomAv1Encoder: long nativeCreateEncoder()
org.webrtc.PeerConnection$Observer: void onAddStream(org.webrtc.MediaStream)
androidx.window.embedding.SplitRuleParser: SplitRuleParser()
io.objectbox.relation.ToOne: void setTargetId(long)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void unregisterOnMeasurementEventListener(com.google.android.gms.internal.measurement.zzci)
com.dexterous.flutterlocalnotifications.models.PersonDetails: PersonDetails(java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()
org.webrtc.DataChannel: boolean nativeSend(byte[],boolean)
androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)
androidx.appcompat.widget.FitWindowsFrameLayout: FitWindowsFrameLayout(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatToggleButton: void setBackgroundResource(int)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.audio.VolumeLogger: void stop()
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams,int)
androidx.window.embedding.EmbeddingRule: EmbeddingRule()
androidx.core.view.ViewCompat$Api16Impl: boolean hasTransientState(android.view.View)
org.webrtc.RtpSender: boolean nativeSetParameters(long,org.webrtc.RtpParameters)
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.JavaAudioDeviceModule$Builder builder(android.content.Context)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame)
org.webrtc.PeerConnection$SignalingState: PeerConnection$SignalingState(java.lang.String,int)
com.google.android.gms.internal.measurement.zzjx: com.google.android.gms.internal.measurement.zzjx[] values()
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
io.objectbox.exception.DbDetachedException: DbDetachedException(java.lang.String)
org.webrtc.PeerConnection: org.webrtc.RtpSender nativeAddTrack(long,java.util.List)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMaxBitrateBps()
org.webrtc.MediaStreamTrack$MediaType: MediaStreamTrack$MediaType(java.lang.String,int,int)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.lang.String getString(int)
io.objectbox.Cursor: java.util.List nativeGetRelationEntities(long,int,int,long,boolean)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: BooleanUtils()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)
androidx.core.widget.NestedScrollView$Api21Impl: boolean getClipToPadding(android.view.ViewGroup)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionRemoveStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase$-CC: org.webrtc.EglBase$ConfigBuilder configBuilder()
com.yalantis.ucrop.view.OverlayView: void setCropFrameStrokeWidth(int)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setShortcut(android.view.MenuItem,char,char,int,int)
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet)
org.webrtc.VideoFileRenderer: org.webrtc.EglBase access$002(org.webrtc.VideoFileRenderer,org.webrtc.EglBase)
org.webrtc.TimestampAligner: TimestampAligner()
org.webrtc.NetworkMonitorAutoDetect: void onReceive(android.content.Context,android.content.Intent)
org.webrtc.JavaI420Buffer: int getStrideV()
org.webrtc.audio.WebRtcAudioRecord: WebRtcAudioRecord(android.content.Context,android.media.AudioManager)
org.webrtc.EglRenderer: void postToRenderThread(java.lang.Runnable)
org.webrtc.EglBase: void detachCurrent()
com.google.firebase.messaging.FirebaseMessagingService: FirebaseMessagingService()
androidx.core.widget.TextViewCompat$Api17Impl: int getLayoutDirection(android.view.View)
androidx.appcompat.widget.AbsActionBarView: int getAnimatedVisibility()
org.webrtc.CameraCapturer: org.webrtc.CameraEnumerator access$1400(org.webrtc.CameraCapturer)
org.webrtc.JniCommon: JniCommon()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setEventChannel(io.flutter.plugin.common.EventChannel)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus release$lambda-1(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.CameraCapturer: void createSessionInternal(int)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState valueOf(java.lang.String)
org.webrtc.SurfaceEglRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
com.google.firebase.messaging.EnhancedIntentService: EnhancedIntentService()
org.webrtc.PeerConnection: void dispose()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)
androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.appcompat.widget.FitWindowsFrameLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onSetSuccess()
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.MediaCodecWrapperFactoryImpl: MediaCodecWrapperFactoryImpl()
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat[] values()
org.webrtc.audio.WebRtcAudioUtils: void logDeviceInfo(java.lang.String)
org.webrtc.PeerConnection$IceTransportsType: PeerConnection$IceTransportsType(java.lang.String,int)
org.webrtc.audio.WebRtcAudioTrack: void nativeGetPlayoutData(long,int)
org.webrtc.ThreadUtils$4: java.lang.Void call()
org.webrtc.CameraCapturer$3: CameraCapturer$3(org.webrtc.CameraCapturer)
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType valueOf(java.lang.String)
androidx.core.app.Person$Api28Impl: androidx.core.app.Person fromAndroidPerson(android.app.Person)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] values()
org.webrtc.GlUtil$GlOutOfMemoryException: GlUtil$GlOutOfMemoryException(int,java.lang.String)
org.webrtc.VideoFileRenderer: void lambda$onFrame$0(org.webrtc.VideoFrame)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode: org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode valueOf(java.lang.String)
androidx.appcompat.widget.ActionBarOverlayLayout: void setHideOnContentScrollEnabled(boolean)
org.webrtc.PeerConnectionFactory: void checkInitializeHasBeenCalled()
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat access$800(org.webrtc.Camera1Session)
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)
androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
androidx.window.layout.HardwareFoldingFeature: int hashCode()
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
org.webrtc.PeerConnection: void removeStream(org.webrtc.MediaStream)
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback: void onWebRtcAudioRecordError(java.lang.String)
org.webrtc.Camera1Session$2: void lambda$onPreviewFrame$0(byte[])
org.webrtc.PeerConnection$Observer: void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
io.objectbox.exception.DbExceptionListener: void onDbException(java.lang.Exception)
androidx.appcompat.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)
androidx.core.view.AccessibilityDelegateCompat$Api16Impl: boolean performAccessibilityAction(android.view.View$AccessibilityDelegate,android.view.View,int,android.os.Bundle)
org.webrtc.EglBase10Impl: void createDummyPbufferSurface()
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] values()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String)
org.webrtc.RtpSender: org.webrtc.MediaStreamTrack track()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(int)
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State fromNativeIndex(int)
org.webrtc.NetworkMonitor: org.webrtc.NetworkMonitorAutoDetect createAndSetAutoDetectForTest(android.content.Context,java.lang.String)
org.webrtc.DataChannel$Init: boolean getNegotiated()
org.webrtc.VideoFileRenderer$1: VideoFileRenderer$1(org.webrtc.VideoFileRenderer,org.webrtc.EglBase$Context)
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigTextStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.Camera1Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.Camera2Session: void access$000(org.webrtc.Camera2Session)
org.webrtc.MediaSource$State: MediaSource$State(java.lang.String,int)
org.webrtc.TextureBufferImpl: android.os.Handler getToI420Handler()
org.webrtc.CameraSession$FailureType: CameraSession$FailureType(java.lang.String,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus encode$lambda-2(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.voiceengine.WebRtcAudioManager: void nativeCacheAudioParameters(int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int,long)
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void renderFrameOnRenderThread(org.webrtc.VideoFrame)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
org.webrtc.PeerConnection$Observer: void onIceConnectionReceivingChange(boolean)
org.webrtc.voiceengine.WebRtcAudioEffects: org.webrtc.voiceengine.WebRtcAudioEffects create()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: FlutterRTCVideoRenderer(android.graphics.SurfaceTexture,io.flutter.view.TextureRegistry$SurfaceTextureEntry)
kotlin.jvm.internal.FunctionReference: boolean isExternal()
androidx.core.app.RemoteInput$Api29Impl: int getEditChoicesBeforeSending(java.lang.Object)
androidx.core.widget.NestedScrollView: void setOnScrollChangeListener(androidx.core.widget.NestedScrollView$OnScrollChangeListener)
androidx.appcompat.widget.ScrollingTabContainerView: void setTabSelected(int)
androidx.window.embedding.SplitPairRule: boolean getClearTop()
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: boolean lambda$registerWith$0(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.view.FlutterNativeView)
org.webrtc.LibvpxVp8Encoder: long createNativeVideoEncoder()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void surfaceDestroyed()
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setScheduler(java.util.concurrent.ScheduledExecutorService)
org.webrtc.SurfaceTextureHelper$1: SurfaceTextureHelper$1(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor,java.lang.String)
org.webrtc.AndroidVideoDecoder: void onFrame(org.webrtc.VideoFrame)
androidx.core.content.res.ResourcesCompat$ThemeCompat$Api29Impl: void rebase(android.content.res.Resources$Theme)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeAlpha()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTransceiver(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.ViewCompat$Api30Impl: void setStateDescription(android.view.View,java.lang.CharSequence)
org.webrtc.CameraCapturer$4: CameraCapturer$4(org.webrtc.CameraCapturer)
org.webrtc.MediaStreamTrack$State: MediaStreamTrack$State(java.lang.String,int)
org.webrtc.VideoEncoder: long createNativeVideoEncoder()
androidx.appcompat.widget.AppCompatToggleButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String getThreadInfo()
org.webrtc.GlRectDrawer$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: void onReceiveResult(int,android.os.Bundle)
org.webrtc.MediaCodecWrapper: void start()
org.webrtc.Camera2Enumerator: boolean isFrontFacing(java.lang.String)
org.webrtc.Camera1Enumerator: java.lang.String[] getDeviceNames()
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy valueOf(java.lang.String)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraDisconnected()
org.webrtc.SurfaceTextureHelper: void setFrameRotation(int)
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataU()
org.webrtc.PeerConnection$PortPrunePolicy: PeerConnection$PortPrunePolicy(java.lang.String,int)
org.webrtc.Camera1Capturer: void changeCaptureFormat(int,int,int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLedInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int)
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery: TransportBackendDiscovery()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceCandidatesRemoved(org.webrtc.IceCandidate[])
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters adaptFrame(org.webrtc.VideoFrame)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.appcompat.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)
org.webrtc.MediaCodecWrapper: java.nio.ByteBuffer[] getOutputBuffers()
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: boolean getValue(java.lang.Boolean)
com.cloudwebrtc.webrtc.record.AudioChannel: AudioChannel(java.lang.String,int)
androidx.appcompat.widget.SearchView: int getSuggestionCommitIconResId()
org.webrtc.WrappedNativeI420Buffer: int getStrideV()
org.webrtc.EglBase10Impl: EglBase10Impl(javax.microedition.khronos.egl.EGLContext,int[])
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverSetDirection(java.lang.String,java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getUnderrunCount()
org.webrtc.EglBase14Impl: android.opengl.EGLConfig getEglConfig(android.opengl.EGLDisplay,int[])
androidx.core.view.ViewCompat$Api29Impl: java.util.List getSystemGestureExclusionRects(android.view.View)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
org.webrtc.RtpTransceiver: void stopStandard()
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
org.webrtc.audio.WebRtcAudioEffects: boolean effectTypeIsVoIP(java.util.UUID)
androidx.appcompat.widget.AppCompatImageView: void setImageURI(android.net.Uri)
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
android.support.v4.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
org.webrtc.voiceengine.BuildInfo: BuildInfo()
com.google.android.gms.measurement.AppMeasurement: void logEventInternal(java.lang.String,java.lang.String,android.os.Bundle)
org.webrtc.MediaStreamTrack: boolean nativeGetEnabled(long)
androidx.appcompat.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
org.webrtc.EglBase: void createDummyPbufferSurface()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionCreateOffer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String getKey()
org.webrtc.PeerConnection$AdapterType: PeerConnection$AdapterType(java.lang.String,int,java.lang.Integer)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform valueOf(java.lang.String)
androidx.appcompat.widget.SearchView: void setIconifiedByDefault(boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpParameters$Encoding mapToEncoding(java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkMonitorAutoDetect: boolean isReceiverRegisteredForTesting()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean putLocalStream(java.lang.String,org.webrtc.MediaStream)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: SidecarCompat$FirstAttachAdapter(androidx.window.layout.SidecarCompat,android.app.Activity)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeAlpha(float)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordInitError(java.lang.String)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void onFrame(org.webrtc.VideoFrame)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
kotlin.jvm.internal.FunctionReference: FunctionReference(int)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule createAudioDeviceModule()
org.webrtc.RtpParameters$Codec: RtpParameters$Codec(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.util.Map)
androidx.core.view.accessibility.AccessibilityRecordCompat$Api15Impl: int getMaxScrollY(android.view.accessibility.AccessibilityRecord)
org.webrtc.NetworkMonitorAutoDetect: void unregisterReceiver()
org.webrtc.VideoFrame: int getRotation()
androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()
org.webrtc.CameraCapturer: android.os.Handler access$300(org.webrtc.CameraCapturer)
org.webrtc.TimestampAligner: void dispose()
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onDestroyBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.PeerConnectionFactory: long getNativePeerConnectionFactory()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
org.webrtc.GlShader: int compileShader(int,java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onResume(androidx.lifecycle.LifecycleOwner)
org.webrtc.RtpSender: void nativeSetFrameEncryptor(long,long)
org.webrtc.Camera1Enumerator: java.util.List enumerateFormats(int)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onDestroy(androidx.lifecycle.LifecycleOwner)
org.webrtc.RtpTransceiver: boolean nativeStopped(long)
androidx.window.embedding.SplitRule: SplitRule()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
org.webrtc.PeerConnection: org.webrtc.SessionDescription getLocalDescription()
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference valueOf(java.lang.String)
org.webrtc.Camera2Session: android.hardware.camera2.CameraDevice access$702(org.webrtc.Camera2Session,android.hardware.camera2.CameraDevice)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.yalantis.ucrop.view.OverlayView: void setFreestyleCropMode(int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putByte(java.lang.String,byte[])
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(org.webrtc.EglBase10$Context,int[])
androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()
io.objectbox.converter.FlexObjectConverter: FlexObjectConverter()
org.webrtc.AudioTrack: AudioTrack(long)
org.webrtc.PeerConnection$RTCConfiguration: boolean getOfferExtmapAllowMixed()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: MethodCallHandlerImpl(android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry)
org.webrtc.audio.WebRtcAudioEffects: WebRtcAudioEffects()
androidx.core.view.ViewCompat$Api16Impl: boolean getFitsSystemWindows(android.view.View)
androidx.core.graphics.TypefaceCompatUtil$Api19Impl: android.os.ParcelFileDescriptor openFileDescriptor(android.content.ContentResolver,android.net.Uri,java.lang.String,android.os.CancellationSignal)
org.webrtc.NativeAndroidVideoTrackSource: void onFrameCaptured(org.webrtc.VideoFrame)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
androidx.appcompat.widget.ActionMenuView: void setExpandedActionViewsExclusive(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathOffset()
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void tryAddRendererToVideoTrack()
org.webrtc.voiceengine.WebRtcAudioEffects: void release()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
org.webrtc.IceCandidate: IceCandidate(java.lang.String,int,java.lang.String,java.lang.String,org.webrtc.PeerConnection$AdapterType)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getSenders(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnectionFactory: void nativeStopInternalTracingCapture()
kotlin.jvm.internal.CallableReference: boolean isAbstract()
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection getPeerConnection()
androidx.appcompat.widget.ActionMenuView: android.view.Menu getMenu()
androidx.appcompat.widget.LinearLayoutCompat: void setWeightSum(float)
androidx.appcompat.widget.Toolbar: void setSubtitle(java.lang.CharSequence)
org.webrtc.PeerConnectionFactory: boolean nativeStartAecDump(long,int,int)
org.webrtc.Predicate$2: Predicate$2(org.webrtc.Predicate,org.webrtc.Predicate)
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()
androidx.core.util.ObjectsCompat$Api19Impl: int hash(java.lang.Object[])
org.webrtc.CameraCapturer: boolean access$602(org.webrtc.CameraCapturer,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathStart(float)
org.webrtc.CallSessionFileRotatingLogSink: byte[] getLogData(java.lang.String)
androidx.appcompat.widget.AppCompatRadioButton: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
org.webrtc.GlShader: GlShader(java.lang.String,java.lang.String)
androidx.core.widget.ImageViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)
io.objectbox.converter.IntegerLongMapConverter: IntegerLongMapConverter()
androidx.appcompat.widget.LinearLayoutCompat: void setHorizontalGravity(int)
org.webrtc.audio.AudioDeviceModule: void setSpeakerMute(boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverStop(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.ViewCompat$Api19Impl: boolean isLayoutDirectionResolved(android.view.View)
org.webrtc.EglRenderer: void logW(java.lang.String)
org.webrtc.AndroidVideoDecoder$1: void run()
org.webrtc.voiceengine.WebRtcAudioTrack: android.media.AudioTrack access$000(org.webrtc.voiceengine.WebRtcAudioTrack)
org.webrtc.StatsObserver: void onComplete(org.webrtc.StatsReport[])
org.webrtc.JavaI420Buffer: org.webrtc.JavaI420Buffer allocate(int,int)
io.objectbox.Transaction: void nativeDestroy(long)
androidx.window.embedding.SplitController: void initialize(android.content.Context,int)
androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()
org.webrtc.TurnCustomizer: void nativeFreeTurnCustomizer(long)
org.webrtc.NetworkMonitor: void notifyObserversOfConnectionTypeChange(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.Metrics: org.webrtc.Metrics getAndReset()
org.webrtc.DataChannel: DataChannel(long)
org.webrtc.voiceengine.WebRtcAudioTrack: java.nio.ByteBuffer access$200(org.webrtc.voiceengine.WebRtcAudioTrack)
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: WindowMetricsCalculator$Companion$decorator$1()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource valueOf(java.lang.String)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)
androidx.window.layout.WindowInfoTracker$-CC: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
org.webrtc.NetworkChangeDetector: java.util.List getActiveNetworkList()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void releaseCallback(android.net.ConnectivityManager$NetworkCallback)
org.webrtc.EglBase14Impl: android.opengl.EGLContext createEglContext(android.opengl.EGLContext,android.opengl.EGLDisplay,android.opengl.EGLConfig,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSmallIcon(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities nativeGetRtpSenderCapabilities(long,org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.SurfaceTextureHelper: void lambda$returnTextureFrame$5()
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
com.yalantis.ucrop.view.TransformImageView: android.graphics.Bitmap getViewBitmap()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackInitError(java.lang.String)
org.webrtc.DtmfSender: int duration()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigPictureStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
org.webrtc.Camera2Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.CameraCapturer$1: CameraCapturer$1(org.webrtc.CameraCapturer)
org.webrtc.RtpCapabilities: RtpCapabilities(java.util.List,java.util.List)
org.webrtc.DataChannel: java.lang.String label()
androidx.core.view.ViewCompat$Api29Impl: void setSystemGestureExclusionRects(android.view.View,java.util.List)
org.webrtc.voiceengine.WebRtcAudioRecord: void releaseAudioResources()
org.webrtc.EglBase14Impl: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions createInitializationOptions()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setKeepScreenOn(boolean)
androidx.appcompat.widget.SearchView$SearchAutoComplete: SearchView$SearchAutoComplete(android.content.Context,android.util.AttributeSet)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer getCallback()
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(android.graphics.drawable.Drawable)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionGetStats(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotY()
com.google.android.gms.internal.measurement.zzkq: com.google.android.gms.internal.measurement.zzkq[] values()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver nativeGetReceiver(long)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraClosed()
androidx.core.widget.CompoundButtonCompat$Api21Impl: void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList)
com.yalantis.ucrop.view.GestureCropImageView: void setRotateEnabled(boolean)
androidx.lifecycle.SavedStateHandleController$OnRecreation: SavedStateHandleController$OnRecreation()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setCurrentScreen(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,java.lang.String,long)
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event[] values()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)
io.objectbox.converter.IntegerFlexMapConverter: java.lang.Integer convertToKey(java.lang.String)
androidx.fragment.app.FragmentActivity: FragmentActivity()
org.webrtc.AndroidVideoDecoder: org.webrtc.SurfaceTextureHelper createSurfaceTextureHelper()
io.objectbox.exception.UniqueViolationException: UniqueViolationException(java.lang.String)
org.webrtc.FileVideoCapturer$1: void run()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType valueOf(java.lang.String)
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory[] values()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: NetworkMonitorAutoDetect$SimpleNetworkCallback(org.webrtc.NetworkMonitorAutoDetect,java.util.Set)
org.webrtc.ScreenCapturerAndroid: ScreenCapturerAndroid(android.content.Intent,android.media.projection.MediaProjection$Callback)
com.google.android.gms.auth.api.signin.RevocationBoundService: RevocationBoundService()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivity()
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
androidx.exifinterface.media.ExifInterfaceUtils$Api23Impl: void setDataSource(android.media.MediaMetadataRetriever,android.media.MediaDataSource)
org.webrtc.PeerConnection: org.webrtc.RtcCertificatePem nativeGetCertificate()
org.webrtc.audio.WebRtcAudioTrack: void logMainParameters()
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion()
org.webrtc.PeerConnectionFactory: boolean startInternalTracingCapture(java.lang.String)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)
org.webrtc.voiceengine.WebRtcAudioManager: int getMinInputFrameSize(int,int)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State valueOf(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo$lambda-10(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: int getMarginEnd(android.view.ViewGroup$MarginLayoutParams)
androidx.appcompat.widget.AppCompatSpinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)
org.webrtc.audio.WebRtcAudioTrack: int getBufferSizeInFrames()
kotlin.jvm.internal.FunctionReference: boolean isOperator()
org.webrtc.RTCStats: RTCStats(long,java.lang.String,java.lang.String,java.util.Map)
androidx.window.layout.WindowMetrics: WindowMetrics(android.graphics.Rect)
org.webrtc.Camera2Session$CaptureSessionCallback: Camera2Session$CaptureSessionCallback(org.webrtc.Camera2Session,org.webrtc.Camera2Session$1)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
org.webrtc.voiceengine.WebRtcAudioTrack: WebRtcAudioTrack(long)
io.objectbox.converter.FlexObjectConverter: java.lang.Object convertToEntityProperty(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMessagingStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int getDrawableResourceId(android.content.Context,java.lang.String)
org.webrtc.HardwareVideoEncoder$YuvFormat: void fillBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer,int,int)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String)
org.webrtc.PeerConnection: long createNativePeerConnectionObserver(org.webrtc.PeerConnection$Observer)
org.webrtc.NativeCapturerObserver: void onFrameCaptured(org.webrtc.VideoFrame)
androidx.appcompat.widget.ActionBarContextView: int getContentHeight()
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority[] values()
androidx.appcompat.widget.AppCompatEditText: void setBackgroundDrawable(android.graphics.drawable.Drawable)
org.webrtc.SurfaceViewRenderer: void onFrameResolutionChanged(int,int,int)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode valueOf(java.lang.String)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
org.webrtc.SurfaceEglRenderer: void setFpsReduction(float)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
org.webrtc.CapturerObserver: void onCapturerStopped()
org.webrtc.EglBase10Impl: void checkIsNotReleased()
org.webrtc.VideoFileRenderer: void onFrame(org.webrtc.VideoFrame)
androidx.window.embedding.EmbeddingAdapter: EmbeddingAdapter()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$IceTransportsType getIceTransportsType()
org.webrtc.TurnCustomizer: TurnCustomizer(long)
org.webrtc.CameraCapturer$5: CameraCapturer$5(org.webrtc.CameraCapturer)
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: GetUserMediaImpl$3(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.os.Handler,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.audio.WebRtcAudioManager: int getSampleRateForApiLevel(android.media.AudioManager)
org.webrtc.WrappedNativeI420Buffer: void release()
androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)
org.webrtc.SurfaceEglRenderer: SurfaceEglRenderer(java.lang.String)
org.webrtc.LibvpxVp9Encoder: LibvpxVp9Encoder()
org.webrtc.CameraCapturer: int access$1710(org.webrtc.CameraCapturer)
androidx.window.core.Version: java.lang.String toString()
io.objectbox.converter.LongFlexMapConverter: LongFlexMapConverter()
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
org.webrtc.Predicate: org.webrtc.Predicate and(org.webrtc.Predicate)
androidx.core.widget.TextViewCompat$Api23Impl: int getHyphenationFrequency(android.widget.TextView)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.webrtc.PeerConnectionFactory: long nativeCreateAudioTrack(long,java.lang.String,long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void startCapture(int,int,int)
org.webrtc.audio.WebRtcAudioRecord: boolean isNoiseSuppressorSupported()
org.webrtc.TextureBufferImpl$1: void onRelease(org.webrtc.TextureBufferImpl)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean sendNotificationPayloadMessage(android.content.Intent)
org.webrtc.voiceengine.BuildInfo: java.lang.String getBrand()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind fromAudioDevice(com.twilio.audioswitch.AudioDevice)
androidx.window.layout.SidecarCompat$DistinctElementCallback: SidecarCompat$DistinctElementCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)
org.webrtc.GlGenericDrawer: java.lang.String createFragmentShaderString(java.lang.String,org.webrtc.GlGenericDrawer$ShaderType)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelNotification(java.lang.Integer,java.lang.String)
androidx.appcompat.widget.ViewStubCompat: ViewStubCompat(android.content.Context,android.util.AttributeSet)
org.webrtc.SoftwareVideoEncoderFactory: SoftwareVideoEncoderFactory()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onCreateFailure(java.lang.String)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: PlatformSoftwareVideoDecoderFactory$1()
org.webrtc.TextureBufferImpl: org.webrtc.YuvConverter getYuvConverter()
com.google.android.gms.measurement.AppMeasurement: void clearConditionalUserProperty(java.lang.String,java.lang.String,android.os.Bundle)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getUnderlyingConnectionTypeForVpn(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseLowLatency(boolean)
androidx.window.layout.WindowInfoTrackerImpl: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.core.widget.PopupWindowCompat$Api19Impl: void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int)
org.webrtc.CameraVideoCapturer: void addMediaRecorderToCamera(android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleY(float)
androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)
org.webrtc.GlTextureFrameBuffer: int getTextureId()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: CameraEnumerationAndroid$CaptureFormat(int,int,int,int)
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneU()
org.webrtc.VideoSource: void setVideoProcessor(org.webrtc.VideoProcessor)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setInboxStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus release()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
org.webrtc.PeerConnection: void nativeNewGetStatsForReceiver(org.webrtc.RTCStatsCollectorCallback,long)
org.webrtc.TextureBufferImpl$RefCountMonitor: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.HardwareVideoEncoderFactory: boolean isH264HighProfileSupported(android.media.MediaCodecInfo)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$I420Buffer toI420()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setDataCollectionEnabled(boolean)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
org.webrtc.NetworkMonitor: void access$200(org.webrtc.NetworkMonitor,org.webrtc.NetworkChangeDetector$NetworkInformation)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
org.webrtc.PeerConnection: boolean nativeSetBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer)
org.webrtc.RtpSender: RtpSender(long)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState valueOf(java.lang.String)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
androidx.core.widget.TextViewCompat$Api17Impl: java.util.Locale getTextLocale(android.widget.TextView)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMinor()
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
org.webrtc.EglBase: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.VideoSource: void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer)
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] values()
org.webrtc.RtpParameters$Codec: java.util.Map getParameters()
org.webrtc.Camera2Capturer: boolean isScreencast()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
org.webrtc.CameraCapturer$2: void onCameraOpening()
androidx.window.embedding.ActivityRule: java.util.Set getFilters()
kotlin.jvm.internal.Lambda: java.lang.String toString()
org.webrtc.GlRectDrawer$ShaderCallbacks: GlRectDrawer$ShaderCallbacks()
org.webrtc.JniCommon: void nativeAddRef(long)
androidx.appcompat.widget.SearchView: void setInputType(int)
com.cloudwebrtc.webrtc.DataChannelObserver: void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.appcompat.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()
androidx.window.embedding.SplitPairFilter: java.lang.String toString()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()
org.webrtc.PeerConnectionFactory: long nativeCreateLocalMediaStream(long,java.lang.String)
org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.AndroidVideoDecoder: boolean access$100(org.webrtc.AndroidVideoDecoder)
io.objectbox.exception.DbFullException: DbFullException(java.lang.String,int)
org.webrtc.AndroidVideoDecoder: AndroidVideoDecoder(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecMimeType,int,org.webrtc.EglBase$Context)
io.objectbox.exception.DbMaxReadersExceededException: DbMaxReadersExceededException(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.NetworkRequest createNetworkRequest()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters nativeAdaptFrame(long,int,int,int,long)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: NetworkMonitorAutoDetect$ConnectivityManagerDelegate(android.net.ConnectivityManager,java.util.Set,java.lang.String)
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode: org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode[] values()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver$RtpTransceiverInit mapToRtpTransceiverInit(java.util.Map)
androidx.appcompat.widget.Toolbar: int getContentInsetStart()
org.webrtc.voiceengine.WebRtcAudioTrack: void reportWebRtcAudioTrackInitError(java.lang.String)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
org.webrtc.SurfaceTextureHelper: boolean isTextureInUse()
androidx.appcompat.widget.AbsActionBarView: void setContentHeight(int)
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowTitle(java.lang.CharSequence)
androidx.window.core.Version: int getMinor()
org.webrtc.WrappedNativeI420Buffer: WrappedNativeI420Buffer(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onSetFailure(java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String)
org.webrtc.PeerConnection: boolean nativeAddLocalStream(long)
androidx.appcompat.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)
org.webrtc.VideoFrame$TextureBuffer$Type: VideoFrame$TextureBuffer$Type(java.lang.String,int,int)
org.webrtc.Camera1Capturer: Camera1Capturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,boolean)
io.objectbox.converter.FlexObjectConverter: byte[] convertToDatabaseValue(java.lang.Object)
androidx.appcompat.widget.LinearLayoutCompat: int getShowDividers()
androidx.core.graphics.drawable.DrawableCompat$Api19Impl: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)
org.webrtc.HardwareVideoEncoder$YuvFormat: org.webrtc.HardwareVideoEncoder$YuvFormat valueOf(int)
org.webrtc.NetworkMonitorAutoDetect: void destroy()
com.google.firebase.analytics.FirebaseAnalytics: com.google.android.gms.measurement.internal.zzhy getScionFrontendApiImplementation(android.content.Context,android.os.Bundle)
org.webrtc.RtpParameters$Codec: int getPayloadType()
androidx.appcompat.widget.AppCompatRadioButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.google.android.gms.common.api.PendingResult: PendingResult()
org.webrtc.RTCStats: java.lang.String getId()
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$IceServer$Builder builder(java.util.List)
org.webrtc.RtpSender: org.webrtc.DtmfSender dtmf()
org.webrtc.NetworkChangeDetector: void destroy()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void lambda$new$0(android.net.wifi.p2p.WifiP2pGroup)
org.webrtc.NativePeerConnectionFactory: long createNativePeerConnection()
org.webrtc.LibvpxVp8Decoder: LibvpxVp8Decoder()
org.webrtc.PeerConnectionDependencies: org.webrtc.SSLCertificateVerifier getSSLCertificateVerifier()
org.webrtc.IceCandidate: java.lang.String toString()
org.webrtc.RtpTransceiver: RtpTransceiver(long)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$stop$4()
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.core.app.BundleCompat$Api18Impl: void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority valueOf(java.lang.String)
androidx.appcompat.widget.Toolbar: void setTitle(java.lang.CharSequence)
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy valueOf(java.lang.String)
org.webrtc.NV21Buffer: void release()
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getConditionalUserProperties(java.lang.String,java.lang.String,com.google.android.gms.internal.measurement.zzcf)
com.cloudwebrtc.webrtc.R$attr: R$attr()
org.webrtc.CallSessionFileRotatingLogSink: long nativeAddSink(java.lang.String,int,int)
org.webrtc.AndroidVideoDecoder: void deliverDecodedFrame()
org.webrtc.Camera2Capturer: void changeCaptureFormat(int,int,int)
androidx.appcompat.widget.AppCompatRadioButton: void setButtonDrawable(int)
kotlin.jvm.internal.Lambda: int getArity()
org.webrtc.DataChannel: int id()
androidx.window.core.Version$Companion: Version$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.VideoFrame$I420Buffer: int getBufferType()
androidx.appcompat.widget.ActionMenuView: void setPopupTheme(int)
com.yalantis.ucrop.UCropActivity: UCropActivity()
org.webrtc.EglRenderer$HandlerWithExceptionCallback: EglRenderer$HandlerWithExceptionCallback(android.os.Looper,java.lang.Runnable)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSound(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
io.objectbox.converter.LongLongMapConverter: LongLongMapConverter()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelAllNotifications(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] values()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()
org.webrtc.VideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewCompat$Api17Impl: int generateViewId()
androidx.appcompat.widget.AppCompatTextView: int getFirstBaselineToTopHeight()
androidx.appcompat.widget.AppCompatSpinner: int getDropDownWidth()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
androidx.window.core.Bounds: int getRight()
org.webrtc.audio.WebRtcAudioRecord: void releaseAudioResources()
org.webrtc.ThreadUtils: boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraStatistics access$800(org.webrtc.CameraCapturer)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeat(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.yalantis.ucrop.view.TransformImageView: float getCurrentAngle()
io.objectbox.converter.NullToEmptyStringConverter: java.lang.String convertToDatabaseValue(java.lang.String)
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOpNoThrow(android.app.AppOpsManager,java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readGroupingInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.core.view.ViewCompat$Api19Impl: void setAccessibilityLiveRegion(android.view.View,int)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
org.webrtc.ThreadUtils$1: ThreadUtils$1(java.lang.Thread)
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus releaseInternal()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
org.webrtc.BaseBitrateAdjuster: void reportEncodedFrame(int)
org.webrtc.Camera2Session: boolean access$1900(org.webrtc.Camera2Session)
org.webrtc.RtpTransceiver: void nativeSetCodecPreferences(long,java.util.List)
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicInteger access$1000()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpSender getRtpSenderById(java.lang.String)
org.webrtc.AndroidVideoDecoder: void stopOnOutputThread(java.lang.Exception)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushBoolean(boolean)
org.webrtc.VideoSource: org.webrtc.CapturerObserver getCapturerObserver()
org.webrtc.VideoEncoder$CodecSpecificInfoVP9: VideoEncoder$CodecSpecificInfoVP9()
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: void setSplashDrawable(android.graphics.drawable.Drawable)
org.webrtc.NetworkChangeDetector$ConnectionType: NetworkChangeDetector$ConnectionType(java.lang.String,int)
org.webrtc.RtpTransceiver: java.lang.String nativeGetMid(long)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: NotificationChannelAction(java.lang.String,int)
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl$RefCountMonitor access$000(org.webrtc.TextureBufferImpl)
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger: void stop()
org.webrtc.CameraCapturer: void access$000(org.webrtc.CameraCapturer)
org.webrtc.YuvConverter: YuvConverter()
org.webrtc.CameraVideoCapturer$CameraStatistics: int access$002(org.webrtc.CameraVideoCapturer$CameraStatistics,int)
org.webrtc.PeerConnection: void nativeCreateAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.voiceengine.WebRtcAudioManager: int getSampleRateForApiLevel()
org.webrtc.audio.WebRtcAudioUtils: boolean hasMicrophone(android.content.Context)
org.webrtc.PeerConnectionFactory: void printStackTraces()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnectionDependencies)
androidx.appcompat.widget.SearchView: void setOnCloseListener(androidx.appcompat.widget.SearchView$OnCloseListener)
com.yalantis.ucrop.view.widget.HorizontalProgressWheelView: void setScrollingListener(com.yalantis.ucrop.view.widget.HorizontalProgressWheelView$ScrollingListener)
androidx.core.app.RemoteInput$Api26Impl: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.content.Context getApplicationContext()
org.webrtc.HardwareVideoEncoder: void requestKeyFrame(long)
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
org.webrtc.Camera1Capturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setTooltipText(android.view.MenuItem,java.lang.CharSequence)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioAttributes(android.media.AudioAttributes)
org.webrtc.NetworkMonitor: void addNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState valueOf(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioTrack: int initPlayout(int,int,double)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: AppMeasurementDynamiteService()
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: void detachCallback(java.lang.Integer)
org.webrtc.PeerConnection$ContinualGatheringPolicy: PeerConnection$ContinualGatheringPolicy(java.lang.String,int)
org.webrtc.Camera1Enumerator: android.hardware.Camera$CameraInfo getCameraInfo(int)
org.webrtc.CameraVideoCapturer$-CC: void $default$removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.Camera2Session$CameraCaptureCallback: Camera2Session$CameraCaptureCallback()
com.yalantis.ucrop.view.TransformImageView: void setTransformImageListener(com.yalantis.ucrop.view.TransformImageView$TransformImageListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateNextNotificationTrigger(long,long)
org.webrtc.Camera2Capturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
androidx.appcompat.view.menu.ListMenuItemView: void setChecked(boolean)
org.webrtc.JniCommon: void nativeFreeByteBuffer(java.nio.ByteBuffer)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
org.webrtc.voiceengine.WebRtcAudioUtils: java.util.List getBlackListedModelsForNsUsage()
org.webrtc.Camera1Enumerator: boolean isFrontFacing(java.lang.String)
org.webrtc.PeerConnection$Observer$-CC: void $default$onConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$PeerConnectionState)
org.webrtc.RendererCommon: float access$000(org.webrtc.RendererCommon$ScalingType)
org.webrtc.PeerConnectionFactory: void access$100()
org.webrtc.NetworkMonitor: void access$300(org.webrtc.NetworkMonitor,long)
org.webrtc.CameraCapturer: void printStackTrace()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void disableFpsReduction()
org.webrtc.Camera2Session: void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.VideoSource: void adaptOutputFormat(int,int,int)
androidx.core.view.ViewCompat$Api17Impl: int getLabelFor(android.view.View)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setSupportsPixelBuffer(boolean)
org.webrtc.audio.WebRtcAudioUtils: void logAudioStateVolume(java.lang.String,android.media.AudioManager)
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
androidx.core.text.ICUCompat$Api24Impl: android.icu.util.ULocale forLocale(java.util.Locale)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: int getInt(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioManager: boolean isNoiseSuppressorSupported()
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
org.webrtc.EglBase14Impl$Context: android.opengl.EGLContext getRawContext()
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnection$Observer getObserver()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setCaptureTimeNs(long)
org.webrtc.RtpParameters: org.webrtc.RtpParameters$Rtcp getRtcp()
org.webrtc.audio.WebRtcAudioRecord: java.lang.String audioStateToString(int)
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkConnect(long,org.webrtc.NetworkChangeDetector$NetworkInformation)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()
androidx.core.app.RemoteInput$Api26Impl: java.util.Set getAllowedDataTypes(java.lang.Object)
org.webrtc.CameraCapturer: java.lang.String access$1500(org.webrtc.CameraCapturer)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api17Impl: boolean isPaddingRelative(android.view.View)
androidx.window.core.Version$Companion: Version$Companion()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType fromNativeIndex(int)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onReleaseBuffer(org.webrtc.VideoFrame$TextureBuffer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Integer tryParseInt(java.lang.String)
com.cloudwebrtc.webrtc.utils.Callback: void invoke(java.lang.Object[])
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getDefault()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
org.webrtc.Histogram: org.webrtc.Histogram createEnumeration(java.lang.String,int)
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink access$302(org.webrtc.SurfaceTextureHelper,org.webrtc.VideoSink)
org.webrtc.VideoSource: void lambda$setVideoProcessor$0(org.webrtc.VideoFrame)
androidx.core.widget.CompoundButtonCompat$Api21Impl: android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton)
org.webrtc.IceCandidateErrorEvent: IceCandidateErrorEvent(java.lang.String,int,java.lang.String,int,java.lang.String)
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataU()
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy valueOf(java.lang.String)
org.webrtc.JniCommon: void nativeReleaseRef(long)
androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareNoiseSuppressor(boolean)
org.webrtc.GlGenericDrawer$ShaderType: GlGenericDrawer$ShaderType(java.lang.String,int)
org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback: void onWebRtcAudioTrackStartError(java.lang.String)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection valueOf(java.lang.String)
org.webrtc.Camera1Session: void stopInternal()
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraFreezed(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$PortPrunePolicy getTurnPortPrunePolicy()
org.webrtc.Size: boolean equals(java.lang.Object)
androidx.appcompat.widget.AppCompatTextView: void setAutoSizeTextTypeWithDefaults(int)
org.webrtc.EglBase14$Context: android.opengl.EGLContext getRawContext()
org.webrtc.ThreadUtils$3: void run()
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
androidx.window.core.Bounds: int getTop()
org.webrtc.AudioTrack: long getNativeAudioTrack()
org.webrtc.MediaStreamTrack: void checkMediaStreamTrackExists()
androidx.window.embedding.MatcherUtils: MatcherUtils()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLargeIconInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void finish()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: FlutterLocalNotificationsPlugin()
org.webrtc.PeerConnection: boolean getStats(org.webrtc.StatsObserver,org.webrtc.MediaStreamTrack)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: AudioSwitchManager(android.content.Context)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)
org.webrtc.RtpSender: java.lang.String id()
com.yalantis.ucrop.view.OverlayView: void setCropGridColumnCount(int)
androidx.appcompat.widget.AppCompatButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)
org.webrtc.Camera2Session: void stopInternal()
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
io.objectbox.exception.PagesCorruptException: PagesCorruptException(java.lang.String,int)
org.webrtc.VideoTrack: long getNativeVideoTrack()
org.webrtc.FrameDecryptor: long getNativeFrameDecryptor()
org.webrtc.RtpParameters: org.webrtc.RtpParameters$DegradationPreference getDegradationPreference()
org.webrtc.SurfaceViewRenderer: java.lang.String getResourceName()
org.webrtc.VideoTrack: boolean shouldReceive()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void startForegroundService(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.VideoTrack: void nativeRemoveSink(long,long)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
org.webrtc.VideoEncoder$CodecSpecificInfo: VideoEncoder$CodecSpecificInfo()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean peerConnectionDispose(com.cloudwebrtc.webrtc.PeerConnectionObserver)
org.webrtc.CryptoOptions$Srtp: boolean getEnableAes128Sha1_32CryptoCipher()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivityForConfigChanges()
org.webrtc.VideoTrack: void removeSink(org.webrtc.VideoSink)
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(int)
org.webrtc.MediaCodecUtils: MediaCodecUtils()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionAddICECandidate(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: double getDouble(java.lang.String)
org.webrtc.ThreadUtils: void checkIsOnMainThread()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)
org.webrtc.Camera2Session$CameraStateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)
org.webrtc.DtmfSender: void dispose()
androidx.appcompat.view.menu.ActionMenuItemView: ActionMenuItemView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String access$000(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int write(byte[],int,int)
org.webrtc.Camera2Session: long access$1700(org.webrtc.Camera2Session)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy valueOf(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void switchCamera(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getInputFormat()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)
org.webrtc.LibvpxVp8Encoder: boolean isHardwareEncoder()
androidx.core.view.ViewCompat$Api16Impl: void postOnAnimation(android.view.View,java.lang.Runnable)
org.webrtc.ScreenCapturerAndroid$1: void run()
org.webrtc.RtpReceiver: java.lang.String id()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getPlaybackHeadPosition()
androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
io.objectbox.converter.StringFlexMapConverter: StringFlexMapConverter()
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] $values()
org.webrtc.MediaStreamTrack$MediaType: int getNative()
androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()
androidx.core.view.ViewCompat$Api17Impl: int getPaddingStart(android.view.View)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverGetCurrentDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onAddStream(org.webrtc.MediaStream)
org.webrtc.PeerConnection: org.webrtc.RtcCertificatePem getCertificate()
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String getValue()
org.webrtc.CallSessionFileRotatingLogSink: CallSessionFileRotatingLogSink(java.lang.String,int,org.webrtc.Logging$Severity)
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder builder(android.content.Context)
org.webrtc.audio.WebRtcAudioEffects: void release()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onSetFailure(java.lang.String)
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTransceiver(org.webrtc.MediaStreamTrack,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType valueOf(java.lang.String)
org.webrtc.YuvConverter$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
androidx.window.embedding.SplitController: boolean isSplitSupported()
org.webrtc.CallSessionFileRotatingLogSink: void dispose()
androidx.core.widget.TextViewCompat$Api23Impl: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode(android.widget.TextView)
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getUnderlyingNetworkSubtypeForVpn()
org.webrtc.CameraVideoCapturer$CameraStatistics: int access$100(org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.EglRenderer: EglRenderer(java.lang.String,org.webrtc.VideoFrameDrawer)
org.webrtc.EglBase: int surfaceWidth()
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService: JobInfoSchedulerService()
org.webrtc.SurfaceViewRenderer: void logD(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
androidx.window.core.Version: int compareTo(java.lang.Object)
androidx.core.view.MenuItemCompat$Api26Impl: android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: OrientationAwareScreenCapturer(android.content.Intent,android.media.projection.MediaProjection$Callback)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.view.Surface createInputSurface()
androidx.media.AudioAttributesImplApi21: AudioAttributesImplApi21()
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.ActionMenuPresenter getOuterActionMenuPresenter()
androidx.appcompat.widget.LinearLayoutCompat: void setMeasureWithLargestChildEnabled(boolean)
org.webrtc.CameraCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
androidx.window.core.Bounds: java.lang.String toString()
org.webrtc.Camera2Enumerator: boolean isSupported(android.content.Context)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: SurfaceTextureRenderer(java.lang.String)
androidx.core.view.ViewConfigurationCompat$Api28Impl: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration)
org.webrtc.Logging: Logging()
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkH264(android.media.MediaCodecInfo)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
androidx.core.widget.TextViewCompat$Api17Impl: void setCompoundDrawablesRelative(android.widget.TextView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
androidx.appcompat.widget.AppCompatImageView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.cloudwebrtc.webrtc.R$layout: R$layout()
androidx.window.embedding.SplitInfo: float getSplitRatio()
org.webrtc.CameraEnumerationAndroid: org.webrtc.Size getClosestSupportedSize(java.util.List,int,int)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)
org.webrtc.NetworkMonitor: void setNetworkChangeDetectorFactory(org.webrtc.NetworkChangeDetectorFactory)
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] getAvailableEffects()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
androidx.window.layout.ActivityCompatHelperApi24: ActivityCompatHelperApi24()
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: NotificationChannelGroupDetails()
org.webrtc.MediaSource: void dispose()
org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,java.nio.FloatBuffer)
org.webrtc.VideoCodecStatus: int getNumber()
org.webrtc.NetworkMonitorAutoDetect: boolean supportNetworkCallback()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: void startRecording(java.io.File)
org.webrtc.Camera1Session: org.webrtc.CameraSession$Events access$100(org.webrtc.Camera1Session)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus release()
org.webrtc.TextureBufferImpl: void retain()
org.webrtc.VideoProcessor: void setSink(org.webrtc.VideoSink)
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getStatsForTrack(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: int getInitialBufferSizeInFrames()
org.webrtc.RtpTransceiver: void setCodecPreferences(java.util.List)
androidx.loader.content.ModernAsyncTask$Status: androidx.loader.content.ModernAsyncTask$Status[] values()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String iceConnectionStateString(org.webrtc.PeerConnection$IceConnectionState)
androidx.appcompat.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)
androidx.appcompat.widget.Toolbar: void setTitleMarginTop(int)
org.webrtc.PeerConnection$RTCConfiguration: int getIceCandidatePoolSize()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.SurfaceTextureHelper: void lambda$new$0(android.graphics.SurfaceTexture)
org.webrtc.MediaStream: boolean nativeAddAudioTrackToNativeStream(long,long)
org.webrtc.EncodedImage: java.nio.ByteBuffer getBuffer()
androidx.window.embedding.SplitRule: float getSplitRatio()
org.webrtc.LibvpxVp8Decoder: long nativeCreateDecoder()
org.webrtc.EncodedImage: int getEncodedWidth()
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
org.webrtc.PeerConnection$RTCConfiguration: boolean getPresumeWritableWhenFullyRelayed()
androidx.window.layout.WindowLayoutInfo: int hashCode()
org.webrtc.EglRenderer: void clearImage(float,float,float,float)
org.webrtc.voiceengine.WebRtcAudioRecord: void setAudioSource(int)
org.webrtc.SurfaceTextureHelper$2: void onRelease(org.webrtc.TextureBufferImpl)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void success(java.lang.Object)
org.webrtc.BuiltinAudioEncoderFactoryFactory: BuiltinAudioEncoderFactoryFactory()
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataV()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnectionDependencies$Builder builder(org.webrtc.PeerConnection$Observer)
org.webrtc.EglRenderer: android.os.Handler access$302(org.webrtc.EglRenderer,android.os.Handler)
androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()
org.webrtc.MediaSource: void lambda$new$0(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean launchedActivityFromHistory(android.content.Intent)
androidx.appcompat.view.menu.ListMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
org.webrtc.PeerConnection$RTCConfiguration: java.util.List getIceServers()
org.webrtc.RtpReceiver: RtpReceiver(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: PeerConnectionObserver(org.webrtc.PeerConnection$RTCConfiguration,com.cloudwebrtc.webrtc.StateProvider,io.flutter.plugin.common.BinaryMessenger,java.lang.String)
org.webrtc.MediaCodecWrapper: void releaseOutputBuffer(int,boolean)
org.webrtc.Camera2Enumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.Logging: java.lang.String getStackTraceString(java.lang.Throwable)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.String getImplementationName$lambda-5(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
com.dexterous.flutterlocalnotifications.RepeatInterval: RepeatInterval(java.lang.String,int)
org.webrtc.RtpSender: boolean nativeSetTrack(long,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.app.Activity getActivity()
org.webrtc.VideoEncoder$EncodeInfo: VideoEncoder$EncodeInfo(org.webrtc.EncodedImage$FrameType[])
org.webrtc.DataChannel$Init: int getMaxRetransmits()
org.webrtc.PeerConnection: java.util.List nativeGetReceivers()
org.webrtc.FramerateBitrateAdjuster: void setTargets(int,double)
org.webrtc.RtpParameters$Encoding: int getNetworkPriority()
org.webrtc.RtpCapabilities$CodecCapability: int getPreferredPayloadType()
androidx.core.widget.TextViewCompat$Api28Impl: java.lang.String[] getDigitStrings(android.icu.text.DecimalFormatSymbols)
androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setFixedSize(int,int)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.RtcCertificatePem getCertificate()
com.yalantis.ucrop.view.OverlayView: void setFreestyleCropEnabled(boolean)
org.webrtc.MediaConstraints: java.lang.String stringifyKeyValuePairList(java.util.List)
org.webrtc.CameraCapturer$8: void run()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$onWebRtcAudioRecordSamplesReady$4(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$didReinitializeFirebaseCore$1(com.google.android.gms.tasks.TaskCompletionSource)
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] values()
org.webrtc.AndroidVideoDecoder$FrameInfo: AndroidVideoDecoder$FrameInfo(long,int)
org.webrtc.Logging: void w(java.lang.String,java.lang.String)
org.webrtc.VideoCodecInfo: VideoCodecInfo(int,java.lang.String,java.util.Map)
org.webrtc.FileVideoCapturer$VideoReaderY4M: org.webrtc.VideoFrame getNextFrame()
com.yalantis.ucrop.view.OverlayView: void setCircleDimmedLayer(boolean)
org.webrtc.RendererCommon$GlDrawer: void drawOes(int,float[],int,int,int,int,int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$000(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List)
androidx.appcompat.view.menu.ActionMenuItemView: void setChecked(boolean)
androidx.appcompat.widget.AppCompatToggleButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.webrtc.Predicate$1: boolean test(java.lang.Object)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getFillColor()
androidx.core.view.ViewCompat$Api17Impl: void setPaddingRelative(android.view.View,int,int,int,int)
org.webrtc.audio.WebRtcAudioManager: android.media.AudioManager getAudioManager(android.content.Context)
org.webrtc.EglBase10Impl: void makeCurrent()
org.webrtc.PeerConnection: org.webrtc.SessionDescription nativeGetRemoteDescription()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void addDefaultAudioConstraints(org.webrtc.MediaConstraints)
org.webrtc.PeerConnection: org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack,java.util.List)
androidx.appcompat.widget.AppCompatButton: int[] getAutoSizeTextAvailableSizes()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.twilio.audioswitch.AudioDevice selectedAudioDevice()
org.webrtc.voiceengine.WebRtcAudioTrack: void logUnderrunCount()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromActivity()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.MediaConstraints: java.lang.String toString()
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkPreference(java.util.List,int)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()
org.webrtc.SurfaceTextureHelper: void setTextureSize(int,int)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: void nativeFreeFactory(long)
org.webrtc.voiceengine.WebRtcAudioTrack: void access$400(org.webrtc.voiceengine.WebRtcAudioTrack,int,long)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setHostname(java.lang.String)
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)
org.webrtc.voiceengine.WebRtcAudioUtils: boolean isDefaultSampleRateOverridden()
org.webrtc.FileVideoCapturer: void stopCapture()
org.webrtc.JniCommon: java.nio.ByteBuffer nativeAllocateByteBuffer(int)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
androidx.appcompat.widget.AppCompatImageView: AppCompatImageView(android.content.Context,android.util.AttributeSet)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void initVideoEncoder()
org.webrtc.SimulcastVideoEncoder: SimulcastVideoEncoder(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory,org.webrtc.VideoCodecInfo)
androidx.appcompat.widget.ActionBarContextView: void setCustomView(android.view.View)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(int)
org.webrtc.DataChannel$Buffer: DataChannel$Buffer(java.nio.ByteBuffer,boolean)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoTrack createVideoTrack(java.lang.String,org.webrtc.VideoSource)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type valueOf(java.lang.String)
org.webrtc.CameraCapturer: java.lang.String access$1502(org.webrtc.CameraCapturer,java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule: long getNativeAudioDeviceModulePointer()
org.webrtc.AudioTrack: void setVolume(double)
org.webrtc.YuvHelper: void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
org.webrtc.NetworkChangeDetectorFactory: org.webrtc.NetworkChangeDetector create(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
com.yalantis.ucrop.view.OverlayView: void setCropGridRowCount(int)
androidx.fragment.app.Fragment: Fragment()
org.webrtc.audio.JavaAudioDeviceModule: void setSpeakerMute(boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setActivity(android.app.Activity)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: ConstraintsMap()
org.webrtc.Camera2Session$CameraStateCallback: Camera2Session$CameraStateCallback(org.webrtc.Camera2Session)
org.webrtc.NetworkMonitor: NetworkMonitor()
org.webrtc.VideoTrack: VideoTrack(long)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: CameraEnumerationAndroid$CaptureFormat(int,int,org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)
org.webrtc.DataChannel: long nativeBufferedAmount()
androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMaxTextSize()
org.webrtc.Camera2Capturer: void stopCapture()
org.webrtc.CameraCapturer: java.lang.Runnable access$200(org.webrtc.CameraCapturer)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType(boolean,int,int)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$PeerConnectionState connectionState()
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
com.cloudwebrtc.webrtc.StateProvider: android.app.Activity getActivity()
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.appcompat.widget.Toolbar: int getContentInsetEndWithActions()
androidx.appcompat.widget.AlertDialogLayout: AlertDialogLayout(android.content.Context,android.util.AttributeSet)
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
androidx.window.embedding.SplitController: void removeSplitListener(androidx.core.util.Consumer)
org.webrtc.SurfaceTextureHelper: void lambda$setFrameRotation$4(int)
org.webrtc.HardwareVideoEncoder$YuvFormat$2: HardwareVideoEncoder$YuvFormat$2(java.lang.String,int)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioProcessingFactory(org.webrtc.AudioProcessingFactory)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getAudioFormat()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void ensureInitialized()
org.webrtc.voiceengine.WebRtcAudioUtils: boolean isAcousticEchoCancelerSupported()
androidx.appcompat.widget.AppCompatCheckedTextView: void setCheckMarkDrawable(int)
org.webrtc.PeerConnectionFactory: void onNetworkThreadReady()
com.google.android.gms.measurement.AppMeasurement: java.util.List getConditionalUserProperties(java.lang.String,java.lang.String)
org.webrtc.NetworkChangeDetector$IPAddress: byte[] getAddress()
org.webrtc.RtpTransceiver: org.webrtc.RtpSender nativeGetSender(long)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
org.webrtc.NetworkMonitor: void nativeNotifyOfActiveNetworkList(long,org.webrtc.NetworkChangeDetector$NetworkInformation[])
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
org.webrtc.Camera2Session: void stop()
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$or(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.CryptoOptions getCryptoOptions()
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()
org.webrtc.NetworkMonitor: void updateObserverActiveNetworkList(long)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
org.webrtc.voiceengine.WebRtcAudioRecord: java.nio.ByteBuffer access$200(org.webrtc.voiceengine.WebRtcAudioRecord)
androidx.appcompat.widget.ActionBarOverlayLayout: void setHasNonEmbeddedTabs(boolean)
org.webrtc.FileVideoCapturer: void dispose()
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities getRtpSenderCapabilities(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.TimestampAligner: void checkNativeAlignerExists()
androidx.core.view.ViewCompat$Api16Impl: void postInvalidateOnAnimation(android.view.View)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onNewIntent(android.content.Intent)
org.webrtc.EglBase10Impl: void swapBuffers()
com.google.android.gms.measurement.AppMeasurement: int getMaxUserProperties(java.lang.String)
androidx.core.app.AlarmManagerCompat$Api19Impl: void setExact(android.app.AlarmManager,int,long,android.app.PendingIntent)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setThreshold(int)
androidx.core.widget.TextViewCompat$Api23Impl: void setHyphenationFrequency(android.widget.TextView,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityResumed(com.google.android.gms.dynamic.IObjectWrapper,long)
org.webrtc.StatsReport: StatsReport(java.lang.String,java.lang.String,double,org.webrtc.StatsReport$Value[])
org.webrtc.audio.WebRtcAudioManager: int getSampleRate(android.media.AudioManager)
org.webrtc.audio.WebRtcAudioManager: int getLowLatencyFramesPerBuffer(android.media.AudioManager)
org.webrtc.Camera2Session$CameraCaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.String getImplementationName()
androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
androidx.core.view.DisplayCutoutCompat$Api28Impl: android.view.DisplayCutout createDisplayCutout(android.graphics.Rect,java.util.List)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setIsRecordable(boolean)
org.webrtc.NetworkMonitor: void startMonitoring()
org.webrtc.EglBase10Impl: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.PeerConnection$Observer: void onRenegotiationNeeded()
androidx.appcompat.widget.ActionBarOverlayLayout: int getActionBarHideOffset()
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.Network)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpSenderToMap(org.webrtc.RtpSender)
androidx.appcompat.widget.ViewStubCompat: int getInflatedId()
org.webrtc.CameraCapturer$2: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] values()
androidx.appcompat.widget.AppCompatRadioButton: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.Camera1Enumerator: boolean isBackFacing(java.lang.String)
org.webrtc.Camera2Session: void checkIsOnCameraThread()
org.webrtc.EglRenderer: java.lang.Runnable access$400(org.webrtc.EglRenderer)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: DateTimeComponents(java.lang.String,int)
org.webrtc.VideoFrame$TextureBuffer: org.webrtc.VideoFrame$TextureBuffer$Type getType()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityDestroyed(com.google.android.gms.dynamic.IObjectWrapper,long)
org.webrtc.Camera1Enumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.audio.WebRtcAudioUtils: void logAudioDeviceInfo(java.lang.String,android.media.AudioManager)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(androidx.core.util.Consumer)
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$IPAddress[] getIpAddresses()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onSignalingChange(org.webrtc.PeerConnection$SignalingState)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void requestPermission(com.dexterous.flutterlocalnotifications.PermissionRequestListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int)
org.webrtc.CameraCapturer: org.webrtc.CapturerObserver access$500(org.webrtc.CameraCapturer)
org.webrtc.WrappedNativeVideoEncoder: long createNativeVideoEncoder()
org.webrtc.SurfaceViewRenderer: void pauseVideo()
io.objectbox.converter.FlexObjectConverter: boolean shouldRestoreAsLong(io.objectbox.flatbuffers.FlexBuffers$Reference)
androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
androidx.appcompat.widget.SearchView: void setQuery(java.lang.CharSequence)
org.webrtc.ThreadUtils$BlockingOperation: void run()
androidx.window.layout.HardwareFoldingFeature: HardwareFoldingFeature(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)
org.webrtc.audio.WebRtcAudioRecord: boolean isAudioConfigVerified()
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver nativeAddTransceiverOfType(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.AndroidVideoDecoder: void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.audio.WebRtcAudioTrack: void doAudioTrackStateCallback(int)
org.webrtc.MediaStreamTrack: boolean setEnabled(boolean)
org.webrtc.CameraCapturer$4: void onCameraError(java.lang.String)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: boolean isCreating()
androidx.appcompat.widget.Toolbar: android.content.Context getPopupContext()
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(android.graphics.drawable.Drawable)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle valueOf(java.lang.String)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: NetworkMonitorAutoDetect$WifiManagerDelegate(android.content.Context)
org.webrtc.NetworkMonitorAutoDetect: long access$000(android.net.Network)
org.webrtc.PeerConnection: PeerConnection(org.webrtc.NativePeerConnectionFactory)
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy valueOf(java.lang.String)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
androidx.appcompat.widget.AppCompatImageView: void setImageResource(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedSchedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
org.webrtc.voiceengine.WebRtcAudioManager: boolean isDeviceBlacklistedForOpenSLESUsage()
org.webrtc.Camera1Enumerator: java.util.List getSupportedFormats(java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
com.cloudwebrtc.webrtc.utils.EglUtils: EglUtils()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.GetUserMediaImpl: GetUserMediaImpl(com.cloudwebrtc.webrtc.StateProvider,android.content.Context)
androidx.appcompat.widget.ActionMenuView: int getWindowAnimations()
org.webrtc.EglRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.NetworkChangeDetector$Observer: void onNetworkPreference(java.util.List,int)
org.webrtc.CryptoOptions$SFrame: CryptoOptions$SFrame(org.webrtc.CryptoOptions,boolean,org.webrtc.CryptoOptions$1)
androidx.appcompat.widget.AppCompatTextView: void setTextClassifier(android.view.textclassifier.TextClassifier)
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(java.lang.String)
org.webrtc.CameraCapturer$2: void onCameraDisconnected(org.webrtc.CameraSession)
org.webrtc.MediaStream: boolean addTrack(org.webrtc.AudioTrack)
com.yalantis.ucrop.view.UCropView: com.yalantis.ucrop.view.OverlayView getOverlayView()
org.webrtc.audio.WebRtcAudioTrack: void access$500(long,int)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareAcousticEchoCanceler(boolean)
org.webrtc.HardwareVideoEncoder: int getSliceHeight(android.media.MediaFormat,int)
com.google.firebase.messaging.FirebaseMessagingRegistrar: FirebaseMessagingRegistrar()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean checkFieldTrial(java.lang.String,java.lang.String,boolean)
org.webrtc.voiceengine.WebRtcAudioTrack: void reportWebRtcAudioTrackStartError(org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode,java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeTrackForRendererById(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dataChannelClose(java.lang.String,java.lang.String)
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()
org.webrtc.HardwareVideoEncoder$YuvFormat$1: HardwareVideoEncoder$YuvFormat$1(java.lang.String,int)
com.yalantis.ucrop.view.OverlayView: void setOverlayViewChangeListener(com.yalantis.ucrop.callback.OverlayViewChangeListener)
org.webrtc.CameraSession$Events: void onCameraError(org.webrtc.CameraSession,java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setLastBaselineToBottomHeight(int)
org.webrtc.AddIceObserver: void onAddFailure(java.lang.String)
org.webrtc.Histogram: long nativeCreateEnumeration(java.lang.String,int)
org.webrtc.Metrics: void enable()
androidx.core.widget.CompoundButtonCompat$Api21Impl: void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode)
org.webrtc.RtpReceiver: void checkRtpReceiverExists()
org.webrtc.PeerConnection: java.util.List getTransceivers()
org.webrtc.ThreadUtils: ThreadUtils()
org.webrtc.TurnCustomizer: void dispose()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] values()
org.webrtc.PeerConnection: void nativeRestartIce()
org.webrtc.CameraCapturer: void switchCameraInternal(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setDefaultEventParameters(android.os.Bundle)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkVp8(android.media.MediaCodecInfo)
org.webrtc.VideoTrack: void addSink(org.webrtc.VideoSink)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: NetworkMonitorAutoDetect$ConnectivityManagerDelegate(android.content.Context,java.util.Set,java.lang.String)
org.webrtc.Histogram: void nativeAddSample(long,int)
org.webrtc.DataChannel: long bufferedAmount()
org.webrtc.EglBase$ConfigBuilder: EglBase$ConfigBuilder()
org.webrtc.SimulcastVideoEncoder: long createNativeVideoEncoder()
androidx.appcompat.view.menu.ListMenuItemView: void setCheckable(boolean)
org.webrtc.CameraCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.NetworkMonitor$InstanceHolder: NetworkMonitor$InstanceHolder()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver getRtpTransceiverById(java.lang.String)
androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()
com.cloudwebrtc.webrtc.CameraEventsHandler: void onFirstFrameAvailable()
org.webrtc.RtpReceiver: void setFrameDecryptor(org.webrtc.FrameDecryptor)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnectionInternal(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier)
org.webrtc.SessionDescription$Type: SessionDescription$Type(java.lang.String,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
com.google.firebase.analytics.FirebaseAnalytics: com.google.firebase.analytics.FirebaseAnalytics getInstance(android.content.Context)
org.webrtc.EglRenderer: void logStatistics()
com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled: boolean isEnabled(java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void resetAnalyticsData(long)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
org.webrtc.CameraVideoCapturer$CameraStatistics: void addFrame()
kotlin.jvm.internal.CallableReference: boolean isOpen()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readPlatformSpecifics(java.util.Map,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.lang.String toString()
androidx.window.layout.WindowMetricsCalculator$-CC: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void stop()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
org.webrtc.VideoEncoderWrapper: boolean getScalingSettingsOn(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.ThreadUtils$ThreadChecker: void detachThread()
org.webrtc.GlTextureFrameBuffer: int getHeight()
org.webrtc.VideoDecoderFactory$-CC: org.webrtc.VideoCodecInfo[] $default$getSupportedCodecs(org.webrtc.VideoDecoderFactory)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setUserProperty(java.lang.String,java.lang.String,com.google.android.gms.dynamic.IObjectWrapper,boolean,long)
androidx.window.core.Version: java.lang.String getDescription()
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask: void run()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void registerOnMeasurementEventListener(com.google.android.gms.internal.measurement.zzci)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
androidx.appcompat.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)
org.webrtc.NetworkChangeDetector$Observer: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.util.List,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String,java.util.List,java.util.List,org.webrtc.PeerConnection$1)
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)
androidx.core.widget.NestedScrollView: void setFillViewport(boolean)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: AudioTrackInterceptor(android.media.AudioTrack,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
org.webrtc.voiceengine.WebRtcAudioUtils: void setWebRtcBasedAutomaticGainControl(boolean)
androidx.core.widget.PopupWindowCompat$Api23Impl: void setOverlapAnchor(android.widget.PopupWindow,boolean)
org.webrtc.DtmfSender: java.lang.String tones()
org.webrtc.PeerConnection: java.util.List getSenders()
com.yalantis.ucrop.view.TransformImageView: void setImageMatrix(android.graphics.Matrix)
org.webrtc.Predicate: org.webrtc.Predicate negate()
org.webrtc.Camera2Session: void openCamera()
androidx.appcompat.widget.ActionBarContextView: ActionBarContextView(android.content.Context,android.util.AttributeSet)
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(org.webrtc.EglBase14$Context,int[])
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation: StyleInformation()
org.webrtc.DataChannel: long nativeRegisterObserver(org.webrtc.DataChannel$Observer)
org.webrtc.LibvpxVp8Encoder: LibvpxVp8Encoder()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setSamplesReadyCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
org.webrtc.SurfaceEglRenderer: void disableFpsReduction()
org.webrtc.VideoCapturer: void startCapture(int,int,int)
org.webrtc.Camera2Session: org.webrtc.CameraSession$CreateSessionCallback access$400(org.webrtc.Camera2Session)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority[] values()
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTrack(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.AndroidVideoDecoder: java.lang.String getImplementationName()
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationChannels(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List getStreamIds()
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLContext getRawContext()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
org.webrtc.DataChannel$Init: int getId()
org.webrtc.CameraVideoCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
com.google.android.gms.measurement.AppMeasurement: void endAdUnitExposure(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()
io.objectbox.Transaction: long nativeCreateCursor(long,java.lang.String,java.lang.Class)
org.webrtc.EglRenderer: void lambda$release$2(android.os.Looper)
org.webrtc.NetworkChangeDetector$Observer: java.lang.String getFieldTrialsString()
androidx.core.view.ViewGroupCompat$Api21Impl: void setTransitionGroup(android.view.ViewGroup,boolean)
org.webrtc.PeerConnection$IceGatheringState: PeerConnection$IceGatheringState(java.lang.String,int)
org.webrtc.PeerConnectionFactory$ThreadInfo: PeerConnectionFactory$ThreadInfo(java.lang.Thread,int)
org.webrtc.HardwareVideoEncoder: boolean shouldForceKeyFrame(long)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize()
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionDispose(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: int getBytesPerSample(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
org.webrtc.Camera2Capturer: void dispose()
androidx.appcompat.widget.ActionBarContainer: android.view.View getTabContainer()
org.webrtc.HardwareVideoEncoder: int getStride(android.media.MediaFormat,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
org.webrtc.audio.WebRtcAudioManager: int getInputBufferSize(android.content.Context,android.media.AudioManager,int,int)
org.webrtc.DataChannel$Observer: void onStateChange()
org.webrtc.CameraCapturer: java.lang.Object access$400(org.webrtc.CameraCapturer)
androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
org.webrtc.ScreenCapturerAndroid: void stopCapture()
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
org.webrtc.SurfaceTextureHelper$3: void run()
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection$Callback access$400(org.webrtc.ScreenCapturerAndroid)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: AnyThreadResult(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void createDataChannel(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)
org.webrtc.EglRenderer: void createEglSurface(android.graphics.SurfaceTexture)
androidx.appcompat.widget.DialogTitle: DialogTitle(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatToggleButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.fragment.app.FragmentContainerView: void setLayoutTransition(android.animation.LayoutTransition)
org.webrtc.SurfaceViewRenderer: void postOrRun(java.lang.Runnable)
org.webrtc.Camera2Session$CameraStateCallback: java.lang.String getErrorDescription(int)
org.webrtc.AndroidVideoDecoder: boolean isSupportedColorFormat(int)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
org.webrtc.FileVideoCapturer$VideoReader: void close()
com.google.android.gms.wallet.MaskedWallet: MaskedWallet()
io.flutter.plugins.firebase.messaging.JobIntentService: JobIntentService()
androidx.appcompat.widget.SearchView$SearchAutoComplete: int getSearchViewTextMinWidthDp()
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraOpening(java.lang.String)
androidx.core.widget.EdgeEffectCompat$Api21Impl: void onPull(android.widget.EdgeEffect,float,float)
androidx.core.content.ContextCompat$Api16Impl: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMajor()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDateMatchingDateTimeComponents(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.audio.WebRtcAudioManager: int getOutputBufferSize(android.content.Context,android.media.AudioManager,int,int)
org.webrtc.RtpParameters: java.util.List getEncodings()
org.webrtc.TextureBufferImpl$1: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.NativeLibrary: boolean isLoaded()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setQp(java.lang.Integer)
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status[] values()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: java.util.List getActiveNetworkList()
org.webrtc.LibvpxVp9Decoder: long createNativeVideoDecoder()
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String getFacingMode(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onStop(androidx.lifecycle.LifecycleOwner)
org.webrtc.BuiltinAudioEncoderFactoryFactory: long createNativeAudioEncoderFactory()
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void error(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.RtpReceiver: long getNativeRtpReceiver()
org.webrtc.RtpReceiver: java.lang.String nativeGetId(long)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordError(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setHasAlphaChannel(boolean)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void release()
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples: int getSampleRate()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setVideoDecoderFactory(org.webrtc.VideoDecoderFactory)
androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()
androidx.appcompat.widget.ActionBarOverlayLayout: java.lang.CharSequence getTitle()
androidx.appcompat.widget.Toolbar: int getTitleMarginBottom()
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams)
androidx.window.core.Version: int getPatch()
org.webrtc.LibvpxVp9Decoder: LibvpxVp9Decoder()
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] $values()
org.webrtc.SimulcastVideoEncoderFactory: SimulcastVideoEncoderFactory(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLargeIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)
com.yalantis.ucrop.view.widget.HorizontalProgressWheelView: HorizontalProgressWheelView(android.content.Context,android.util.AttributeSet)
org.webrtc.Camera1Session$1: Camera1Session$1(org.webrtc.Camera1Session)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void setTorch(java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoFrameDrawer: int distance(float,float,float,float)
org.webrtc.audio.WebRtcAudioTrack: int GetPlayoutUnderrunCount()
com.dexterous.flutterlocalnotifications.utils.StringUtils: StringUtils()
org.webrtc.SoftwareVideoDecoderFactory: SoftwareVideoDecoderFactory()
com.cloudwebrtc.webrtc.BuildConfig: BuildConfig()
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics valueOf(java.lang.String)
org.webrtc.RtpSender: void checkRtpSenderExists()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Canvas lockCanvas()
androidx.core.view.ViewCompat$Api16Impl: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)
androidx.appcompat.widget.AppCompatSpinner: void setBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setVideoTrack(org.webrtc.VideoTrack)
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneY()
org.webrtc.voiceengine.WebRtcAudioRecord: void reportWebRtcAudioRecordStartError(org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode,java.lang.String)
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: void run()
org.webrtc.audio.WebRtcAudioManager: boolean isLowLatencyOutputSupported(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int write(java.nio.ByteBuffer,int,int)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setContentDescription(android.view.MenuItem,java.lang.CharSequence)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$release$2()
org.webrtc.RTCStats: java.util.Map getMembers()
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(android.opengl.EGLContext,int[])
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.RendererCommon$RendererEvents: void onFirstFrameRendered()
org.webrtc.NV12Buffer: int getWidth()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onNetworkChanged(android.net.Network)
androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)
org.webrtc.NetworkChangeDetector: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
androidx.appcompat.view.menu.ListMenuItemView: ListMenuItemView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.Toolbar: void setTitleMarginEnd(int)
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval valueOf(java.lang.String)
org.webrtc.PeerConnection: void getStats(org.webrtc.RTCStatsCollectorCallback,org.webrtc.RtpSender)
io.objectbox.converter.FlexObjectConverter: java.lang.Object convertToDatabaseValue(java.lang.Object)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnection$Observer)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List,java.util.List)
org.webrtc.EglRenderer$1: EglRenderer$1(org.webrtc.EglRenderer)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(boolean)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)
org.webrtc.GlGenericDrawer: void drawOes(int,float[],int,int,int,int,int,int)
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] values()
org.webrtc.CameraCapturer: void reportCameraSwitchError(java.lang.String,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int hashCode()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getReceivers(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar)
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintList(android.content.res.ColorStateList)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] values()
org.webrtc.voiceengine.WebRtcAudioManager: boolean init()
org.webrtc.voiceengine.WebRtcAudioEffects: boolean isNoiseSuppressorBlacklisted()
androidx.fragment.app.DialogFragment: DialogFragment()
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams)
androidx.appcompat.widget.ActionMenuView: ActionMenuView(android.content.Context,android.util.AttributeSet)
com.yalantis.ucrop.view.widget.AspectRatioTextView: void setAspectRatio(com.yalantis.ucrop.model.AspectRatio)
org.webrtc.NetworkMonitorAutoDetect: java.util.List getActiveNetworkList()
org.webrtc.EglBase$-CC: int getOpenGlesVersionFromConfig(int[])
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$PeerConnectionState nativeConnectionState()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setVideoEncoderFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.StatsReport$Value: StatsReport$Value(java.lang.String,java.lang.String)
org.webrtc.R: R()
org.webrtc.SurfaceViewRenderer: SurfaceViewRenderer(android.content.Context,android.util.AttributeSet)
com.yalantis.ucrop.view.widget.AspectRatioTextView: AspectRatioTextView(android.content.Context,android.util.AttributeSet)
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes getAudioAttributes(android.media.AudioAttributes)
okhttp3.Protocol: okhttp3.Protocol valueOf(java.lang.String)
org.webrtc.MediaSource: org.webrtc.MediaSource$State nativeGetState(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void createDataChannel(java.lang.String,java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
org.webrtc.NativeAndroidVideoTrackSource: void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer)
androidx.window.embedding.ActivityStack: int hashCode()
org.webrtc.AndroidVideoDecoder: void deliverTextureFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback)
org.webrtc.VideoDecoderWrapper: void lambda$createDecoderCallback$0(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
org.webrtc.PeerConnection$Observer: void onIceCandidateError(org.webrtc.IceCandidateErrorEvent)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setOptions(org.webrtc.PeerConnectionFactory$Options)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer createIceServer()
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType[] values()
org.webrtc.audio.WebRtcAudioTrack: void logUnderrunCount()
org.webrtc.voiceengine.WebRtcAudioTrack: android.media.AudioTrack createAudioTrack(int,int,int)
org.webrtc.PeerConnectionFactory: void nativeInitializeAndroidGlobals()
androidx.core.app.RemoteInput$Api16Impl: void setClipData(android.content.Intent,android.content.ClipData)
org.webrtc.PeerConnection$RTCConfiguration: int getMaxIPv6Networks()
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
androidx.core.widget.TextViewCompat$Api16Impl: boolean getIncludeFontPadding(android.widget.TextView)
org.webrtc.voiceengine.WebRtcAudioRecord: boolean enableBuiltInAEC(boolean)
org.webrtc.WrappedNativeI420Buffer: void retain()
io.objectbox.converter.PropertyConverter: java.lang.Object convertToDatabaseValue(java.lang.Object)
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback: void onWebRtcAudioRecordStartError(org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode,java.lang.String)
com.yalantis.ucrop.view.GestureCropImageView: void setScaleEnabled(boolean)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.voiceengine.WebRtcAudioUtils: boolean hasMicrophone()
com.cloudwebrtc.webrtc.StateProvider: boolean putLocalTrack(java.lang.String,org.webrtc.MediaStreamTrack)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)
org.webrtc.MediaCodecWrapper: void setParameters(android.os.Bundle)
io.objectbox.exception.DbMaxDataSizeExceededException: DbMaxDataSizeExceededException(java.lang.String)
org.webrtc.CameraCapturer: boolean access$1100(org.webrtc.CameraCapturer)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setInputSampleRate(int)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)
org.webrtc.JavaI420Buffer: void retain()
androidx.window.embedding.ExtensionEmbeddingBackend: ExtensionEmbeddingBackend(androidx.window.embedding.EmbeddingInterfaceCompat)
org.webrtc.TimestampAligner: long getRtcTimeNanos()
org.webrtc.voiceengine.WebRtcAudioTrack: void nativeGetPlayoutData(int,long)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$Settings getStreamSettings()
org.webrtc.voiceengine.WebRtcAudioTrack: boolean setStreamVolume(int)
org.webrtc.Camera2Enumerator: int getFpsUnitFactor(android.util.Range[])
org.webrtc.RTCStats: org.webrtc.RTCStats create(long,java.lang.String,java.lang.String,java.util.Map)
org.webrtc.RtpSender: org.webrtc.RtpParameters nativeGetParameters(long)
com.cloudwebrtc.webrtc.StateProvider: org.webrtc.PeerConnectionFactory getPeerConnectionFactory()
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarHideOffset(int)
androidx.window.layout.WindowMetrics: int hashCode()
org.webrtc.NetworkMonitorAutoDetect: NetworkMonitorAutoDetect(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeWidth(float)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetLeft()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String streamTypeToString(int)
androidx.appcompat.widget.ViewStubCompat: void setVisibility(int)
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase getRootEglBase()
org.webrtc.voiceengine.BuildInfo: java.lang.String getProduct()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putInt(java.lang.String,int)
org.webrtc.audio.WebRtcAudioEffects: boolean isAcousticEchoCancelerSupported()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setDropDownBackgroundResource(int)
org.webrtc.RtpSender: java.util.List nativeGetStreams(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.MediaStreamTrack getTransceiversTrack(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderDispose(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceCandidate(org.webrtc.IceCandidate)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
androidx.appcompat.widget.AppCompatRadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)
org.webrtc.YuvConverter: void release()
org.webrtc.HardwareVideoEncoder: void fillInputBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer)
org.webrtc.ScreenCapturerAndroid$2: void run()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: NotificationChannelDetails()
androidx.core.widget.TextViewCompat$Api16Impl: int getMinLines(android.widget.TextView)
org.webrtc.EglRenderer: void logE(java.lang.String,java.lang.Throwable)
org.webrtc.VideoSource: long getNativeVideoTrackSource()
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
org.webrtc.EglBase: void createSurface(android.view.Surface)
org.webrtc.Metrics: org.webrtc.Metrics nativeGetAndReset()
org.webrtc.HardwareVideoEncoder: boolean access$100(org.webrtc.HardwareVideoEncoder)
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackError(java.lang.String)
org.webrtc.ThreadUtils: java.lang.StackTraceElement[] concatStackTraces(java.lang.StackTraceElement[],java.lang.StackTraceElement[])
androidx.appcompat.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.CameraCapturer$7: void run()
org.webrtc.VideoFrame: int getRotatedHeight()
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()
com.yalantis.ucrop.view.TransformImageView: android.net.Uri getImageInputUri()
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: ExtensionsWindowLayoutInfoAdapter()
org.webrtc.GlRectDrawer: void release()
org.webrtc.PeerConnection: org.webrtc.SessionDescription getRemoteDescription()
org.webrtc.voiceengine.WebRtcAudioTrack: void logBufferSizeInFrames()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.ArrayList getListArray(java.lang.String)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMaxBitrateBps()
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: PermissionUtils$1(android.os.Handler,com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback)
org.webrtc.WrappedNativeVideoEncoder: boolean isHardwareEncoder()
org.webrtc.Camera2Session$CameraStateCallback: void onError(android.hardware.camera2.CameraDevice,int)
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory(org.webrtc.VideoEncoderFactory)
kotlin.jvm.internal.FunctionReference: boolean isInline()
org.webrtc.PeerConnection$Observer$-CC: void $default$onSelectedCandidatePairChanged(org.webrtc.PeerConnection$Observer,org.webrtc.CandidatePairChangeEvent)
org.webrtc.SimulcastVideoEncoder: long nativeCreateEncoder(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory,org.webrtc.VideoCodecInfo)
androidx.core.widget.NestedScrollView: float getVerticalScrollFactorCompat()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)
org.webrtc.SurfaceTextureHelper$2: SurfaceTextureHelper$2(org.webrtc.SurfaceTextureHelper)
org.webrtc.PeerConnection: boolean setConfiguration(org.webrtc.PeerConnection$RTCConfiguration)
com.google.android.gms.measurement.AppMeasurement: java.lang.String getCurrentScreenClass()
org.webrtc.VideoEncoder$EncoderInfo: int getRequestedResolutionAlignment()
io.objectbox.converter.StringLongMapConverter: StringLongMapConverter()
org.webrtc.TimestampAligner: long nativeCreateTimestampAligner()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionClose(java.lang.String)
io.objectbox.converter.FlexObjectConverter: java.lang.Object convertToEntityProperty(byte[])
androidx.core.app.RemoteInput$Api20Impl: android.os.Bundle getResultsFromIntent(android.content.Intent)
androidx.core.app.RemoteInput$Api16Impl: android.content.ClipData getClipData(android.content.Intent)
androidx.core.app.ActivityCompat$Api16Impl: void startIntentSenderForResult(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsEllipticCurves(java.util.List)
org.webrtc.PeerConnection$RTCConfiguration: PeerConnection$RTCConfiguration(java.util.List)
androidx.window.embedding.SplitController: SplitController()
org.webrtc.GlGenericDrawer: void release()
org.webrtc.EncodedImage: EncodedImage(java.nio.ByteBuffer,java.lang.Runnable,int,int,long,org.webrtc.EncodedImage$FrameType,int,java.lang.Integer,org.webrtc.EncodedImage$1)
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)
com.google.firebase.datatransport.TransportRegistrar: TransportRegistrar()
org.webrtc.GlGenericDrawer: void prepareShader(org.webrtc.GlGenericDrawer$ShaderType,float[],int,int,int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillAlpha(float)
androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getFillAlpha()
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy valueOf(java.lang.String)
androidx.core.content.ContextCompat$Api24Impl: java.io.File getDataDir(android.content.Context)
org.webrtc.PeerConnection: void nativeSetRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.audio.VolumeLogger$LogVolumeTask: void run()
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: GetUserMediaImpl$1(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.Camera1Capturer: void printStackTrace()
org.webrtc.SessionDescription: java.lang.String getDescription()
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String toString()
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableImplicitRollback()
org.webrtc.DtmfSender: int interToneGap()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getTransceivers(io.flutter.plugin.common.MethodChannel$Result)
androidx.core.widget.NestedScrollView: NestedScrollView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean isValidDrawableResource(android.content.Context,java.lang.String,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
androidx.core.content.FileProvider$Api21Impl: java.io.File[] getExternalMediaDirs(android.content.Context)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getSessionId(com.google.android.gms.internal.measurement.zzcf)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotificationMatchingDateComponents(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkDisconnect(long)
androidx.core.view.ViewCompat$Api31Impl: void setOnReceiveContentListener(android.view.View,java.lang.String[],androidx.core.view.OnReceiveContentListener)
androidx.appcompat.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map mediaTrackToMap(org.webrtc.MediaStreamTrack)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()
androidx.appcompat.widget.AppCompatCheckBox: int getCompoundPaddingLeft()
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: boolean test(android.media.MediaCodecInfo)
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType[] values()
org.webrtc.EglRenderer: void printStackTrace()
org.webrtc.SurfaceViewRenderer: void disableFpsReduction()
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLConfig getEglConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[])
androidx.window.layout.FoldingFeature$State: java.lang.String toString()
org.webrtc.VideoSource$AspectRatio: VideoSource$AspectRatio(int,int)
androidx.core.widget.ListViewCompat$Api19Impl: boolean canScrollList(android.widget.ListView,int)
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
org.webrtc.MediaStream: boolean nativeRemoveAudioTrack(long,long)
androidx.appcompat.widget.AbsActionBarView: AbsActionBarView(android.content.Context,android.util.AttributeSet)
androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.webrtc.BitrateAdjuster: double getAdjustedFramerateFps()
org.webrtc.CameraEnumerationAndroid$1: int progressivePenalty(int,int,int,int)
org.webrtc.GlTextureFrameBuffer: void setSize(int,int)
org.webrtc.NetworkMonitor$1: org.webrtc.NetworkChangeDetector create(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails from(java.util.Map)
org.webrtc.DataChannel: void unregisterObserver()
io.objectbox.converter.NullToEmptyStringConverter: java.lang.Object convertToEntityProperty(java.lang.Object)
com.google.android.gms.common.api.internal.BasePendingResult: BasePendingResult()
androidx.window.R: R()
org.webrtc.ContextUtils: ContextUtils()
com.yalantis.ucrop.view.CropImageView: void setCropRect(android.graphics.RectF)
org.webrtc.ThreadUtils: void invokeAtFrontUninterruptibly(android.os.Handler,java.lang.Runnable)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportImageTintList()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.util.List availableAudioDevices()
io.objectbox.exception.DbDetachedException: DbDetachedException()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String deviceTypeToString(int)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$start$3()
org.webrtc.PeerConnection: long nativeGetNativePeerConnection()
org.webrtc.MediaCodecVideoDecoderFactory: MediaCodecVideoDecoderFactory(org.webrtc.EglBase$Context,org.webrtc.Predicate)
org.webrtc.RefCountDelegate: boolean safeRetain()
org.webrtc.EglBase$-CC: org.webrtc.EglBase create()
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(int)
androidx.core.widget.TextViewCompat$Api23Impl: void setCompoundDrawableTintList(android.widget.TextView,android.content.res.ColorStateList)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverSetDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.yalantis.ucrop.view.GestureCropImageView: void setDoubleTapScaleSteps(int)
org.webrtc.YuvConverter: org.webrtc.VideoFrame$I420Buffer convertInternal(org.webrtc.VideoFrame$TextureBuffer)
androidx.appcompat.view.menu.ActionMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
org.webrtc.EglBase14Impl: void createSurfaceInternal(java.lang.Object)
androidx.core.widget.NestedScrollView: int getNestedScrollAxes()
androidx.window.core.Bounds: Bounds(int,int,int,int)
androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()
io.objectbox.converter.LongLongMapConverter: boolean shouldRestoreAsLong(io.objectbox.flatbuffers.FlexBuffers$Reference)
org.webrtc.audio.WebRtcAudioRecord$1: WebRtcAudioRecord$1(java.util.concurrent.atomic.AtomicInteger)
org.webrtc.Camera1Session: long access$600(org.webrtc.Camera1Session)
androidx.appcompat.widget.AppCompatRadioButton: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getCallbackHandle(io.flutter.plugin.common.MethodChannel$Result)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
org.webrtc.PeerConnection: boolean startRtcEventLog(int,int)
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion()
androidx.core.graphics.drawable.IconCompat: IconCompat()
org.webrtc.PeerConnection: boolean removeIceCandidates(org.webrtc.IceCandidate[])
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion()
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void onResume()
org.webrtc.SurfaceViewRenderer: void setFpsReduction(float)
com.google.android.gms.measurement.AppMeasurement: java.util.Map getUserProperties(java.lang.String,java.lang.String,boolean)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
org.webrtc.RtpParameters: RtpParameters(java.lang.String,org.webrtc.RtpParameters$DegradationPreference,org.webrtc.RtpParameters$Rtcp,java.util.List,java.util.List,java.util.List)
org.webrtc.MediaSource: org.webrtc.MediaSource$State state()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityPaused(android.app.Activity)
io.flutter.plugins.imagepicker.CameraDevice: io.flutter.plugins.imagepicker.CameraDevice[] values()
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap capabilitiestoMap(org.webrtc.RtpCapabilities)
org.webrtc.CameraCapturer: org.webrtc.SurfaceTextureHelper access$900(org.webrtc.CameraCapturer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void drainEncoder()
org.webrtc.PeerConnection$KeyType: PeerConnection$KeyType(java.lang.String,int)
androidx.window.embedding.SplitController: void clearRegisteredRules()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: SimulcastVideoEncoderFactoryWrapper(org.webrtc.EglBase$Context,boolean,boolean)
org.webrtc.PeerConnection: long nativeCreatePeerConnectionObserver(org.webrtc.PeerConnection$Observer)
org.webrtc.NetworkChangeDetector$NetworkInformation: long getHandle()
org.webrtc.audio.WebRtcAudioTrack: void logNativeOutputSampleRate(int)
androidx.appcompat.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)
io.objectbox.converter.FlexObjectConverter: void addMap(io.objectbox.flatbuffers.FlexBuffersBuilder,java.lang.String,java.util.Map)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: int diff(java.lang.Object)
androidx.core.content.ContextCompat$Api24Impl: android.content.Context createDeviceProtectedStorageContext(android.content.Context)
io.objectbox.converter.NullToEmptyStringConverter: java.lang.String convertToEntityProperty(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)
androidx.loader.content.ModernAsyncTask$Status: androidx.loader.content.ModernAsyncTask$Status valueOf(java.lang.String)
org.webrtc.SurfaceViewRenderer: void updateSurfaceSize()
androidx.core.view.ViewCompat$Api16Impl: void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long)
org.webrtc.PeerConnection$Observer$-CC: void $default$onAddTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] values()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
androidx.window.core.Version: java.math.BigInteger getBigInteger()
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setFieldTrials(java.lang.String)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus valueOf(java.lang.String)
androidx.appcompat.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)
androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)
androidx.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getChannelCount()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: MethodCallHandlerImpl$5(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setCaptureTimeMs(long)
androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()
org.webrtc.H264Utils: H264Utils()
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getInputFormat()
org.webrtc.NativeLibrary$DefaultLoader: NativeLibrary$DefaultLoader()
androidx.window.core.Bounds: boolean isEmpty()
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)
androidx.appcompat.widget.Toolbar: int getContentInsetRight()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.core.view.ViewCompat$Api16Impl: int getMinimumHeight(android.view.View)
org.webrtc.LibvpxVp8Encoder: long nativeCreateEncoder()
org.webrtc.FramerateBitrateAdjuster: FramerateBitrateAdjuster()
org.webrtc.Camera2Enumerator: java.util.List convertFramerates(android.util.Range[],int)
org.webrtc.VideoSource: org.webrtc.VideoProcessor access$300(org.webrtc.VideoSource)
org.webrtc.Camera2Session$CameraCaptureCallback: Camera2Session$CameraCaptureCallback(org.webrtc.Camera2Session$1)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
org.webrtc.audio.WebRtcAudioUtils: boolean runningOnEmulator()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.webrtc.Camera2Session: android.view.Surface access$1002(org.webrtc.Camera2Session,android.view.Surface)
org.webrtc.PeerConnectionFactory: long nativeCreateVideoTrack(long,java.lang.String,long)
org.webrtc.RtpReceiver: void nativeSetFrameDecryptor(long,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void reStartCamera()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMinor()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $values()
androidx.core.view.ViewCompat$Api17Impl: int getLayoutDirection(android.view.View)
org.webrtc.GlRectDrawer$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.AlarmManager getAlarmManager(android.content.Context)
io.objectbox.converter.FlexObjectConverter: java.lang.Object convertToKey(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: AppCompatTextView(android.content.Context,android.util.AttributeSet)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableCpuOveruseDetection()
androidx.appcompat.widget.ButtonBarLayout: void setAllowStacking(boolean)
org.webrtc.VideoSource$1: void onCapturerStarted(boolean)
org.webrtc.PeerConnectionFactory$Builder: PeerConnectionFactory$Builder(org.webrtc.PeerConnectionFactory$1)
org.webrtc.RtpCapabilities$HeaderExtensionCapability: RtpCapabilities$HeaderExtensionCapability(java.lang.String,int,boolean)
org.webrtc.SurfaceViewRenderer: SurfaceViewRenderer(android.content.Context)
org.webrtc.voiceengine.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] getAvailableEffects()
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
org.webrtc.voiceengine.WebRtcAudioTrack: void setSpeakerMute(boolean)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String audioSourceToString(int)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()
org.webrtc.MediaCodecWrapper: void release()
org.webrtc.MediaCodecWrapper: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)
androidx.core.view.ViewCompat$Api17Impl: android.view.Display getDisplay(android.view.View)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map access$100(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getNumTemporalLayers()
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeStepGranularity()
org.webrtc.HardwareVideoEncoder$BusyCount: void waitForZero()
org.webrtc.VideoTrack: void dispose()
org.webrtc.CameraCapturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.SurfaceEglRenderer: void surfaceDestroyed(android.view.SurfaceHolder)
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] supportedCodecs()
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
androidx.appcompat.widget.ActionBarContainer: void setTransitioning(boolean)
org.webrtc.JavaI420Buffer: JavaI420Buffer(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable)
org.webrtc.EglRenderer$1: void run()
androidx.window.layout.SidecarCompat: SidecarCompat(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)
org.webrtc.ThreadUtils: java.lang.Object invokeAtFrontUninterruptibly(android.os.Handler,java.util.concurrent.Callable)
org.webrtc.audio.WebRtcAudioRecord: void setNativeAudioRecord(long)
org.webrtc.PeerConnection: boolean nativeRemoveTrack(long)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void setParameters(android.os.Bundle)
org.webrtc.CameraCapturer: org.webrtc.CameraCapturer$SwitchState access$102(org.webrtc.CameraCapturer,org.webrtc.CameraCapturer$SwitchState)
org.webrtc.PeerConnectionFactory: void initializeFieldTrials(java.lang.String)
org.webrtc.Camera1Session: void updateCameraParameters(android.hardware.Camera,android.hardware.Camera$Parameters,org.webrtc.CameraEnumerationAndroid$CaptureFormat,org.webrtc.Size,boolean)
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason valueOf(java.lang.String)
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.DataChannel: boolean send(org.webrtc.DataChannel$Buffer)
org.webrtc.voiceengine.WebRtcAudioEffects: boolean canUseNoiseSuppressor()
org.webrtc.MediaStream: void addNativeAudioTrack(long)
org.webrtc.Camera1Session: void access$200(org.webrtc.Camera1Session)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(int[])
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: int dequeueInputBuffer(long)
androidx.appcompat.widget.Toolbar: void setTitleMarginStart(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readSoundInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRemoveStream(org.webrtc.MediaStream)
io.objectbox.exception.NonUniqueResultException: NonUniqueResultException(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioRecord: void assertTrue(boolean)
org.webrtc.AndroidVideoDecoder: void reformat(android.media.MediaFormat)
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] values()
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(boolean,boolean)
org.webrtc.CameraVideoCapturer$CameraStatistics: CameraVideoCapturer$CameraStatistics(org.webrtc.SurfaceTextureHelper,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: FlutterRTCVideoRenderer$1(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer)
org.webrtc.RtpParameters$HeaderExtension: boolean getEncrypted()
org.webrtc.audio.WebRtcAudioRecord: WebRtcAudioRecord(android.content.Context,java.util.concurrent.ScheduledExecutorService,android.media.AudioManager,int,int,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,boolean,boolean)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: WindowInfoTrackerCallbackAdapter(androidx.window.layout.WindowInfoTracker)
org.webrtc.SurfaceTextureHelper: void tryDeliverTextureFrame()
androidx.core.content.res.FontResourcesParserCompat$Api21Impl: int getType(android.content.res.TypedArray,int)
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1(androidx.core.util.Consumer)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckIntervalStrongConnectivity()
androidx.window.R$id: R$id()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getPlayState()
org.webrtc.YuvConverter$ShaderCallbacks: YuvConverter$ShaderCallbacks(org.webrtc.YuvConverter$1)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int)
androidx.core.widget.CompoundButtonCompat$Api23Impl: android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton)
org.webrtc.voiceengine.WebRtcAudioTrack: boolean stopPlayout()
org.webrtc.VideoDecoder: long createNativeVideoDecoder()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String channelMaskToString(int)
com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: AbstractSafeParcelable()
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype[] values()
org.webrtc.PeerConnectionFactory$Builder: PeerConnectionFactory$Builder()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getBufferCapacityInFrames()
org.webrtc.PeerConnection: boolean nativeAddIceCandidate(java.lang.String,int,java.lang.String)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
org.webrtc.GlUtil: int generateTexture(int)
com.google.android.gms.measurement.AppMeasurement: void setConditionalUserProperty(com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
io.objectbox.BoxStore: long nativeBeginReadTx(long)
org.webrtc.HardwareVideoEncoder$1: HardwareVideoEncoder$1(org.webrtc.HardwareVideoEncoder)
org.webrtc.EglRenderer: org.webrtc.EglBase access$000(org.webrtc.EglRenderer)
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getAdjustedDefault()
io.objectbox.exception.DbExceptionListenerJni: void nativeCancelCurrentException()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getSenders(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoFrame$Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
org.webrtc.AndroidVideoDecoder$1: AndroidVideoDecoder$1(org.webrtc.AndroidVideoDecoder,java.lang.String)
androidx.core.widget.NestedScrollView: void setSmoothScrollingEnabled(boolean)
androidx.appcompat.view.menu.ExpandedMenuView: int getWindowAnimations()
org.webrtc.Camera2Capturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.PeerConnection$Observer)
org.webrtc.RtpParameters$Encoding: RtpParameters$Encoding(java.lang.String,boolean,java.lang.Double)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMaxFramerate()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$release$3()
org.webrtc.CameraVideoCapturer$MediaRecorderHandler: void onMediaRecorderError(java.lang.String)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.VideoProcessor$-CC: org.webrtc.VideoFrame applyFrameAdaptationParameters(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityDestroyed(android.app.Activity)
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType fromNativeIndex(int)
androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
org.webrtc.audio.WebRtcAudioEffects: boolean isNoiseSuppressorSupported()
org.webrtc.RendererCommon$GlDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
org.webrtc.RtpReceiver: void SetObserver(org.webrtc.RtpReceiver$Observer)
org.webrtc.VideoDecoder$Settings: VideoDecoder$Settings(int,int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void reStartCamera(com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy valueOf(java.lang.String)
org.webrtc.HardwareVideoEncoder$YuvFormat: HardwareVideoEncoder$YuvFormat(java.lang.String,int,org.webrtc.HardwareVideoEncoder$1)
org.webrtc.PeerConnectionFactory: boolean startAecDump(int,int)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
org.webrtc.TimestampAligner: long translateTimestamp(long)
androidx.appcompat.widget.Toolbar: int getContentInsetEnd()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushString(java.lang.String)
org.webrtc.JniHelper: byte[] getStringBytes(java.lang.String)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
org.webrtc.voiceengine.WebRtcAudioTrack: long access$300(org.webrtc.voiceengine.WebRtcAudioTrack)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void access$000(android.os.ResultReceiver,int,java.lang.String[],int[])
org.webrtc.ScreenCapturerAndroid: boolean isScreencast()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
org.webrtc.voiceengine.WebRtcAudioRecord: void setErrorCallback(org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback)
org.webrtc.Camera2Session: android.hardware.camera2.CameraCaptureSession access$102(org.webrtc.Camera2Session,android.hardware.camera2.CameraCaptureSession)
androidx.window.layout.FoldingFeature$State: FoldingFeature$State(java.lang.String)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetEnd()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateX(float)
org.webrtc.audio.WebRtcAudioTrack: int getStreamMaxVolume()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: boolean getPreferredEncrypted()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: kotlin.Unit lambda$startListening$1(java.util.List,com.twilio.audioswitch.AudioDevice)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onSetSuccess()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
org.webrtc.YuvConverter: org.webrtc.VideoFrame$I420Buffer convert(org.webrtc.VideoFrame$TextureBuffer)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
org.webrtc.Logging: void d(java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void selectAudioOutput(java.lang.Class)
org.webrtc.PeerConnection$IceServer$Builder: PeerConnection$IceServer$Builder(java.util.List,org.webrtc.PeerConnection$1)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()
org.webrtc.DefaultVideoEncoderFactory: DefaultVideoEncoderFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy)
org.webrtc.NetworkChangeDetector$NetworkInformation: NetworkChangeDetector$NetworkInformation(java.lang.String,org.webrtc.NetworkChangeDetector$ConnectionType,org.webrtc.NetworkChangeDetector$ConnectionType,long,org.webrtc.NetworkChangeDetector$IPAddress[])
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event valueOf(java.lang.String)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] values()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode: org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode[] values()
org.webrtc.SurfaceTextureHelper$3: SurfaceTextureHelper$3(org.webrtc.SurfaceTextureHelper)
org.webrtc.CameraEnumerator: boolean isFrontFacing(java.lang.String)
org.webrtc.Logging$TraceLevel: Logging$TraceLevel(java.lang.String,int,int)
org.webrtc.RTCStats: double getTimestampUs()
org.webrtc.CameraCapturer: org.webrtc.CameraSession access$702(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
org.webrtc.AndroidVideoDecoder: void releaseSurface()
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread: void stopThread()
com.google.android.gms.internal.measurement.zzbl: com.google.android.gms.internal.measurement.zzbl[] values()
androidx.appcompat.widget.Toolbar: int getTitleMarginStart()
org.webrtc.PeerConnection: void getStats(org.webrtc.RTCStatsCollectorCallback,org.webrtc.RtpReceiver)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
org.webrtc.CameraCapturer$6: CameraCapturer$6(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
androidx.appcompat.widget.Toolbar: int getTitleMarginEnd()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcelable)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
androidx.window.layout.ActivityCompatHelperApi30: ActivityCompatHelperApi30()
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState valueOf(java.lang.String)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void play()
org.webrtc.Logging: void w(java.lang.String,java.lang.String,java.lang.Throwable)
org.webrtc.audio.JavaAudioDeviceModule: JavaAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean)
androidx.core.text.TextUtilsCompat$Api17Impl: int getLayoutDirectionFromLocale(java.util.Locale)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
org.webrtc.audio.WebRtcAudioRecord: boolean logActiveRecordingConfigs(int,java.util.List)
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters createFrameAdaptationParameters(int,int,int,int,int,int,long,boolean)
org.webrtc.MediaStreamTrack: MediaStreamTrack(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void showNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void drainAudio()
org.webrtc.MediaStreamTrack: void dispose()
androidx.appcompat.view.menu.ExpandedMenuView: ExpandedMenuView(android.content.Context,android.util.AttributeSet)
org.webrtc.PeerConnectionFactory: void stopInternalTracingCapture()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.Person buildPerson(android.content.Context,com.dexterous.flutterlocalnotifications.models.PersonDetails)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
com.yalantis.ucrop.view.CropImageView: void setMaxResultImageSizeX(int)
androidx.appcompat.widget.AppCompatSpinner: android.content.res.ColorStateList getSupportBackgroundTintList()
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map access$400(com.cloudwebrtc.webrtc.GetUserMediaImpl)
com.google.firebase.concurrent.ExecutorsRegistrar: ExecutorsRegistrar()
org.webrtc.CryptoOptions: CryptoOptions(boolean,boolean,boolean,boolean)
org.webrtc.JavaI420Buffer: void checkCapacity(java.nio.ByteBuffer,int,int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
androidx.core.view.accessibility.AccessibilityRecordCompat$Api15Impl: void setMaxScrollX(android.view.accessibility.AccessibilityRecord,int)
org.webrtc.Loggable: void onLogMessage(java.lang.String,org.webrtc.Logging$Severity,java.lang.String)
com.yalantis.ucrop.view.OverlayView: android.graphics.RectF getCropViewRect()
androidx.appcompat.view.menu.ListMenuItemView: void setForceShowIcon(boolean)
org.webrtc.EglRenderer$FrameListener: void onFrame(android.graphics.Bitmap)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
org.webrtc.VideoEncoder$ResolutionBitrateLimits: VideoEncoder$ResolutionBitrateLimits(int,int,int,int)
org.webrtc.voiceengine.WebRtcAudioTrack: void access$700(org.webrtc.voiceengine.WebRtcAudioTrack,java.lang.String)
androidx.appcompat.widget.Toolbar: int getContentInsetLeft()
org.webrtc.CameraCapturer: org.webrtc.CameraSession$CreateSessionCallback access$1900(org.webrtc.CameraCapturer)
com.yalantis.ucrop.view.CropImageView: void setMaxResultImageSizeY(int)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
org.webrtc.GlRectDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.CameraCapturer$9: CameraCapturer$9(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.VideoEncoder$Settings: VideoEncoder$Settings(int,int,int,int,int,int,boolean,org.webrtc.VideoEncoder$Capabilities)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraError(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$onFrame$1(org.webrtc.VideoFrame)
com.yalantis.ucrop.view.OverlayView: void setCropGridColor(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: void invoke(java.lang.Object[])
org.webrtc.PeerConnection$Observer: void onSignalingChange(org.webrtc.PeerConnection$SignalingState)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void stop()
org.webrtc.RtpSender: boolean setTrack(org.webrtc.MediaStreamTrack,boolean)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setUserId(java.lang.String,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStreamTrack getTrackForId(java.lang.String)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider: FlutterFirebaseMessagingInitProvider()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcel)
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat findClosestCaptureFormat(android.hardware.Camera$Parameters,int,int,int)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory(org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map mediaStreamToMap(org.webrtc.MediaStream)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoOutput(boolean)
org.webrtc.TextureBufferImpl$2: void onRelease(org.webrtc.TextureBufferImpl)
androidx.core.graphics.drawable.DrawableCompat$Api19Impl: boolean isAutoMirrored(android.graphics.drawable.Drawable)
androidx.window.layout.WindowMetricsCalculator$-CC: void reset()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRateAllocation$lambda-3(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$BitrateAllocation,int)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)
org.webrtc.TextureBufferImpl: android.graphics.Matrix getTransformMatrix()
org.webrtc.Camera1Capturer: void dispose()
org.webrtc.audio.LowLatencyAudioBufferManager: LowLatencyAudioBufferManager()
io.objectbox.exception.DbExceptionListener$-CC: void cancelCurrentException()
androidx.appcompat.widget.AppCompatToggleButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)
org.webrtc.RtcCertificatePem: java.lang.String getCertificate()
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.io.File getRecordFile()
org.webrtc.PeerConnection: org.webrtc.DataChannel nativeCreateDataChannel(java.lang.String,org.webrtc.DataChannel$Init)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status valueOf(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus initEncode$lambda-0(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
androidx.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.VideoCodecInfo: int hashCode()
org.webrtc.Camera2Session: void access$300(org.webrtc.Camera2Session)
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy[] values()
org.webrtc.Camera1Session: org.webrtc.Histogram access$700()
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
androidx.media.AudioAttributesCompat: AudioAttributesCompat()
androidx.window.layout.WindowLayoutInfo: java.lang.String toString()
org.webrtc.ThreadUtils$2: void run()
androidx.window.embedding.SplitController$Companion: SplitController$Companion()
org.webrtc.NV12Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)
org.webrtc.DtmfSender: int nativeDuration(long)
androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void lambda$success$0(java.lang.Object)
org.webrtc.audio.WebRtcAudioTrack: void releaseAudioResources()
org.webrtc.voiceengine.BuildInfo: java.lang.String getDeviceManufacturer()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushByte(byte[])
org.webrtc.MediaStreamTrack: long getNativeMediaStreamTrack()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onAvailableBitrate(int)
org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadYuvData(int,int,int[],java.nio.ByteBuffer[])
org.webrtc.HardwareVideoEncoder$1: void run()
org.webrtc.PeerConnection$Observer: void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState)
androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection getMediaProjection()
androidx.appcompat.widget.AppCompatButton: int getAutoSizeStepGranularity()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setNumericShortcut(android.view.MenuItem,char,int)
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void requestStart(android.app.Activity,int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
org.webrtc.VideoDecoderWrapper: org.webrtc.VideoDecoder$Callback createDecoderCallback(long)
org.webrtc.NetworkMonitor: void access$100(org.webrtc.NetworkMonitor,org.webrtc.NetworkChangeDetector$ConnectionType)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: MethodCallHandlerImpl$3(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NativeLibrary: void initialize(org.webrtc.NativeLibraryLoader,java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()
org.webrtc.CameraVideoCapturer$CameraStatistics$1: CameraVideoCapturer$CameraStatistics$1(org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.NetworkMonitor: void stopMonitoring(long)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void beginAdUnitExposure(java.lang.String,long)
org.webrtc.CameraCapturer$SwitchState: CameraCapturer$SwitchState(java.lang.String,int)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getStunCandidateKeepaliveInterval()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)
org.webrtc.H264Utils: boolean isSameH264Profile(java.util.Map,java.util.Map)
org.webrtc.audio.WebRtcAudioRecord: java.lang.String lambda$scheduleLogRecordingConfigurationsTask$0(android.media.AudioRecord)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMinTextSize()
org.webrtc.voiceengine.WebRtcAudioTrack: void logBufferCapacityInFrames()
com.dexterous.flutterlocalnotifications.models.MessageDetails: MessageDetails(java.lang.String,java.lang.Long,com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.String)
org.webrtc.DtmfSender: boolean nativeCanInsertDtmf(long)
org.webrtc.PeerConnection: org.webrtc.RtpSender nativeCreateSender(java.lang.String,java.lang.String)
org.webrtc.MediaCodecUtils: java.lang.Integer selectColorFormat(int[],android.media.MediaCodecInfo$CodecCapabilities)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setEncodedWidth(int)
org.webrtc.audio.WebRtcAudioEffects: boolean isEffectTypeAvailable(java.util.UUID,java.util.UUID)
org.webrtc.EglRenderer: void resetStatistics(long)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void listenRendererEvents()
org.webrtc.Camera1Session: void stop()
com.google.android.gms.auth.api.signin.internal.SignInHubActivity: SignInHubActivity()
org.webrtc.Camera2Session: android.hardware.camera2.CameraDevice access$700(org.webrtc.Camera2Session)
org.webrtc.VideoDecoderWrapper: VideoDecoderWrapper()
androidx.appcompat.widget.Toolbar: android.view.MenuInflater getMenuInflater()
org.webrtc.RtpTransceiver: void nativeStopStandard(long)
org.webrtc.NetworkMonitor$2: NetworkMonitor$2(org.webrtc.NetworkMonitor,java.lang.String)
org.webrtc.CalledByNativeUnchecked: java.lang.String value()
org.webrtc.Camera1Session: boolean access$502(org.webrtc.Camera1Session,boolean)
androidx.core.view.MarginLayoutParamsCompat$Api17Impl: void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams,int)
androidx.window.R$attr: R$attr()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
androidx.core.app.BundleCompat$Api18Impl: android.os.IBinder getBinder(android.os.Bundle,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
org.webrtc.CryptoOptions$Srtp: CryptoOptions$Srtp(org.webrtc.CryptoOptions,boolean,boolean,boolean)
androidx.window.layout.WindowLayoutInfo: WindowLayoutInfo(java.util.List)
org.webrtc.CallSessionFileRotatingLogSink: void nativeDeleteSink(long)
org.webrtc.NV21Buffer: NV21Buffer(byte[],int,int,java.lang.Runnable)
org.webrtc.audio.WebRtcAudioUtils: void logAudioState(java.lang.String,android.content.Context,android.media.AudioManager)
androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)
com.yalantis.ucrop.view.CropImageView: com.yalantis.ucrop.callback.CropBoundsChangeListener getCropBoundsChangeListener()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void requestMobileNetwork(android.net.ConnectivityManager$NetworkCallback)
io.objectbox.converter.IntegerFlexMapConverter: IntegerFlexMapConverter()
org.webrtc.CryptoOptions$Srtp: boolean getEnableGcmCryptoSuites()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setConditionalUserProperty(android.os.Bundle,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.List createIceServers(com.cloudwebrtc.webrtc.utils.ConstraintsArray)
androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)
org.webrtc.voiceengine.WebRtcAudioRecord: void logMainParameters()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onTrack(org.webrtc.RtpTransceiver)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack$State state()
androidx.appcompat.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundResource(int)
org.webrtc.EncodedImage$Builder: EncodedImage$Builder(org.webrtc.EncodedImage$1)
org.webrtc.LibaomAv1Decoder: LibaomAv1Decoder()
org.webrtc.audio.WebRtcAudioTrackUtils: WebRtcAudioTrackUtils()
org.webrtc.EglRenderer: android.os.Handler access$300(org.webrtc.EglRenderer)
androidx.appcompat.widget.AppCompatTextView: android.view.textclassifier.TextClassifier getTextClassifier()
androidx.core.app.AppOpsManagerCompat$Api29Impl: android.app.AppOpsManager getSystemService(android.content.Context)
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType valueOf(java.lang.String)
androidx.window.embedding.ActivityFilter: int hashCode()
com.google.android.gms.measurement.AppMeasurement: java.lang.String getGmpAppId()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: AudioDeviceKind(java.lang.String,int,java.lang.String,java.lang.Class)
androidx.appcompat.widget.SearchView: int getPreferredWidth()
io.objectbox.converter.NullToEmptyStringConverter: java.lang.Object convertToDatabaseValue(java.lang.Object)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: java.util.List getActiveNetworkList()
org.webrtc.SurfaceTextureHelper: void release()
androidx.core.view.ViewCompat$Api16Impl: void setImportantForAccessibility(android.view.View,int)
org.webrtc.audio.WebRtcAudioEffects: boolean setAEC(boolean)
androidx.lifecycle.ViewModel: ViewModel()
org.webrtc.VideoFrame$Buffer: int getHeight()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.voiceengine.WebRtcAudioTrack: void releaseAudioResources()
org.webrtc.PeerConnectionFactory: long nativeCreateVideoSource(long,boolean,boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map candidateToMap(org.webrtc.IceCandidate)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: java.nio.ByteBuffer[] getOutputBuffers()
org.webrtc.Camera2Capturer: void startCapture(int,int,int)
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
org.webrtc.RefCounted: void retain()
io.objectbox.converter.FlexObjectConverter: java.util.Map buildMap(io.objectbox.flatbuffers.FlexBuffers$Map)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeWidth()
org.webrtc.MediaConstraints: java.util.List getOptional()
org.webrtc.voiceengine.WebRtcAudioTrack: void assertTrue(boolean)
org.webrtc.MediaSource: void runWithReference(java.lang.Runnable)
okhttp3.TlsVersion: okhttp3.TlsVersion valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()
androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory nativeCreatePeerConnectionFactory(android.content.Context,org.webrtc.PeerConnectionFactory$Options,long,long,long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoDecoderFactory,long,long,long,long,long)
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.FileVideoCapturer: boolean isScreencast()
org.webrtc.PeerConnection: java.util.List nativeGetSenders()
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: WebRtcAudioTrack$AudioTrackThread(org.webrtc.audio.WebRtcAudioTrack,java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: void onReceiveResult(int,android.os.Bundle)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
org.webrtc.voiceengine.WebRtcAudioUtils: boolean useWebRtcBasedNoiseSuppressor()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(java.lang.String)
org.webrtc.voiceengine.WebRtcAudioRecord: void nativeCacheDirectBufferAddress(java.nio.ByteBuffer,long)
org.webrtc.EglRenderer: void lambda$init$0(org.webrtc.EglBase$Context,int[])
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraOpening(java.lang.String)
org.webrtc.DynamicBitrateAdjuster: int getAdjustedBitrateBps()
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.webrtc.VideoFrameDrawer$YuvUploader: VideoFrameDrawer$YuvUploader(org.webrtc.VideoFrameDrawer$1)
org.webrtc.YuvHelper: void nativeI420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
androidx.appcompat.widget.ViewStubCompat: void setInflatedId(int)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerPadding()
androidx.appcompat.widget.AppCompatTextView: void setTextFuture(java.util.concurrent.Future)
org.webrtc.voiceengine.WebRtcAudioUtils: java.lang.String modeToString(int)
org.webrtc.JniHelper: java.lang.Object getKey(java.util.Map$Entry)
androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableGcmCryptoSuites(boolean)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
org.webrtc.MediaCodecWrapper: void queueInputBuffer(int,int,int,long,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityPaused(com.google.android.gms.dynamic.IObjectWrapper,long)
org.webrtc.EglBase: void releaseSurface()
org.webrtc.JavaI420Buffer: void release()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$SdpSemantics getSdpSemantics()
androidx.appcompat.view.menu.ActionMenuItemView: void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void releaseOutputBuffer(int,boolean)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
org.webrtc.PeerConnection$Observer: void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataU()
io.objectbox.exception.DbShutdownException: DbShutdownException(java.lang.String,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void clearMeasurementEnabled(long)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State fromNativeIndex(int)
org.webrtc.EglRenderer$FrameListenerAndParams: EglRenderer$FrameListenerAndParams(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.Camera2Session: void access$600(org.webrtc.Camera2Session,java.lang.String)
org.webrtc.RtpSender: boolean setParameters(org.webrtc.RtpParameters)
com.google.android.gms.measurement.AppMeasurementService: AppMeasurementService()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl(android.media.MediaCodec)
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,java.lang.Runnable)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: long createNativeVideoEncoder()
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onCreateFailure(java.lang.String)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
androidx.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
org.webrtc.CameraSession$CreateSessionCallback: void onDone(org.webrtc.CameraSession)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String getNextDataChannelUUID()
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void performAction(android.os.Bundle,com.google.android.gms.internal.measurement.zzcf,long)
androidx.window.core.Bounds: int getBottom()
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType[] values()
org.webrtc.DataChannel: java.lang.String nativeLabel()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setFormat(int)
org.webrtc.VideoFrame$Buffer$-CC: int $default$getBufferType(org.webrtc.VideoFrame$Buffer)
android.support.v4.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
org.webrtc.voiceengine.WebRtcAudioRecord: org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback access$700()
androidx.core.widget.TextViewCompat$Api17Impl: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView)
org.webrtc.NetworkMonitorAutoDetect: java.lang.String getWifiSSID(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioDeviceModule(org.webrtc.audio.AudioDeviceModule)
org.webrtc.LibvpxVp9Encoder: boolean nativeIsSupported()
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataV()
io.objectbox.Cursor: void nativeDestroy(long)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushNull()
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()
org.webrtc.MediaCodecWrapper: void stop()
com.yalantis.ucrop.view.CropImageView: void setImageToWrapCropBoundsAnimDuration(long)
androidx.appcompat.widget.ViewStubCompat: android.view.LayoutInflater getLayoutInflater()
androidx.core.content.ContextCompat$Api16Impl: void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Boolean getAllowCodecSwitching()
androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: NotificationDetails()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getAppInstanceId(com.google.android.gms.internal.measurement.zzcf)
org.webrtc.ThreadUtils: void executeUninterruptibly(org.webrtc.ThreadUtils$BlockingOperation)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] values()
org.webrtc.Camera2Session$CameraStateCallback: void onClosed(android.hardware.camera2.CameraDevice)
com.yalantis.ucrop.view.widget.HorizontalProgressWheelView: void setMiddleLineColor(int)
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: long lseek(java.io.FileDescriptor,long,int)
androidx.appcompat.widget.SearchView: int getInputType()
org.webrtc.EglRenderer$2: void run()
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback: void onWebRtcAudioTrackInitError(java.lang.String)
com.cloudwebrtc.webrtc.R$dimen: R$dimen()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMinBitrateBps()
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: GetUserMediaImpl$2(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
org.webrtc.audio.WebRtcAudioRecord: int channelCountToConfiguration(int)
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.NV21Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: void close(java.io.FileDescriptor)
androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()
org.webrtc.PeerConnection: void addIceCandidate(org.webrtc.IceCandidate,org.webrtc.AddIceObserver)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getCachedAppInstanceId(com.google.android.gms.internal.measurement.zzcf)
androidx.appcompat.widget.ActionBarContainer: void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.android.HandlerContext createDispatcher(java.util.List)
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)
org.webrtc.MediaStreamTrack: boolean nativeSetEnabled(long,boolean)
org.webrtc.RtpSender: long nativeGetDtmfSender(long)
io.objectbox.converter.StringMapConverter: byte[] convertToDatabaseValue(java.util.Map)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(int,int)
org.webrtc.RtpSender: java.lang.String nativeGetId(long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)
io.objectbox.converter.NullToEmptyStringConverter: NullToEmptyStringConverter()
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: DefaultStyleInformation(java.lang.Boolean,java.lang.Boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void applyGrouping(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.RtpCapabilities$CodecCapability: RtpCapabilities$CodecCapability()
org.webrtc.YuvConverter: void lambda$convertInternal$0(java.nio.ByteBuffer)
androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()
org.webrtc.GlGenericDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.window.core.Version: Version(int,int,int,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] values()
org.webrtc.NV21Buffer: void nativeCropAndScale(int,int,int,int,int,int,byte[],int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)
org.webrtc.EglRenderer: void pauseVideo()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings$lambda-4(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
androidx.window.embedding.SplitInfo: SplitInfo(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)
androidx.core.content.ContextCompat$Api26Impl: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)
org.webrtc.CameraCapturer: java.lang.String getCameraName()
org.webrtc.Camera1Session: boolean access$500(org.webrtc.Camera1Session)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.voiceengine.WebRtcAudioTrack: void logMainParametersExtended()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: void onFrameResolutionChanged(int,int,int)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void selectAudioOutput(com.cloudwebrtc.webrtc.audio.AudioDeviceKind)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
org.webrtc.Logging: java.util.logging.Logger createFallbackLogger()
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableEncryptedRtpHeaderExtensions(boolean)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] values()
kotlin.jvm.internal.Lambda: Lambda(int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
org.webrtc.Predicate$1: Predicate$1(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.VideoEncoderWrapper: VideoEncoderWrapper()
org.webrtc.voiceengine.WebRtcAudioRecord: int initRecording(int,int)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(int)
org.webrtc.NetworkMonitorAutoDetect: void setWifiManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetTrack(java.lang.String,java.lang.String,java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$IceConnectionState: PeerConnection$IceConnectionState(java.lang.String,int)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityResumed(android.app.Activity)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver: AlarmManagerSchedulerBroadcastReceiver()
org.webrtc.PeerConnection$Observer: void onRemoveTrack(org.webrtc.RtpReceiver)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLDisplay getEglDisplay()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void start()
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.core.widget.ListViewCompat$Api19Impl: void scrollListBy(android.widget.ListView,int)
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord createAudioRecordOnMOrHigher(int,int,int,int,int)
org.webrtc.audio.WebRtcAudioTrack: boolean stopPlayout()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean hasInternetCapability(android.net.Network)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void stopListening()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: SimulcastVideoEncoderFactoryWrapper$FallbackFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.WrappedNativeI420Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
io.objectbox.exception.DbFullException: DbFullException(java.lang.String)
androidx.core.view.ViewCompat$Api17Impl: int getPaddingEnd(android.view.View)
org.webrtc.audio.VolumeLogger: void start()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void sendEvent(java.lang.Object)
org.webrtc.EglBase14Impl: void createSurface(android.view.Surface)
org.webrtc.JniHelper: JniHelper()
org.webrtc.PeerConnection: void setAudioRecording(boolean)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()
org.webrtc.VideoEncoder$BitrateAllocation: VideoEncoder$BitrateAllocation(int[][])
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: java.lang.String getMapStrValue(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: java.nio.ByteBuffer access$300(org.webrtc.audio.WebRtcAudioTrack)
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
org.webrtc.audio.WebRtcAudioRecord: boolean enableBuiltInNS(boolean)
org.webrtc.ThreadUtils$ThreadChecker: ThreadUtils$ThreadChecker()
org.webrtc.DtmfSender: boolean insertDtmf(java.lang.String,int,int)
org.webrtc.PeerConnectionFactory: void stopAecDump()
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object,android.view.View$OnFocusChangeListener)
org.webrtc.LibaomAv1Decoder: boolean nativeIsSupported()
androidx.appcompat.widget.AppCompatSpinner: void setDropDownWidth(int)
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void detachCallback(java.lang.Integer)
org.webrtc.DtmfSender: java.lang.String nativeTones(long)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getGmpAppId(com.google.android.gms.internal.measurement.zzcf)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType)
org.webrtc.VideoProcessor: void onFrameCaptured(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintList(android.content.res.ColorStateList)
org.webrtc.Logging: void injectLoggable(org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.RendererCommon$RendererEvents: void onFrameResolutionChanged(int,int,int)
org.webrtc.audio.WebRtcAudioUtils: void logAudioStateBasic(java.lang.String,android.content.Context,android.media.AudioManager)
org.webrtc.audio.WebRtcAudioRecord: void access$100(boolean)
io.objectbox.converter.IntegerFlexMapConverter: void checkMapKeyType(java.lang.Object)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dataChannelClose(java.lang.String)
androidx.appcompat.widget.AppCompatSpinner: android.graphics.drawable.Drawable getPopupBackground()
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: void run()
org.webrtc.PeerConnection$IceServer: boolean equals(java.lang.Object)
androidx.appcompat.widget.ScrollingTabContainerView: void setContentHeight(int)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $values()
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
org.webrtc.RtpParameters$Codec: java.lang.Integer getClockRate()
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] values()
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord createAudioRecordOnLowerThanM(int,int,int,int,int)
org.webrtc.VideoSource$1: VideoSource$1(org.webrtc.VideoSource)
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)
androidx.appcompat.widget.LinearLayoutCompat: void setVerticalGravity(int)
org.webrtc.PeerConnection$RTCConfiguration: boolean getSuspendBelowMinBitrate()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onSelectedCandidatePairChanged(org.webrtc.CandidatePairChangeEvent)
androidx.appcompat.widget.AppCompatEditText: void setTextClassifier(android.view.textclassifier.TextClassifier)
org.webrtc.MediaCodecVideoDecoderFactory: boolean isCodecAllowed(android.media.MediaCodecInfo)
io.objectbox.converter.StringMapConverter: java.lang.Object convertToDatabaseValue(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
org.webrtc.audio.WebRtcAudioTrack: void logMainParametersExtended()
org.webrtc.SurfaceTextureHelper: void updateTexImage()
com.cloudwebrtc.webrtc.DataChannelObserver: void onCancel(java.lang.Object)
androidx.appcompat.widget.Toolbar: void setLogoDescription(int)
org.webrtc.voiceengine.WebRtcAudioUtils: boolean isNoiseSuppressorSupported()
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(android.hardware.camera2.CameraManager,java.lang.String)
org.webrtc.audio.VolumeLogger: android.media.AudioManager access$000(org.webrtc.audio.VolumeLogger)
org.webrtc.FileVideoCapturer$1: FileVideoCapturer$1(org.webrtc.FileVideoCapturer)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatSpinner: void setPrompt(java.lang.CharSequence)
androidx.core.view.ViewCompat$Api18Impl: void setClipBounds(android.view.View,android.graphics.Rect)
org.webrtc.voiceengine.WebRtcAudioRecord: byte[] access$400(org.webrtc.voiceengine.WebRtcAudioRecord)
org.webrtc.HardwareVideoEncoderFactory: boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
org.webrtc.VideoFrameDrawer$YuvUploader: int[] getYuvTextures()
org.webrtc.voiceengine.WebRtcAudioManager: WebRtcAudioManager(long)
androidx.appcompat.widget.AppCompatButton: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] values()
org.webrtc.EglRenderer: void release()
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState valueOf(java.lang.String)
androidx.appcompat.widget.SearchView: void setIconified(boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
androidx.core.app.ActivityCompat$Api16Impl: void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: ScheduledNotificationReceiver()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaConstraints defaultConstraints()
org.webrtc.HardwareVideoEncoder$YuvFormat: org.webrtc.HardwareVideoEncoder$YuvFormat valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVibrationPattern(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.appcompat.widget.AppCompatSpinner: void setPopupBackgroundResource(int)
org.webrtc.Camera2Session: int getFrameOrientation()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory createPeerConnectionFactory()
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: void invoke(java.lang.Object[])
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()
org.webrtc.VideoEncoderFallback: long nativeCreateEncoder(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder)
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAligned(boolean)
org.webrtc.VideoProcessor$-CC: void $default$onFrameCaptured(org.webrtc.VideoProcessor,org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(boolean,int,int)
org.webrtc.CameraCapturer$4: void onCameraDisconnected()
androidx.appcompat.widget.ActionMenuView: void setOnMenuItemClickListener(androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener)
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoEncoder$EncoderInfo $default$getEncoderInfo(org.webrtc.VideoEncoder)
androidx.core.widget.NestedScrollView: void setNestedScrollingEnabled(boolean)
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar: AnalyticsConnectorRegistrar()
org.webrtc.VideoFrame$Buffer: int getWidth()
org.webrtc.EglRenderer$2: EglRenderer$2(org.webrtc.EglRenderer)
org.webrtc.voiceengine.WebRtcAudioUtils: boolean deviceIsBlacklistedForOpenSLESUsage()
androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnectionDependencies$Builder setSSLCertificateVerifier(org.webrtc.SSLCertificateVerifier)
org.webrtc.NativeLibrary$DefaultLoader: boolean load(java.lang.String)
org.webrtc.RtpReceiver$Observer: void onFirstPacketReceived(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.GlRectDrawer$ShaderCallbacks: GlRectDrawer$ShaderCallbacks(org.webrtc.GlRectDrawer$1)
androidx.appcompat.widget.LinearLayoutCompat: int getGravity()
org.webrtc.EglBase14Impl: boolean hasSurface()
com.google.android.gms.common.SupportErrorDialogFragment: SupportErrorDialogFragment()
com.cloudwebrtc.webrtc.utils.ObjectType: ObjectType(java.lang.String,int)
org.webrtc.YuvHelper: void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.NetworkMonitorAutoDetect: void registerReceiver()
org.webrtc.NetworkMonitorAutoDetect: void connectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.cloudwebrtc.webrtc.record.FrameCapturer: void onFrame(org.webrtc.VideoFrame)
com.yalantis.ucrop.view.TransformImageView: java.lang.String getImageOutputPath()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction valueOf(java.lang.String)
androidx.appcompat.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)
androidx.legacy.content.WakefulBroadcastReceiver: WakefulBroadcastReceiver()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback: void onWebRtcAudioTrackStop()
io.flutter.plugins.imagepicker.CameraDevice: io.flutter.plugins.imagepicker.CameraDevice valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: NetworkMonitorAutoDetect$WifiManagerDelegate()
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status valueOf(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule: long nativeCreateAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean)
org.webrtc.PeerConnectionFactory: void initialize(org.webrtc.PeerConnectionFactory$InitializationOptions)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] values()
androidx.appcompat.widget.Toolbar: int getContentInsetStartWithNavigation()
androidx.appcompat.widget.AppCompatButton: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
io.objectbox.converter.FlexObjectConverter: java.util.List buildList(io.objectbox.flatbuffers.FlexBuffers$Vector)
org.webrtc.EglBase: int surfaceHeight()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion()
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State valueOf(java.lang.String)
org.webrtc.CameraEnumerationAndroid: CameraEnumerationAndroid()
org.webrtc.EglBase10Impl: void createPbufferSurface(int,int)
org.webrtc.CameraVideoCapturer$CameraSwitchHandler: void onCameraSwitchDone(boolean)
org.webrtc.audio.WebRtcAudioRecord: void access$900(org.webrtc.audio.WebRtcAudioRecord,java.lang.String)
org.webrtc.HardwareVideoDecoderFactory$1: HardwareVideoDecoderFactory$1()
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.CameraVideoCapturer$CameraEventsHandler access$200(org.webrtc.CameraVideoCapturer$CameraStatistics)
org.webrtc.voiceengine.WebRtcAudioRecord: void access$900(org.webrtc.voiceengine.WebRtcAudioRecord,java.lang.String)
org.webrtc.CryptoOptions$Srtp: boolean getEnableEncryptedRtpHeaderExtensions()
org.webrtc.PeerConnectionFactory: void nativeDeleteLoggable()
org.webrtc.SurfaceTextureHelper$2: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getNetworkType()
androidx.appcompat.widget.AppCompatEditText: android.content.res.ColorStateList getSupportBackgroundTintList()
org.webrtc.GlRectDrawer: void drawOes(int,float[],int,int,int,int,int,int)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.appcompat.widget.ActionMenuView: void setOverflowReserved(boolean)
androidx.core.app.AppOpsManagerCompat$Api29Impl: int checkOpNoThrow(android.app.AppOpsManager,java.lang.String,int,java.lang.String)
